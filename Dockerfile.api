# Build stage
FROM node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++

WORKDIR /app

# Copy package files
COPY package.json package-lock.json ./
COPY apps/admin-dashboard/package.json ./apps/admin-dashboard/
COPY apps/api/package.json ./apps/api/
COPY apps/booking-app/package.json ./apps/booking-app/
COPY apps/merchant-app/package.json ./apps/merchant-app/
COPY packages/shared/package.json ./packages/shared/
COPY packages/types/package.json ./packages/types/
COPY packages/ui/package.json ./packages/ui/
COPY packages/utils/package.json ./packages/utils/

# Install ALL dependencies
RUN npm ci

# Copy source code
COPY . .

# Generate Prisma client FIRST (before building)
WORKDIR /app/apps/api
RUN npx prisma generate

# Build types package
WORKDIR /app/packages/types
RUN npm run build

# Build utils package
WORKDIR /app/packages/utils
RUN npm run build

# Build API
WORKDIR /app/apps/api
RUN npm run build

# Production stage
FROM node:20-alpine

RUN apk add --no-cache dumb-init

WORKDIR /app

# Copy package files
COPY package.json package-lock.json ./
COPY apps/admin-dashboard/package.json ./apps/admin-dashboard/
COPY apps/api/package.json ./apps/api/
COPY apps/booking-app/package.json ./apps/booking-app/
COPY apps/merchant-app/package.json ./apps/merchant-app/
COPY packages/shared/package.json ./packages/shared/
COPY packages/types/package.json ./packages/types/
COPY packages/ui/package.json ./packages/ui/
COPY packages/utils/package.json ./packages/utils/

# Install production dependencies only
RUN npm ci --production

# Copy built application from builder
COPY --from=builder /app/packages/types/dist ./packages/types/dist
COPY --from=builder /app/packages/utils/dist ./packages/utils/dist
COPY --from=builder /app/apps/api/dist ./apps/api/dist
COPY --from=builder /app/apps/api/prisma ./apps/api/prisma

# Generate Prisma client for production
WORKDIR /app/apps/api
RUN npx prisma generate

# Create non-root user
RUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001
USER nodejs

EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"

# Start the application
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/main"]
