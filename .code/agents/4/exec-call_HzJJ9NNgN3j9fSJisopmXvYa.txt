docker-compose.test.yml:20:  redis-test:
docker-compose.test.yml:21:    image: redis:7-alpine
docker-compose.test.yml:25:      test: ["CMD", "redis-cli", "ping"]
apps/api/package.json:73:    "cache-manager-redis-store": "^3.0.1",
apps/api/package.json:89:    "redis": "^5.6.0",
apps/api/src/payments/payments.controller.ts:38:import { RedisService } from '../common/redis/redis.service';
apps/api/src/payments/payments.controller.ts:50:    private readonly redisService: RedisService,
apps/api/src/payments/payments.controller.ts:389:    const cached = await this.redisService.get<PaymentInitResponseDto>(cacheKey);
apps/api/src/payments/payments.controller.ts:459:    await this.redisService.set(cacheKey, response, 120);
apps/api/src/payments/payment-gateway.service.ts:6:import { RedisService } from '../common/redis/redis.service';
apps/api/src/payments/payment-gateway.service.ts:17:    private redisService: RedisService,
apps/api/src/payments/payment-gateway.service.ts:120:    const cached = await this.redisService.get<{ provider: string; config: any }>(cacheKey);
apps/api/src/payments/payment-gateway.service.ts:135:    await this.redisService.set(cacheKey, config, 300);
apps/api/src/payments/payments.module.ts:12:import { RedisModule } from '../common/redis/redis.module';
apps/api/src/payments/orders.service.ts:5:import { RedisService } from '../common/redis/redis.service';
apps/api/src/payments/orders.service.ts:22:    private redisService: RedisService,
apps/api/src/payments/orders.service.ts:69:    const cachedOrder = await this.redisService.get(cacheKey);
apps/api/src/payments/orders.service.ts:151:    await this.redisService.set(cacheKey, order, 300);
apps/api/src/payments/orders.service.ts:224:    await this.redisService.del(RedisService.getOrderCacheKey(orderId));
apps/api/src/payments/orders.service.ts:226:      await this.redisService.del(RedisService.getOrderByBookingCacheKey(order.bookingId));
apps/api/src/payments/orders.service.ts:266:    await this.redisService.del(RedisService.getOrderCacheKey(orderId));
apps/api/src/payments/orders.service.ts:268:      await this.redisService.del(RedisService.getOrderByBookingCacheKey(order.bookingId));
apps/api/src/payments/orders.service.ts:486:    const cachedOrderId = await this.redisService.get<string>(bookingCacheKey);
apps/api/src/payments/orders.service.ts:497:        await this.redisService.del(bookingCacheKey);
apps/api/src/payments/orders.service.ts:624:    await this.redisService.set(newBookingCacheKey, order.id, 300); // 5 minutes
apps/api/src/payments/orders.service.ts:964:          await this.redisService.set(newBookingCacheKey, order.id, 300); // 5 minutes
apps/api/src/app.module.ts:28:import { RedisModule } from './common/redis/redis.module';
apps/api/src/common/redis/redis.module.ts:3:import * as redisStore from 'cache-manager-redis-store';
apps/api/src/common/redis/redis.module.ts:5:import { RedisService } from './redis.service';
apps/api/src/common/redis/redis.module.ts:14:        const redisEnabled = configService.get('REDIS_ENABLED', 'false') === 'true';
apps/api/src/common/redis/redis.module.ts:16:        if (!redisEnabled) {
apps/api/src/common/redis/redis.module.ts:25:          store: redisStore,
apps/api/node_modules/@nestjs/cache-manager/package.json:26:    "@keyv/redis": "4.3.2",
apps/api/node_modules/keyv/package.json:39:    "redis",
apps/api/node_modules/keyv/README.md:78:npm install --save @keyv/redis
apps/api/node_modules/keyv/README.md:127:// redis
apps/api/node_modules/keyv/README.md:128:import KeyvRedis from '@keyv/redis';
apps/api/node_modules/keyv/README.md:130:const keyv = new Keyv(new KeyvRedis('redis://user:pass@localhost:6379'));
apps/api/node_modules/keyv/README.md:154:import KeyvRedis from '@keyv/redis';
apps/api/node_modules/keyv/README.md:156:const keyvRedis = new KeyvRedis('redis://user:pass@localhost:6379');
apps/api/node_modules/keyv/README.md:173:const users = new Keyv(new KeyvRedis('redis://user:pass@localhost:6379'), { namespace: 'users' });
apps/api/node_modules/keyv/README.md:174:const cache = new Keyv(new KeyvRedis('redis://grep: node_modules/prisma/build/prisma_schema_build_bg.wasm: binary file matches
user:pass@localhost:6379'), { namespace: 'cache' });
apps/api/node_modules/keyv/README.md:281:Redis | [@keyv/redis](https://github.com/jaredwray/keyv/tree/master/packages/redis) | Yes
apps/api/node_modules/keyv/dist/index.cjs:215:  "redis",
apps/api/node_modules/keyv/dist/index.js:189:  "redis",
apps/api/scripts/fix-production-bookings.js:49:      console.log('   This needs to be redistributed across multiple days.');
apps/api/FLY_DEPLOYMENT_GUIDE.md:54:fly redis create --name heya-pos-redis --region syd --no-replicas
apps/api/FLY_DEPLOYMENT_GUIDE.md:59:fly redis status heya-pos-redis
apps/api/FLY_DEPLOYMENT_GUIDE.md:64:fly secrets set REDIS_URL="redis://default:password@heya-pos-redis.internal:6379"
node_modules/jsbn/LICENSE:33: * All redistributions must retain an intact copy of this copyright notice
node_modules/insight/node_modules/rxjs/_esm5/LICENSE.txt:150:    appropriateness of using or redistributing the Work and assume any
node_modules/insight/node_modules/rxjs/_esm5/LICENSE.txt:165: 9. Accepting Warranty or Additional Liability. While redistributing
node_modules/insight/node_modules/rxjs/src/LICENSE.txt:150:    appropriateness of using or redistributing the Work and assume any
node_modules/insight/node_modules/rxjs/src/LICENSE.txt:165: 9. Accepting Warranty or Additional Liability. While redistributing
node_modules/insight/node_modules/rxjs/_esm2015/LICENSE.txt:150:    appropriateness of using or redistributing the Work and assume any
node_modules/insight/node_modules/rxjs/_esm2015/LICENSE.txt:165: 9. Accepting Warranty or Additional Liability. While redistributing
node_modules/insight/node_modules/rxjs/LICENSE.txt:150:    appropriateness of using or redistributing the Work and assume any
node_modules/insight/node_modules/rxjs/LICENSE.txt:165: 9. Accepting Warranty or Additional Liability. While redistributing
node_modules/insight/node_modules/rxjs/bundles/rxjs.umd.js:152:    appropriateness of using or redistributing the Work and assume any
node_modules/insight/node_modules/rxjs/bundles/rxjs.umd.js:167: 9. Accepting Warranty or Additional Liability. While redistributing
node_modules/insight/node_modules/rxjs/bundles/rxjs.umd.js:358:    appropriateness of using or redistributing the Work and assume any
node_modules/insight/node_modules/rxjs/bundles/rxjs.umd.js:373: 9. Accepting Warranty or Additional Liability. While redistributing
grep: node_modules/turbo-linux-64/bin/turbo: binary file matches
node_modules/prisma/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/prisma/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@clinic/doctor/CONTRIBUTING.md:97:redistributed consistent with this project or license(s) involved.
node_modules/@clinic/heap-profiler/CONTRIBUTING.md:49:redistributed consistent with this project or license(s) involved.
node_modules/@clinic/heap-profiler/package.json:47:    "ioredis": "^5.0.1",
node_modules/@clinic/heap-profiler/examples/redis-web-service/index.js:8:    If you are using Docker, you can just do: sudo docker run -p 6379:6379 redis
node_modules/@clinic/heap-profiler/examples/redis-web-service/index.js:11:    for information about the URL format, see: https://github.com/luin/ioredis#connect-to-redis
node_modules/@clinic/heap-profiler/examples/redis-web-service/index.js:15:    node examples/redis-web-service/index.js
node_modules/@clinic/heap-profiler/examples/redis-web-service/app.js:5:const Redis = require('ioredis')
node_modules/@clinic/heap-profiler/examples/redis-web-service/app.js:17:const redis = new Redis(process.env.REDIS_URL ? `redis://${process.env.REDIS_URL}` : 6379)
node_modules/@clinic/heap-profiler/examples/redis-web-service/app.js:22:  redis.srandmember(key, (err, value) => {
node_modules/@clinic/heap-profiler/examples/redis-web-service/app.js:35:  redis.sadd(key, randomString(), err => {
node_modules/@clinic/heap-profiler/README.md:93:node examples/redis-web-service
node_modules/@clinic/heap-profiler/tags:98:connections	examples/redis-web-service/index.js	/^      connections: 1,$/;"	P
node_modules/@clinic/heap-profiler/tags:120:duration	examples/redis-web-service/index.js	/^      duration: 10,$/;"	P
node_modules/@clinic/heap-profiler/tags:160:heapProfiler	examples/redis-web-service/index.js	/^const heapProfiler = new ClinicHeapProfiler({ detectPort: true })$/;"	V
node_modules/@clinic/heap-profiler/tags:220:pipelining	examples/redis-web-service/index.js	/^      pipelining: 1,$/;"	P
node_modules/@clinic/heap-profiler/tags:229:randomString	examples/redis-web-service/app.js	/^function randomString (length = 0) {$/;"	F
node_modules/@clinic/heap-profiler/tags:231:redis	examples/redis-web-service/app.js	/^const redis = new Redis(process.env.REDIS_URL ? `redis:\/\/${process.env.REDIS_URL}` : 6379)$/;"	V
node_modules/@clinic/bubbleprof/CONTRIBUTING.md:116:redistributed consistent with this project or license(s) involved.
node_modules/@clinic/flame/CONTRIBUTING.md:49:redistributed consistent with this project or license(s) involved.
node_modules/express/package.json:69:    "connect-redis": "3.4.2",
node_modules/express/History.md:2639:  * add redis search example
node_modules/express/History.md:2650:  * add redis online user activity tracking example
node_modules/express/History.md:2788:  * Fixed redis session example
node_modules/express/History.md:3019:  * Fixed redis session example
node_modules/bare-fs/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/bare-fs/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/sharp/LICENSE:141:redistributing the Work and assume any risks associated with Your exercise of
node_modules/sharp/LICENSE:158:While redistributing the Work or Derivative Works thereof, You may choose to
node_modules/.package-lock.json:61:        "cache-manager-redis-store": "^3.0.1",
node_modules/.package-lock.json:77:        "redis": "^5.6.0",
node_modules/.package-lock.json:4368:    "node_modules/@redis/bloom": {
node_modules/.package-lock.json:4370:      "resolved": "https://registry.npmjs.org/@redis/bloom/-/bloom-5.6.0.tgz",
node_modules/.package-lock.json:4377:        "@redis/client": "^5.6.0"
node_modules/.package-lock.json:4380:    "node_modules/@redis/client": {
node_modules/.package-lock.json:4382:      "resolved": "https://registry.npmjs.org/@redis/client/-/client-5.6.0.tgz",
node_modules/.package-lock.json:4392:    "node_modules/@redis/json": {
node_modules/.package-lock.json:4394:      "resolved": "https://registry.npmjs.org/@redis/json/-/json-5.6.0.tgz",
node_modules/.package-lock.json:4401:        "@redis/client": "^5.6.0"
node_modules/.package-lock.json:4404:    "node_modules/@redis/search": {
node_modules/.package-lock.json:4406:      "resolved": "https://registry.npmjs.org/@redis/search/-/search-5.6.0.tgz",
node_modules/.package-lock.json:4413:        "@redis/client": "^5.6.0"
node_modules/.package-lock.json:4416:    "node_modules/@redis/time-series": {
node_modules/.package-lock.json:4418:      "resolved": "https://registry.npmjs.org/@redis/time-series/-/time-series-5.6.0.tgz",
node_modules/.package-lock.json:4425:        "@redis/client": "^5.6.0"
node_modules/.package-lock.json:7995:    "node_modules/cache-manager-redis-store": {
node_modules/.package-lock.json:7997:      "resolved": "https://registry.npmjs.org/cache-manager-redis-store/-/cache-manager-redis-store-3.0.1.tgz",
node_modules/.package-lock.json:8001:        "redis": "^4.3.1"
node_modules/.package-lock.json:8007:    "node_modules/cache-manager-redis-store/node_modules/@redis/bloom": {
node_modules/.package-lock.json:8009:      "resolved": "https://registry.npmjs.org/@redis/bloom/-/bloom-1.2.0.tgz",
node_modules/.package-lock.json:8013:        "@redis/client": "^1.0.0"
node_modules/.package-lock.json:8016:    "node_modules/cache-manager-redis-store/node_modules/@redis/client": {
node_modules/.package-lock.json:8018:      "resolved": "https://registry.npmjs.org/@redis/client/-/client-1.6.1.tgz",
node_modules/.package-lock.json:8030:    "node_modules/cache-manager-redis-store/node_modules/@redis/graph": {
node_modules/.package-lock.json:8032:      "resolved": "https://registry.npmjs.org/@redis/graph/-/graph-1.1.1.tgz",
node_modules/.package-lock.json:8036:        "@redis/client": "^1.0.0"
node_modules/.package-lock.json:8039:    "node_modules/cache-manager-redis-store/node_modules/@redis/json": {
node_modules/.package-lock.json:8041:      "resolved": "https://registry.npmjs.org/@redis/json/-/json-1.0.7.tgz",
node_modules/.package-lock.json:8045:        "@redis/client": "^1.0.0"
node_modules/.package-lock.json:8048:    "node_modules/cache-manager-redis-store/node_modules/@redis/search": {
node_modules/.package-lock.json:8050:      "resolved": "https://registry.npmjs.org/@redis/search/-/search-1.2.0.tgz",
node_modules/.package-lock.json:8054:        "@redis/client": "^1.0.0"
node_modules/.package-lock.json:8057:    "node_modules/cache-manager-redis-store/node_modules/@redis/time-series": {
node_modules/.package-lock.json:8059:      "resolved": "https://registry.npmjs.org/@redis/time-series/-/time-series-1.1.0.tgz",
node_modules/.package-lock.json:8063:        "@redis/client": "^1.0.0"
node_modules/.package-lock.json:8066:    "node_modules/cache-manager-redis-store/node_modules/redis": {
node_modules/.package-lock.json:8068:      "resolved": "https://registry.npmjs.org/redis/-/redis-4.7.1.tgz",
node_modules/.package-lock.json:8075:        "@redis/bloom": "1.2.0",
node_modules/.package-lock.json:8076:        "@redis/client": "1.6.1",
node_modules/.package-lock.json:8077:        "@redis/graph": "1.1.1",
node_modules/.package-lock.json:8078:        "@redis/json": "1.0.7",
node_modules/.package-lock.json:8079:        "@redis/search": "1.2.0",
node_modules/.package-lock.json:8080:        "@redis/time-series": "1.1.0"
node_modules/.package-lock.json:8083:    "node_modules/cache-manager-redis-store/node_modules/yallist": {
node_modules/.package-lock.json:20971:    "node_modules/redis": {
node_modules/.package-lock.json:20973:      "resolved": "https://registry.npmjs.org/redis/-/redis-5.6.0.tgz",
node_modules/.package-lock.json:20977:        "@redis/bloom": "5.6.0",
node_modules/.package-lock.json:20978:        "@redis/client": "5.6.0",
node_modules/.package-lock.json:20979:        "@redis/json": "5.6.0",
node_modules/.package-lock.json:20980:        "@redis/search": "5.6.0",
node_modules/.package-lock.json:20981:        "@redis/time-series": "5.6.0"
node_modules/fast-diff/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/fast-diff/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/typescript/lib/typesMap.json:324:        "node_redis": "redis",
node_modules/typescript/LICENSE.txt:49:7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.
node_modules/typescript/LICENSE.txt:53:9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.
node_modules/typescript/ThirdPartyNoticeText.txt:90:* The full text of this NOTICE in a location viewable to users of the redistributed or derivative work.
node_modules/tough-cookie/README.md:479:- [`redis-cookie-store`](https://github.com/benkroeger/redis-cookie-store): Redis
node_modules/@xtuc/long/LICENSE:151:      appropriateness of using or redistributing the Work and assume any
node_modules/@xtuc/long/LICENSE:166:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/long/LICENSE:151:      appropriateness of using or redistributing the Work and assume any
node_modules/long/LICENSE:166:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/ecdsa-sig-formatter/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/ecdsa-sig-formatter/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/bl/node_modules/readable-stream/CONTRIBUTING.md:24:  maintained indefinitely and may be redistributed consistent with
node_modules/bare-events/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/bare-events/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/playwright/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/playwright/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/playwright/ThirdPartyNotices.txt:295:      appropriateness of using or redistributing the Work and assume any
node_modules/playwright/ThirdPartyNotices.txt:310:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/bare-path/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/bare-path/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/duplexify/node_modules/readable-stream/CONTRIBUTING.md:24:  maintained indefinitely and may be redistributed consistent with
node_modules/JSONStream/test/fixtures/all_npm.json:271:{"id":"backbone-redis","key":"backbone-redis","value":{"rev":"9-2e3f6a9e095b00ccec9aa19b3fbc65eb"}},
node_modules/JSONStream/test/fixtures/all_npm.json:285:{"id":"banzai-redis","key":"banzai-redis","value":{"rev":"3-446f29e0819fd79c810fdfa8ce05bdcf"}},
node_modules/JSONStream/test/fixtures/all_npm.json:698:{"id":"connect-heroku-redis","key":"connect-heroku-redis","value":{"rev":"13-92da2be67451e5f55f6fbe3672c86dc4"}},
node_modules/JSONStream/test/fixtures/all_npm.json:720:{"id":"connect-redis","key":"connect-redis","value":{"rev":"40-4faa12962b14da49380de2bb183176f9"}},
node_modules/JSONStream/test/fixtures/all_npm.json:727:{"id":"connect-session-redis-store","key":"connect-session-redis-store","value":{"rev":"8-fecfed6e17476eaada5cfe7740d43893"}},
node_modules/JSONStream/test/fixtures/all_npm.json:1134:{"id":"express-session-redis","key":"express-session-redis","value":{"rev":"6-5f4f16092a0706d2daef89470d6971e6"}},
node_modules/JSONStream/test/fixtures/all_npm.json:1487:{"id":"hiredis","key":"hiredis","value":{"rev":"46-29ceb03860efbd4b3b995247f27f78b9"}},
node_modules/JSONStream/test/fixtures/all_npm.json:2364:{"id":"nconf-redis","key":"nconf-redis","value":{"rev":"5-21ae138633b20cb29ed49b9fcd425e10"}},
node_modules/JSONStream/test/fixtures/all_npm.json:2524:{"id":"node-redis","key":"node-redis","value":{"rev":"13-12adf3a3e986675637fa47b176f527e3"}},
node_modules/JSONStream/test/fixtures/all_npm.json:2525:{"id":"node-redis-mapper","key":"node-redis-mapper","value":{"rev":"5-53ba8f67cc82dbf1d127fc7359353f32"}},
node_modules/JSONStream/test/fixtures/all_npm.json:2526:{"id":"node-redis-monitor","key":"node-redis-monitor","value":{"rev":"3-79bcba76241d7c7dbc4b18d90a9d59e3"}},
node_modules/JSONStream/test/fixtures/all_npm.json:3064:{"id":"redis","key":"redis","value":{"rev":"98-ec237259e8ef5c42a76ff260be50f8fd"}},
node_modules/JSONStream/test/fixtures/all_npm.json:3065:{"id":"redis-channels","key":"redis-channels","value":{"rev":"3-8efc40a25fd18c1c9c41bbaeedb0b22f"}},
node_modules/JSONStream/test/fixtures/all_npm.json:3066:{"id":"redis-client","key":"redis-client","value":{"rev":"3-3376054236e651e7dfcf91be8632fd0e"}},
node_modules/JSONStream/test/fixtures/all_npm.json:3067:{"id":"redis-completer","key":"redis-completer","value":{"rev":"11-9e5bf1f8d37df681e7896252809188d3"}},
node_modules/JSONStream/test/fixtures/all_npm.json:3068:{"id":"redis-keyspace","key":"redis-keyspace","value":{"rev":"25-245f2375741eb3e574dfce9f2da2b687"}},
node_modules/JSONStream/test/fixtures/all_npm.json:3069:{"id":"redis-lua","key":"redis-lua","value":{"rev":"7-81f3dd3a4601271818f15278f495717a"}},
node_modules/JSONStream/test/fixtures/all_npm.json:3070:{"id":"redis-namespace","key":"redis-namespace","value":{"rev":"3-ddf52a172db190fe788aad4116b1cb29"}},
node_modules/JSONStream/test/fixtures/all_npm.json:3071:{"id":"redis-node","key":"redis-node","value":{"rev":"24-7a1e9098d8b5a42a99ca71a01b0d7672"}},
node_modules/JSONStream/test/fixtures/all_npm.json:3072:{"id":"redis-queue","key":"redis-queue","value":{"rev":"3-9896587800c4b98ff291b74210c16b6e"}},
node_modules/JSONStream/test/fixtures/all_npm.json:3073:{"id":"redis-session-store","key":"redis-session-store","value":{"rev":"3-2229501ecf817f9ca60ff2c7721ddd73"}},
node_modules/JSONStream/test/fixtures/all_npm.json:3074:{"id":"redis-tag","key":"redis-tag","value":{"rev":"9-6713e8e91a38613cfef09d7b40f4df71"}},
node_modules/JSONStream/test/fixtures/all_npm.json:3075:{"id":"redis-url","key":"redis-url","value":{"rev":"5-f53545a0039b512a2f7afd4ba2e08773"}},
node_modules/JSONStream/test/fixtures/all_npm.json:3076:{"id":"redis-user","key":"redis-user","value":{"rev":"11-a8c0f6d40cbfbb6183a46e121f31ec06"}},
node_modules/JSONStream/test/fixtures/all_npm.json:3077:{"id":"redis2json","key":"redis2json","value":{"rev":"5-dd96f78f8db0bf695346c95c2ead1307"}},
node_modules/JSONStream/test/fixtures/all_npm.json:3078:{"id":"redis_objects","key":"redis_objects","value":{"rev":"3-499fe6dd07e7a3839111b1892b97f54c"}},
node_modules/JSONStream/test/fixtures/all_npm.json:3079:{"id":"redisev","key":"redisev","value":{"rev":"3-8e857dbe2341292c6e170a7bfe3fa81b"}},
node_modules/JSONStream/test/fixtures/all_npm.json:3080:{"id":"redisfs","key":"redisfs","value":{"rev":"69-d9c90256d32348fdca7a4e646ab4d551"}},
node_modules/JSONStream/test/fixtures/all_npm.json:3081:{"id":"redisify","key":"redisify","value":{"rev":"3-03fce3095b4129e71280d278f11121ba"}},
node_modules/JSONStream/test/fixtures/all_npm.json:3082:{"id":"rediskit","key":"rediskit","value":{"rev":"5-6a0324708f45d884a492cbc408137059"}},
node_modules/JSONStream/test/fixtures/all_npm.json:3083:{"id":"redisql","key":"redisql","value":{"rev":"6-b31802eb37910cb74bd3c9f7b477c025"}},
node_modules/JSONStream/test/fixtures/all_npm.json:3270:{"id":"server-backbone-redis","key":"server-backbone-redis","value":{"rev":"13-c56419457002aa4fa23b142634882594"}},
node_modules/JSONStream/test/fixtures/all_npm.json:3916:{"id":"winston-redis","key":"winston-redis","value":{"rev":"3-1fb861edc109ed5cbd735320124ba103"}},
node_modules/bare-stream/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/bare-stream/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/tunnel-agent/LICENSE:49:7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.
node_modules/tunnel-agent/LICENSE:53:9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.
node_modules/playwright-core/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/playwright-core/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/playwright-core/ThirdPartyNotices.txt:826: * All redistributions must retain an intact copy of this copyright notice
node_modules/caseless/LICENSE:25:7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.
node_modules/caseless/LICENSE:27:9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.
node_modules/redis/package.json:2:  "name": "redis",
node_modules/redis/package.json:16:    "@redis/bloom": "5.6.0",
node_modules/redis/package.json:17:    "@redis/client": "5.6.0",
node_modules/redis/package.json:18:    "@redis/json": "5.6.0",
node_modules/redis/package.json:19:    "@redis/search": "5.6.0",
node_modules/redis/package.json:20:    "@redis/time-series": "5.6.0"
node_modules/redis/package.json:27:    "url": "git://github.com/redis/node-redis.git"
node_modules/redis/package.json:30:    "url": "https://github.com/redis/node-redis/issues"
node_modules/redis/package.json:32:  "homepage": "https://github.com/redis/node-redis",
node_modules/redis/package.json:34:    "redis"
node_modules/redis/README.md:3:[![Tests](https://img.shields.io/github/actions/workflow/status/redis/node-redis/tests.yml?branch=master)](https://github.com/redis/node-redis/actions/workflows/tests.yml)
node_modules/redis/README.md:4:[![Coverage](https://codecov.io/gh/redis/node-redis/branch/master/graph/badge.svg?token=xcfqHhJC37)](https://codecov.io/gh/redis/node-redis)
node_modules/redis/README.md:5:[![License](https://img.shields.io/github/license/redis/node-redis.svg)](https://github.com/redis/node-redis/blob/master/LICENSE)
node_modules/redis/README.md:7:[![Discord](https://img.shields.io/discord/697882427875393627.svg?style=social&logo=discord)](https://discord.gg/redis)
node_modules/redis/README.md:8:[![Twitch](https://img.shields.io/twitch/status/redisinc?style=social)](https://www.twitch.tv/redisinc)
node_modules/redis/README.md:9:[![YouTube](https://img.shields.io/youtube/channel/views/UCD78lHSwYqMlyetR0_P4Vig?style=social)](https://www.youtube.com/redisinc)
node_modules/redis/README.md:10:[![Twitter](https://img.shields.io/twitter/follow/redisinc?style=social)](https://twitter.com/redisinc)
node_modules/redis/README.md:12:node-redis is a modern, high performance [Redis](https://redis.io) client for Node.js.
node_modules/redis/README.md:16:[Learn for free at Redis University](https://university.redis.com/)
node_modules/redis/README.md:18:[Build faster with the Redis Launchpad](https://launchpad.redis.com/)
node_modules/redis/README.md:20:[Try the Redis Cloud](https://redis.com/try-free/)
node_modules/redis/README.md:22:[Dive in developer tutorials](https://developer.redis.com/)
node_modules/redis/README.md:24:[Join the Redis community](https://redis.com/community/)
node_modules/redis/README.md:26:[Work at Redis](https://redis.com/company/careers/jobs/)
node_modules/redis/README.md:30:Start a redis via docker:
node_modules/redis/README.md:33:docker run -p 6379:6379 -d redis:8.0-rc1
node_modules/redis/README.md:36:To install node-redis, simply:
node_modules/redis/README.md:39:npm install redis
node_modules/redis/README.md:41:> "redis" is the "whole in one" package that includes all the other packages. If you only need a subset of the commands,
node_modules/redis/README.md:48:| [`redis`](https://github.com/redis/node-redis/tree/master/packages/redis)                    | The client with all the ["redis-stack"](https://github.com/redis-stack/redis-stack) modules |
node_modules/redis/README.md:49:| [`@redis/client`](https://github.com/redis/node-redis/tree/master/packages/client)           | The base clients (i.e `RedisClient`, `RedisCluster`, etc.)                                  |
node_modules/redis/README.md:50:| [`@redis/bloom`](https://github.com/redis/node-redis/tree/master/packages/bloom)             | [Redis Bloom](https://redis.io/docs/data-types/probabilistic/) commands                     |
node_modules/redis/README.md:51:| [`@redis/json`](https://github.com/redis/node-redis/tree/master/packages/json)               | [Redis JSON](https://redis.io/docs/data-types/json/) commands                               |
node_modules/redis/README.md:52:| [`@redis/search`](https://github.com/redis/node-redis/tree/master/packages/search)           | [RediSearch](https://redis.io/docs/interact/search-and-query/) commands                     |
node_modules/redis/README.md:53:| [`@redis/time-series`](https://github.com/redis/node-redis/tree/master/packages/time-series) | [Redis Time-Series](https://redis.io/docs/data-types/timeseries/) commands                  |
node_modules/redis/README.md:54:| [`@redis/entraid`](https://github.com/redis/node-redis/tree/master/packages/entraid)         | Secure token-based authentication for Redis clients using Microsoft Entra ID                |
node_modules/redis/README.md:57:> See [redis-om-node](https://github.com/redis/redis-om-node)!
node_modules/redis/README.md:65:import { createClient } from "redis";
node_modules/redis/README.md:77:the format `redis[s]://[[username][:password]@][host][:port][/db-number]`:
node_modules/redis/README.md:81:  url: "redis://alice:foobared@awesome.redis.server:6380",
node_modules/redis/README.md:86:the [client configuration guide](https://github.com/redis/node-redis/blob/master/docs/client-configuration.md).
node_modules/redis/README.md:94:There is built-in support for all of the [out-of-the-box Redis commands](https://redis.io/commands). They are exposed
node_modules/redis/README.md:148:Start a [transaction](https://redis.io/topics/transactions) by calling `.multi()`, then chaining your commands. When
node_modules/redis/README.md:161:You can also [watch](https://redis.io/topics/transactions#optimistic-locking-using-check-and-set) keys by calling
node_modules/redis/README.md:191:See the [Pub/Sub overview](https://github.com/redis/node-redis/blob/master/docs/pub-sub.md).
node_modules/redis/README.md:195:[`SCAN`](https://redis.io/commands/scan) results can be looped over
node_modules/redis/README.md:239:Node Redis v5 adds support for [Client Side Caching](https://redis.io/docs/manual/client-side-caching/), which enables clients to cache query results locally. The Redis server will notify the client when cached results are no longer valid.
node_modules/redis/README.md:253:See the [V5 documentation](https://github.com/redis/node-redis/blob/master/docs/v5.md#client-side-caching) for more details and advanced usage.
node_modules/redis/README.md:277:See the [Programmability overview](https://github.com/redis/node-redis/blob/master/docs/programmability.md).
node_modules/redis/README.md:281:Check out the [Clustering Guide](https://github.com/redis/node-redis/blob/master/docs/clustering.md) when using Node Redis to connect to a Redis Cluster.
node_modules/redis/README.md:294:| `sharded-channel-moved` | See [here](https://github.com/redis/node-redis/blob/master/docs/pub-sub.md#sharded-channel-moved-event)                          | See [here](https://github.com/redis/node-redis/blob/master/docs/pub-sub.md#sharded-channel-moved-event) |
node_modules/redis/README.md:299:> The client will not emit [any other events](https://github.com/redis/node-redis/blob/master/docs/v3-to-v4.md#all-the-removed-events) beyond those listed above.
node_modules/redis/README.md:316:- [From V3 to V4](https://github.com/redis/node-redis/blob/master/docs/v3-to-v4.md)
node_modules/redis/README.md:317:- [From V4 to V5](https://github.com/redis/node-redis/blob/master/docs/v4-to-v5.md)
node_modules/redis/README.md:318:- [V5](https://github.com/redis/node-redis/blob/master/docs/v5.md)
node_modules/redis/README.md:322:If you'd like to contribute, check out the [contributing guide](https://github.com/redis/node-redis/blob/master/CONTRIBUTING.md).
node_modules/redis/README.md:326:[![Contributors](https://contrib.rocks/image?repo=redis/node-redis)](https://github.com/redis/node-redis/graphs/contributors)
node_modules/redis/README.md:330:This repository is licensed under the "MIT" license. See [LICENSE](https://github.com/redis/node-redis/blob/master/LICENSE).
node_modules/redis/dist/index.d.ts:2:import { RedisModules, RedisFunctions, RedisScripts, RespVersions, TypeMapping, RedisClientOptions, RedisClientType as GenericRedisClientType, RedisClusterOptions, RedisClusterType as genericRedisClusterType, RedisSentinelOptions, RedisSentinelType as genericRedisSentinelType } from '@redis/client';
node_modules/redis/dist/index.d.ts:3:export * from '@redis/client';
node_modules/redis/dist/index.d.ts:4:export * from '@redis/bloom';
node_modules/redis/dist/index.d.ts:5:export * from '@redis/json';
node_modules/redis/dist/index.d.ts:6:export * from '@redis/search';
node_modules/redis/dist/index.d.ts:7:export * from '@redis/time-series';
node_modules/redis/dist/index.d.ts:12:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, json: import("@redis/json/dist/lib/commands").RedisJSON, ...jsons: import("@redis/json/dist/lib/commands").RedisJSON[]) => void;
node_modules/redis/dist/index.d.ts:13:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:17:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, json: import("@redis/json/dist/lib/commands").RedisJSON, ...jsons: import("@redis/json/dist/lib/commands").RedisJSON[]) => void;
node_modules/redis/dist/index.d.ts:18:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:22:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, json: import("@redis/json/dist/lib/commands").RedisJSON, options?: import("@redis/json/dist/lib/commands/ARRINDEX").JsonArrIndexOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:23:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:27:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, json: import("@redis/json/dist/lib/commands").RedisJSON, options?: import("@redis/json/dist/lib/commands/ARRINDEX").JsonArrIndexOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:28:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:32:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, index: number, json: import("@redis/json/dist/lib/commands").RedisJSON, ...jsons: import("@redis/json/dist/lib/commands").RedisJSON[]) => void;
node_modules/redis/dist/index.d.ts:33:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:37:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, index: number, json: import("@redis/json/dist/lib/commands").RedisJSON, ...jsons: import("@redis/json/dist/lib/commands").RedisJSON[]) => void;
node_modules/redis/dist/index.d.ts:38:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:42:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/ARRLEN").JsonArrLenOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:43:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:47:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/ARRLEN").JsonArrLenOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:48:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:52:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/ARRPOP").RedisArrPopOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:53:            readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>) => string | number | boolean | Date | import("@redis/client/dist/lib/RESP/types").NullReply | {
node_modules/redis/dist/index.d.ts:54:                [key: string]: import("@redis/json/dist/lib/commands").RedisJSON;
node_modules/redis/dist/index.d.ts:55:                [key: number]: import("@redis/json/dist/lib/commands").RedisJSON;
node_modules/redis/dist/index.d.ts:56:            } | (import("@redis/json/dist/lib/commands").RedisJSON | import("@redis/client/dist/lib/RESP/types").NullReply)[] | null;
node_modules/redis/dist/index.d.ts:60:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/ARRPOP").RedisArrPopOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:61:            readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>) => string | number | boolean | Date | import("@redis/client/dist/lib/RESP/types").NullReply | (import("@redis/json/dist/lib/commands").RedisJSON | import("@redis/client/dist/lib/RESP/types").NullReply)[] | {
node_modules/redis/dist/index.d.ts:62:                [key: string]: import("@redis/json/dist/lib/commands").RedisJSON;
node_modules/redis/dist/index.d.ts:63:                [key: number]: import("@redis/json/dist/lib/commands").RedisJSON;
node_modules/redis/dist/index.d.ts:68:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, start: number, stop: number) => void;
node_modules/redis/dist/index.d.ts:69:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:73:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, start: number, stop: number) => void;
node_modules/redis/dist/index.d.ts:74:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:78:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/CLEAR").JsonClearOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:79:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:83:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/CLEAR").JsonClearOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:84:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:88:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/DEBUG_MEMORY").JsonDebugMemoryOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:89:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:93:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/DEBUG_MEMORY").JsonDebugMemoryOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:94:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:98:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/DEL").JsonDelOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:99:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:103:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/DEL").JsonDelOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:104:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:108:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/FORGET").JsonForgetOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:109:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:113:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/FORGET").JsonForgetOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:114:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:118:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/GET").JsonGetOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:119:            readonly transformReply: typeof import("@redis/json/dist/lib/commands").transformRedisJsonNullReply;
node_modules/redis/dist/index.d.ts:123:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/GET").JsonGetOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:124:            readonly transformReply: typeof import("@redis/json/dist/lib/commands").transformRedisJsonNullReply;
node_modules/redis/dist/index.d.ts:128:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, value: import("@redis/json/dist/lib/commands").RedisJSON) => void;
node_modules/redis/dist/index.d.ts:129:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:133:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, value: import("@redis/json/dist/lib/commands").RedisJSON) => void;
node_modules/redis/dist/index.d.ts:134:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:138:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, keys: import("@redis/client").RedisArgument[], path: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:139:            readonly transformReply: (this: void, reply: (import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>)[]) => (import("@redis/json/dist/lib/commands").RedisJSON | import("@redis/client/dist/lib/RESP/types").NullReply)[];
node_modules/redis/dist/index.d.ts:143:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, keys: import("@redis/client").RedisArgument[], path: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:144:            readonly transformReply: (this: void, reply: (import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>)[]) => (import("@redis/json/dist/lib/commands").RedisJSON | import("@redis/client/dist/lib/RESP/types").NullReply)[];
node_modules/redis/dist/index.d.ts:148:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, items: import("@redis/json/dist/lib/commands/MSET").JsonMSetItem[]) => void;
node_modules/redis/dist/index.d.ts:149:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:153:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, items: import("@redis/json/dist/lib/commands/MSET").JsonMSetItem[]) => void;
node_modules/redis/dist/index.d.ts:154:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:158:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, by: number) => void;
node_modules/redis/dist/index.d.ts:160:                readonly 2: (reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>) => number | (number | null)[];
node_modules/redis/dist/index.d.ts:161:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/redis/dist/index.d.ts:166:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, by: number) => void;
node_modules/redis/dist/index.d.ts:168:                readonly 2: (reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>) => number | (number | null)[];
node_modules/redis/dist/index.d.ts:169:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/redis/dist/index.d.ts:174:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, by: number) => void;
node_modules/redis/dist/index.d.ts:176:                readonly 2: (reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>) => number | (number | null)[];
node_modules/redis/dist/index.d.ts:177:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/redis/dist/index.d.ts:182:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, by: number) => void;
node_modules/redis/dist/index.d.ts:184:                readonly 2: (reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>) => number | (number | null)[];
node_modules/redis/dist/index.d.ts:185:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/redis/dist/index.d.ts:190:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/OBJKEYS").JsonObjKeysOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:191:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>>;
node_modules/redis/dist/index.d.ts:195:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/OBJKEYS").JsonObjKeysOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:196:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>>;
node_modules/redis/dist/index.d.ts:200:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/OBJLEN").JsonObjLenOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:201:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:205:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/OBJLEN").JsonObjLenOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:206:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:210:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, json: import("@redis/json/dist/lib/commands").RedisJSON, options?: import("@redis/json/dist/lib/commands/SET").JsonSetOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:211:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:215:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, json: import("@redis/json/dist/lib/commands").RedisJSON, options?: import("@redis/json/dist/lib/commands/SET").JsonSetOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:216:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:220:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, append: string, options?: import("@redis/json/dist/lib/commands/STRAPPEND").JsonStrAppendOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:221:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:225:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, append: string, options?: import("@redis/json/dist/lib/commands/STRAPPEND").JsonStrAppendOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:226:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:230:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/STRLEN").JsonStrLenOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:231:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:235:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/STRLEN").JsonStrLenOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:236:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:240:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:241:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:245:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:246:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:250:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/TYPE").JsonTypeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:252:                readonly 2: () => import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:253:                readonly 3: (reply: (import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>)[]) => import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:258:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/TYPE").JsonTypeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:260:                readonly 2: () => import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:261:                readonly 3: (reply: (import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>)[]) => import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:269:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser) => void;
node_modules/redis/dist/index.d.ts:271:                readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:272:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:278:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser) => void;
node_modules/redis/dist/index.d.ts:280:                readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:281:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:287:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, schema: import("@redis/search").RediSearchSchema) => void;
node_modules/redis/dist/index.d.ts:288:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:293:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, schema: import("@redis/search").RediSearchSchema) => void;
node_modules/redis/dist/index.d.ts:294:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:298:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/AGGREGATE_WITHCURSOR").FtAggregateWithCursorOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:300:                readonly 2: (reply: [result: [total: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>, ...results: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>[]], cursor: import("@redis/client/dist/lib/RESP/types").NumberReply<number>]) => import("@redis/search/dist/lib/commands/AGGREGATE_WITHCURSOR").AggregateWithCursorReply;
node_modules/redis/dist/index.d.ts:301:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/redis/dist/index.d.ts:307:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/AGGREGATE_WITHCURSOR").FtAggregateWithCursorOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:309:                readonly 2: (reply: [result: [total: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>, ...results: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>[]], cursor: import("@redis/client/dist/lib/RESP/types").NumberReply<number>]) => import("@redis/search/dist/lib/commands/AGGREGATE_WITHCURSOR").AggregateWithCursorReply;
node_modules/redis/dist/index.d.ts:310:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/redis/dist/index.d.ts:317:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/AGGREGATE").FtAggregateOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:319:                readonly 2: (rawReply: [total: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>, ...results: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>[]], preserve?: any, typeMapping?: TypeMapping | undefined) => import("@redis/search/dist/lib/commands/AGGREGATE").AggregateReply;
node_modules/redis/dist/index.d.ts:320:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/redis/dist/index.d.ts:327:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/AGGREGATE").FtAggregateOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:329:                readonly 2: (rawReply: [total: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>, ...results: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>[]], preserve?: any, typeMapping?: TypeMapping | undefined) => import("@redis/search/dist/lib/commands/AGGREGATE").AggregateReply;
node_modules/redis/dist/index.d.ts:330:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/redis/dist/index.d.ts:337:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, alias: import("@redis/client").RedisArgument, index: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:338:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:343:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, alias: import("@redis/client").RedisArgument, index: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:344:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:349:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, alias: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:350:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:355:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, alias: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:356:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:361:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, alias: import("@redis/client").RedisArgument, index: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:362:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:367:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, alias: import("@redis/client").RedisArgument, index: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:368:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:373:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, option: string) => void;
node_modules/redis/dist/index.d.ts:374:            readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").TuplesReply<[import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[]) => Record<string, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:379:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, option: string) => void;
node_modules/redis/dist/index.d.ts:380:            readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").TuplesReply<[import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[]) => Record<string, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:385:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, property: Buffer | (string & {}) | "a" | "b", value: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:386:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:391:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, property: Buffer | (string & {}) | "a" | "b", value: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:392:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:397:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, schema: import("@redis/search").RediSearchSchema, options?: import("@redis/search/dist/lib/commands/CREATE").CreateOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:398:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:403:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, schema: import("@redis/search").RediSearchSchema, options?: import("@redis/search/dist/lib/commands/CREATE").CreateOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:404:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:409:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, cursorId: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>) => void;
node_modules/redis/dist/index.d.ts:410:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:415:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, cursorId: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>) => void;
node_modules/redis/dist/index.d.ts:416:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:421:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, cursor: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>, options?: import("@redis/search/dist/lib/commands/CURSOR_READ").FtCursorReadOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:423:                readonly 2: (reply: [result: [total: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>, ...results: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>[]], cursor: import("@redis/client/dist/lib/RESP/types").NumberReply<number>]) => import("@redis/search/dist/lib/commands/AGGREGATE_WITHCURSOR").AggregateWithCursorReply;
node_modules/redis/dist/index.d.ts:424:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/redis/dist/index.d.ts:431:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, cursor: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>, options?: import("@redis/search/dist/lib/commands/CURSOR_READ").FtCursorReadOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:433:                readonly 2: (reply: [result: [total: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>, ...results: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>[]], cursor: import("@redis/client/dist/lib/RESP/types").NumberReply<number>]) => import("@redis/search/dist/lib/commands/AGGREGATE_WITHCURSOR").AggregateWithCursorReply;
node_modules/redis/dist/index.d.ts:434:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/redis/dist/index.d.ts:441:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, dictionary: import("@redis/client").RedisArgument, term: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/redis/dist/index.d.ts:442:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:447:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, dictionary: import("@redis/client").RedisArgument, term: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/redis/dist/index.d.ts:448:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:453:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, dictionary: import("@redis/client").RedisArgument, term: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/redis/dist/index.d.ts:454:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:459:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, dictionary: import("@redis/client").RedisArgument, term: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/redis/dist/index.d.ts:460:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:465:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, dictionary: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:467:                readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:468:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:474:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, dictionary: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:476:                readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:477:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:483:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/DROPINDEX").FtDropIndexOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:485:                readonly 2: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:486:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:492:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/DROPINDEX").FtDropIndexOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:494:                readonly 2: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:495:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:501:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/EXPLAIN").FtExplainOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:502:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<string>;
node_modules/redis/dist/index.d.ts:507:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/EXPLAIN").FtExplainOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:508:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<string>;
node_modules/redis/dist/index.d.ts:513:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/EXPLAINCLI").FtExplainCLIOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:514:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:519:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/EXPLAINCLI").FtExplainCLIOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:520:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:525:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:527:                readonly 2: (reply: any[], preserve?: any, typeMapping?: TypeMapping | undefined) => import("@redis/search/dist/lib/commands/INFO").InfoReply;
node_modules/redis/dist/index.d.ts:528:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/redis/dist/index.d.ts:535:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:537:                readonly 2: (reply: any[], preserve?: any, typeMapping?: TypeMapping | undefined) => import("@redis/search/dist/lib/commands/INFO").InfoReply;
node_modules/redis/dist/index.d.ts:538:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/redis/dist/index.d.ts:545:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: (import("@redis/search/dist/lib/commands/PROFILE_SEARCH").ProfileOptions & import("@redis/search").FtSearchOptions) | undefined) => void;
node_modules/redis/dist/index.d.ts:547:                readonly 2: (reply: [import("@redis/search/dist/lib/commands/SEARCH").SearchRawReply, import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").ReplyUnion>]) => import("@redis/search/dist/lib/commands/PROFILE_SEARCH").ProfileReplyResp2;
node_modules/redis/dist/index.d.ts:548:                readonly 3: (reply: import("@redis/client/dist/lib/RESP/types").ReplyUnion) => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/redis/dist/index.d.ts:555:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: (import("@redis/search/dist/lib/commands/PROFILE_SEARCH").ProfileOptions & import("@redis/search").FtSearchOptions) | undefined) => void;
node_modules/redis/dist/index.d.ts:557:                readonly 2: (reply: [import("@redis/search/dist/lib/commands/SEARCH").SearchRawReply, import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").ReplyUnion>]) => import("@redis/search/dist/lib/commands/PROFILE_SEARCH").ProfileReplyResp2;
node_modules/redis/dist/index.d.ts:558:                readonly 3: (reply: import("@redis/client/dist/lib/RESP/types").ReplyUnion) => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/redis/dist/index.d.ts:565:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: string, query: string, options?: (import("@redis/search/dist/lib/commands/PROFILE_SEARCH").ProfileOptions & import("@redis/search/dist/lib/commands/AGGREGATE").FtAggregateOptions) | undefined) => void;
node_modules/redis/dist/index.d.ts:567:                readonly 2: (reply: [[total: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>, ...results: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>[]], import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").ReplyUnion>]) => import("@redis/search/dist/lib/commands/PROFILE_SEARCH").ProfileReplyResp2;
node_modules/redis/dist/index.d.ts:568:                readonly 3: (reply: import("@redis/client/dist/lib/RESP/types").ReplyUnion) => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/redis/dist/index.d.ts:575:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: string, query: string, options?: (import("@redis/search/dist/lib/commands/PROFILE_SEARCH").ProfileOptions & import("@redis/search/dist/lib/commands/AGGREGATE").FtAggregateOptions) | undefined) => void;
node_modules/redis/dist/index.d.ts:577:                readonly 2: (reply: [[total: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>, ...results: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>[]], import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").ReplyUnion>]) => import("@redis/search/dist/lib/commands/PROFILE_SEARCH").ProfileReplyResp2;
node_modules/redis/dist/index.d.ts:578:                readonly 3: (reply: import("@redis/client/dist/lib/RESP/types").ReplyUnion) => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/redis/dist/index.d.ts:585:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search").FtSearchOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:587:                readonly 2: (reply: import("@redis/search/dist/lib/commands/SEARCH").SearchRawReply) => import("@redis/search/dist/lib/commands/SEARCH_NOCONTENT").SearchNoContentReply;
node_modules/redis/dist/index.d.ts:588:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/redis/dist/index.d.ts:595:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search").FtSearchOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:597:                readonly 2: (reply: import("@redis/search/dist/lib/commands/SEARCH").SearchRawReply) => import("@redis/search/dist/lib/commands/SEARCH_NOCONTENT").SearchNoContentReply;
node_modules/redis/dist/index.d.ts:598:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/redis/dist/index.d.ts:605:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search").FtSearchOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:607:                readonly 2: (reply: import("@redis/search/dist/lib/commands/SEARCH").SearchRawReply) => import("@redis/search").SearchReply;
node_modules/redis/dist/index.d.ts:608:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/redis/dist/index.d.ts:615:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search").FtSearchOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:617:                readonly 2: (reply: import("@redis/search/dist/lib/commands/SEARCH").SearchRawReply) => import("@redis/search").SearchReply;
node_modules/redis/dist/index.d.ts:618:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/redis/dist/index.d.ts:625:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SPELLCHECK").FtSpellCheckOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:634:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/redis/dist/index.d.ts:641:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SPELLCHECK").FtSpellCheckOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:650:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/redis/dist/index.d.ts:656:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, string: import("@redis/client").RedisArgument, score: number, options?: import("@redis/search/dist/lib/commands/SUGADD").FtSugAddOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:657:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:661:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, string: import("@redis/client").RedisArgument, score: number, options?: import("@redis/search/dist/lib/commands/SUGADD").FtSugAddOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:662:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:666:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, string: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:667:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>;
node_modules/redis/dist/index.d.ts:671:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, string: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:672:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>;
node_modules/redis/dist/index.d.ts:676:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SUGGET").FtSugGetOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:677:            readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[]) => {
node_modules/redis/dist/index.d.ts:678:                suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/redis/dist/index.d.ts:679:                payload: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/redis/dist/index.d.ts:684:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SUGGET").FtSugGetOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:685:            readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[]) => {
node_modules/redis/dist/index.d.ts:686:                suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/redis/dist/index.d.ts:687:                payload: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/redis/dist/index.d.ts:692:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SUGGET").FtSugGetOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:694:                readonly 2: (reply: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: TypeMapping | undefined) => {
node_modules/redis/dist/index.d.ts:695:                    suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/redis/dist/index.d.ts:696:                    score: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:697:                    payload: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/redis/dist/index.d.ts:699:                readonly 3: (reply: import("@redis/client/dist/lib/RESP/types").NullReply | (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>)[]) => {
node_modules/redis/dist/index.d.ts:700:                    suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/redis/dist/index.d.ts:701:                    score: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:702:                    payload: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/redis/dist/index.d.ts:708:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SUGGET").FtSugGetOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:710:                readonly 2: (reply: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: TypeMapping | undefined) => {
node_modules/redis/dist/index.d.ts:711:                    suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/redis/dist/index.d.ts:712:                    score: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:713:                    payload: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/redis/dist/index.d.ts:715:                readonly 3: (reply: import("@redis/client/dist/lib/RESP/types").NullReply | (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>)[]) => {
node_modules/redis/dist/index.d.ts:716:                    suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/redis/dist/index.d.ts:717:                    score: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:718:                    payload: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/redis/dist/index.d.ts:724:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SUGGET").FtSugGetOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:726:                readonly 2: (reply: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: TypeMapping | undefined) => {
node_modules/redis/dist/index.d.ts:727:                    suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/redis/dist/index.d.ts:728:                    score: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:730:                readonly 3: (reply: (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>)[]) => {
node_modules/redis/dist/index.d.ts:731:                    suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/redis/dist/index.d.ts:732:                    score: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:738:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SUGGET").FtSugGetOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:740:                readonly 2: (reply: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: TypeMapping | undefined) => {
node_modules/redis/dist/index.d.ts:741:                    suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/redis/dist/index.d.ts:742:                    score: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:744:                readonly 3: (reply: (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>)[]) => {
node_modules/redis/dist/index.d.ts:745:                    suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/redis/dist/index.d.ts:746:                    score: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:752:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SUGGET").FtSugGetOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:753:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:757:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SUGGET").FtSugGetOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:758:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:762:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:763:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:767:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:768:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:773:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:775:                readonly 2: (reply: (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>)[]) => Record<string, import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>>;
node_modules/redis/dist/index.d.ts:776:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>>;
node_modules/redis/dist/index.d.ts:782:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:784:                readonly 2: (reply: (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>)[]) => Record<string, import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>>;
node_modules/redis/dist/index.d.ts:785:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>>;
node_modules/redis/dist/index.d.ts:791:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, groupId: import("@redis/client").RedisArgument, terms: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/search/dist/lib/commands/SYNUPDATE").FtSynUpdateOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:792:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:797:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, groupId: import("@redis/client").RedisArgument, terms: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/search/dist/lib/commands/SYNUPDATE").FtSynUpdateOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:798:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:803:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, fieldName: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:805:                readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:806:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:812:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, fieldName: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:814:                readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:815:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:822:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, timestamp: import("@redis/time-series/dist/lib/commands").Timestamp, value: number, options?: import("@redis/time-series/dist/lib/commands/ADD").TsAddOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:823:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:827:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, timestamp: import("@redis/time-series/dist/lib/commands").Timestamp, value: number, options?: import("@redis/time-series/dist/lib/commands/ADD").TsAddOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:828:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:832:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/time-series/dist/lib/commands/ALTER").TsAlterOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:833:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:837:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/time-series/dist/lib/commands/ALTER").TsAlterOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:838:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:842:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/time-series/dist/lib/commands/CREATE").TsCreateOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:843:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:847:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/time-series/dist/lib/commands/CREATE").TsCreateOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:848:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:852:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, sourceKey: import("@redis/client").RedisArgument, destinationKey: import("@redis/client").RedisArgument, aggregationType: import("@redis/time-series").TimeSeriesAggregationType, bucketDuration: number, alignTimestamp?: number | undefined) => void;
node_modules/redis/dist/index.d.ts:853:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:857:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, sourceKey: import("@redis/client").RedisArgument, destinationKey: import("@redis/client").RedisArgument, aggregationType: import("@redis/time-series").TimeSeriesAggregationType, bucketDuration: number, alignTimestamp?: number | undefined) => void;
node_modules/redis/dist/index.d.ts:858:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:862:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, value: number, options?: import("@redis/time-series/dist/lib/commands/INCRBY").TsIncrByOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:863:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:867:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, value: number, options?: import("@redis/time-series/dist/lib/commands/INCRBY").TsIncrByOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:868:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:872:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp) => void;
node_modules/redis/dist/index.d.ts:873:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:877:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp) => void;
node_modules/redis/dist/index.d.ts:878:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:882:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, sourceKey: import("@redis/client").RedisArgument, destinationKey: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:883:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:887:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, sourceKey: import("@redis/client").RedisArgument, destinationKey: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:888:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:892:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/time-series/dist/lib/commands/GET").TsGetOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:894:                readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").RespType<42, [], never, []> | import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>>) => {
node_modules/redis/dist/index.d.ts:895:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:898:                readonly 3: (this: void, reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/time-series/dist/lib/commands/GET").TsGetReply>) => {
node_modules/redis/dist/index.d.ts:899:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:900:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:906:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/time-series/dist/lib/commands/GET").TsGetOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:908:                readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").RespType<42, [], never, []> | import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>>) => {
node_modules/redis/dist/index.d.ts:909:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:912:                readonly 3: (this: void, reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/time-series/dist/lib/commands/GET").TsGetReply>) => {
node_modules/redis/dist/index.d.ts:913:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:914:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:920:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, value: number, options?: import("@redis/time-series/dist/lib/commands/INCRBY").TsIncrByOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:921:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:925:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, value: number, options?: import("@redis/time-series/dist/lib/commands/INCRBY").TsIncrByOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:926:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:930:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: string) => void;
node_modules/redis/dist/index.d.ts:932:                readonly 2: (this: void, reply: [...import("@redis/time-series/dist/lib/commands/INFO").InfoRawReplyTypes[], "keySelfName", import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, "Chunks", ["startTimestamp", import("@redis/client/dist/lib/RESP/types").NumberReply<number>, "endTimestamp", import("@redis/client/dist/lib/RESP/types").NumberReply<number>, "samples", import("@redis/client/dist/lib/RESP/types").NumberReply<number>, "size", import("@redis/client/dist/lib/RESP/types").NumberReply<number>, "bytesPerSample", import("@redis/client/dist/lib/RESP/types").SimpleStringReply<string>][]], _: any, typeMapping?: TypeMapping | undefined) => import("@redis/time-series/dist/lib/commands/INFO_DEBUG").InfoDebugReply;
node_modules/redis/dist/index.d.ts:933:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/redis/dist/index.d.ts:939:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: string) => void;
node_modules/redis/dist/index.d.ts:941:                readonly 2: (this: void, reply: [...import("@redis/time-series/dist/lib/commands/INFO").InfoRawReplyTypes[], "keySelfName", import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, "Chunks", ["startTimestamp", import("@redis/client/dist/lib/RESP/types").NumberReply<number>, "endTimestamp", import("@redis/client/dist/lib/RESP/types").NumberReply<number>, "samples", import("@redis/client/dist/lib/RESP/types").NumberReply<number>, "size", import("@redis/client/dist/lib/RESP/types").NumberReply<number>, "bytesPerSample", import("@redis/client/dist/lib/RESP/types").SimpleStringReply<string>][]], _: any, typeMapping?: TypeMapping | undefined) => import("@redis/time-series/dist/lib/commands/INFO_DEBUG").InfoDebugReply;
node_modules/redis/dist/index.d.ts:942:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/redis/dist/index.d.ts:948:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: string) => void;
node_modules/redis/dist/index.d.ts:950:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/INFO").InfoRawReply, _: any, typeMapping?: TypeMapping | undefined) => import("@redis/time-series/dist/lib/commands/INFO").InfoReply;
node_modules/redis/dist/index.d.ts:951:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/redis/dist/index.d.ts:957:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: string) => void;
node_modules/redis/dist/index.d.ts:959:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/INFO").InfoRawReply, _: any, typeMapping?: TypeMapping | undefined) => import("@redis/time-series/dist/lib/commands/INFO").InfoReply;
node_modules/redis/dist/index.d.ts:960:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/redis/dist/index.d.ts:966:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, toAdd: import("@redis/time-series/dist/lib/commands/MADD").TsMAddSample[]) => void;
node_modules/redis/dist/index.d.ts:967:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").SimpleErrorReply>;
node_modules/redis/dist/index.d.ts:971:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, toAdd: import("@redis/time-series/dist/lib/commands/MADD").TsMAddSample[]) => void;
node_modules/redis/dist/index.d.ts:972:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").SimpleErrorReply>;
node_modules/redis/dist/index.d.ts:976:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, selectedLabels: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/MGET").TsMGetOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:978:                2(this: void, reply: import("@redis/time-series/dist/lib/commands/MGET_WITHLABELS").MGetLabelsRawReply2<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>, _: any, typeMapping?: TypeMapping | undefined): import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:979:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:981:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:985:                3(this: void, reply: import("@redis/time-series/dist/lib/commands/MGET_WITHLABELS").MGetLabelsRawReply3<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>): import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:986:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:988:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:989:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:996:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, selectedLabels: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/MGET").TsMGetOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:998:                2(this: void, reply: import("@redis/time-series/dist/lib/commands/MGET_WITHLABELS").MGetLabelsRawReply2<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>, _: any, typeMapping?: TypeMapping | undefined): import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:999:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1001:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1005:                3(this: void, reply: import("@redis/time-series/dist/lib/commands/MGET_WITHLABELS").MGetLabelsRawReply3<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>): import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1006:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1008:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1009:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1016:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/MGET_WITHLABELS").TsMGetWithLabelsOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1018:                2(this: void, reply: import("@redis/time-series/dist/lib/commands/MGET_WITHLABELS").MGetLabelsRawReply2<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>, _: any, typeMapping?: TypeMapping | undefined): import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1019:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1021:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1025:                3(this: void, reply: import("@redis/time-series/dist/lib/commands/MGET_WITHLABELS").MGetLabelsRawReply3<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>): import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1026:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1028:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1029:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1036:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/MGET_WITHLABELS").TsMGetWithLabelsOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1038:                2(this: void, reply: import("@redis/time-series/dist/lib/commands/MGET_WITHLABELS").MGetLabelsRawReply2<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>, _: any, typeMapping?: TypeMapping | undefined): import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1039:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1041:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1045:                3(this: void, reply: import("@redis/time-series/dist/lib/commands/MGET_WITHLABELS").MGetLabelsRawReply3<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>): import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1046:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1048:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1049:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1057:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/MGET").TsMGetOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1059:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MGET").MGetRawReply2, _: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1061:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1065:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MGET").MGetRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1067:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1068:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1076:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/MGET").TsMGetOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1078:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MGET").MGetRawReply2, _: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1080:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1084:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MGET").MGetRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1086:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1087:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1094:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("@redis/time-series/dist/lib/commands/MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1096:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_GROUPBY").TsMRangeGroupByRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1098:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1102:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_GROUPBY").TsMRangeGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1103:                    sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1105:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1106:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1113:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("@redis/time-series/dist/lib/commands/MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1115:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_GROUPBY").TsMRangeGroupByRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1117:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1121:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_GROUPBY").TsMRangeGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1122:                    sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1124:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1125:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1132:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, selectedLabels: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("@redis/time-series/dist/lib/commands/MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1134:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1135:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1137:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1141:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1142:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1143:                    sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1145:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1146:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1153:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, selectedLabels: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("@redis/time-series/dist/lib/commands/MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1155:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1156:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1158:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1162:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1163:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1164:                    sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1166:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1167:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1174:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, selectedLabels: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1176:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1177:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1179:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1183:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1186:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1187:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1194:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, selectedLabels: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1196:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1197:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1199:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1203:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1206:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1207:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1214:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("@redis/time-series/dist/lib/commands/MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1216:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1217:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1220:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1224:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1225:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1226:                    sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1228:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1229:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1236:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("@redis/time-series/dist/lib/commands/MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1238:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1239:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1242:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1246:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1247:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1248:                    sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1250:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1251:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1259:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1261:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS").TsMRangeWithLabelsRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1262:                    labels: Record<string, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1264:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1268:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS").TsMRangeWithLabelsRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1269:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1271:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1272:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1280:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1282:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS").TsMRangeWithLabelsRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1283:                    labels: Record<string, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1285:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1289:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS").TsMRangeWithLabelsRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1290:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1292:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1293:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1301:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1303:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE").TsMRangeRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1304:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1307:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE").TsMRangeRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1308:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1309:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1316:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1318:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE").TsMRangeRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1319:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1322:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE").TsMRangeRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1323:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1324:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1330:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("@redis/time-series/dist/lib/commands/MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1332:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_GROUPBY").TsMRangeGroupByRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1334:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1338:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_GROUPBY").TsMRangeGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1339:                    sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1341:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1342:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1349:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("@redis/time-series/dist/lib/commands/MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1351:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_GROUPBY").TsMRangeGroupByRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1353:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1357:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_GROUPBY").TsMRangeGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1358:                    sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1360:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1361:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1368:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, selectedLabels: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("@redis/time-series/dist/lib/commands/MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1370:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1371:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1373:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1377:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1378:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1379:                    sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1381:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1382:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1389:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, selectedLabels: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("@redis/time-series/dist/lib/commands/MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1391:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1392:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1394:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1398:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1399:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1400:                    sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1402:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1403:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1410:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, selectedLabels: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1412:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1413:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1415:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1419:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1422:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1423:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1430:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, selectedLabels: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1432:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1433:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1435:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1439:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1442:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1443:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1450:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("@redis/time-series/dist/lib/commands/MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1452:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1453:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1456:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1460:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1461:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1462:                    sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1464:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1465:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1472:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("@redis/time-series/dist/lib/commands/MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1474:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1475:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1478:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1482:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1483:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1484:                    sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1486:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1487:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1495:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1497:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS").TsMRangeWithLabelsRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1498:                    labels: Record<string, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1500:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1504:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS").TsMRangeWithLabelsRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1505:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1507:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1508:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1516:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1518:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS").TsMRangeWithLabelsRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1519:                    labels: Record<string, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1521:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1525:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS").TsMRangeWithLabelsRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1526:                    labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1528:                        timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1529:                        value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1537:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1539:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE").TsMRangeRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1540:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1543:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE").TsMRangeRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1544:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1545:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1552:            readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1554:                readonly 2: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE").TsMRangeRawReply2, _?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1555:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1558:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands/MRANGE").TsMRangeRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/redis/dist/index.d.ts:1559:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1560:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1567:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/redis/dist/index.d.ts:1569:                readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1570:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1576:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/redis/dist/index.d.ts:1578:                readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1579:                readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:1584:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1586:                readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").RespType<42, import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[], never, import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[]>) => {
node_modules/redis/dist/index.d.ts:1587:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1590:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands").SamplesRawReply) => {
node_modules/redis/dist/index.d.ts:1591:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1592:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1598:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1600:                readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").RespType<42, import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[], never, import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[]>) => {
node_modules/redis/dist/index.d.ts:1601:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1604:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands").SamplesRawReply) => {
node_modules/redis/dist/index.d.ts:1605:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1606:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1612:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1614:                readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").RespType<42, import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[], never, import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[]>) => {
node_modules/redis/dist/index.d.ts:1615:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1618:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands").SamplesRawReply) => {
node_modules/redis/dist/index.d.ts:1619:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1620:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1626:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1628:                readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").RespType<42, import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[], never, import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[]>) => {
node_modules/redis/dist/index.d.ts:1629:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1632:                readonly 3: (this: void, reply: import("@redis/time-series/dist/lib/commands").SamplesRawReply) => {
node_modules/redis/dist/index.d.ts:1633:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1634:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:1642:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1644:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/redis/dist/index.d.ts:1645:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/redis/dist/index.d.ts:1650:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1652:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/redis/dist/index.d.ts:1653:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/redis/dist/index.d.ts:1658:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1659:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1663:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1664:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1668:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1670:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/redis/dist/index.d.ts:1671:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/redis/dist/index.d.ts:1676:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1678:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/redis/dist/index.d.ts:1679:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/redis/dist/index.d.ts:1684:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1686:                readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Capacity">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Size">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of filters">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of items inserted">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Expansion rate">, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: TypeMapping | undefined) => import("@redis/bloom/dist/lib/commands/bloom/INFO").BfInfoReplyMap;
node_modules/redis/dist/index.d.ts:1687:                readonly 3: () => import("@redis/bloom/dist/lib/commands/bloom/INFO").BfInfoReplyMap;
node_modules/redis/dist/index.d.ts:1692:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1694:                readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Capacity">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Size">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of filters">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of items inserted">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Expansion rate">, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: TypeMapping | undefined) => import("@redis/bloom/dist/lib/commands/bloom/INFO").BfInfoReplyMap;
node_modules/redis/dist/index.d.ts:1695:                readonly 3: () => import("@redis/bloom/dist/lib/commands/bloom/INFO").BfInfoReplyMap;
node_modules/redis/dist/index.d.ts:1700:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/bloom/dist/lib/commands/bloom/INSERT").BfInsertOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1702:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/redis/dist/index.d.ts:1703:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/redis/dist/index.d.ts:1708:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/bloom/dist/lib/commands/bloom/INSERT").BfInsertOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1710:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/redis/dist/index.d.ts:1711:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/redis/dist/index.d.ts:1716:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, iterator: number, chunk: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1717:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:1721:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, iterator: number, chunk: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1722:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:1726:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/redis/dist/index.d.ts:1728:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/redis/dist/index.d.ts:1729:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/redis/dist/index.d.ts:1734:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/redis/dist/index.d.ts:1736:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/redis/dist/index.d.ts:1737:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/redis/dist/index.d.ts:1742:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/redis/dist/index.d.ts:1744:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/redis/dist/index.d.ts:1745:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/redis/dist/index.d.ts:1750:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/redis/dist/index.d.ts:1752:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/redis/dist/index.d.ts:1753:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/redis/dist/index.d.ts:1758:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, errorRate: number, capacity: number, options?: import("@redis/bloom/dist/lib/commands/bloom/RESERVE").BfReserveOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1759:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:1763:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, errorRate: number, capacity: number, options?: import("@redis/bloom/dist/lib/commands/bloom/RESERVE").BfReserveOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1764:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:1768:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, iterator: number) => void;
node_modules/redis/dist/index.d.ts:1769:            readonly transformReply: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]) => {
node_modules/redis/dist/index.d.ts:1770:                iterator: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1771:                chunk: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/redis/dist/index.d.ts:1776:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, iterator: number) => void;
node_modules/redis/dist/index.d.ts:1777:            readonly transformReply: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]) => {
node_modules/redis/dist/index.d.ts:1778:                iterator: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1779:                chunk: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/redis/dist/index.d.ts:1786:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/bloom/dist/lib/commands/count-min-sketch/INCRBY").BfIncrByItem | import("@redis/bloom/dist/lib/commands/count-min-sketch/INCRBY").BfIncrByItem[]) => void;
node_modules/redis/dist/index.d.ts:1787:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:1791:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/bloom/dist/lib/commands/count-min-sketch/INCRBY").BfIncrByItem | import("@redis/bloom/dist/lib/commands/count-min-sketch/INCRBY").BfIncrByItem[]) => void;
node_modules/redis/dist/index.d.ts:1792:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:1796:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1798:                readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"width">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"depth">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"count">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: TypeMapping | undefined) => import("@redis/bloom/dist/lib/commands/count-min-sketch/INFO").CmsInfoReply;
node_modules/redis/dist/index.d.ts:1799:                readonly 3: () => import("@redis/bloom/dist/lib/commands/count-min-sketch/INFO").CmsInfoReply;
node_modules/redis/dist/index.d.ts:1804:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1806:                readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"width">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"depth">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"count">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: TypeMapping | undefined) => import("@redis/bloom/dist/lib/commands/count-min-sketch/INFO").CmsInfoReply;
node_modules/redis/dist/index.d.ts:1807:                readonly 3: () => import("@redis/bloom/dist/lib/commands/count-min-sketch/INFO").CmsInfoReply;
node_modules/redis/dist/index.d.ts:1812:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, width: number, depth: number) => void;
node_modules/redis/dist/index.d.ts:1813:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:1817:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, width: number, depth: number) => void;
node_modules/redis/dist/index.d.ts:1818:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:1822:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, error: number, probability: number) => void;
node_modules/redis/dist/index.d.ts:1823:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:1827:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, error: number, probability: number) => void;
node_modules/redis/dist/index.d.ts:1828:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:1832:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, destination: import("@redis/client").RedisArgument, source: import("@redis/bloom/dist/lib/commands/count-min-sketch/MERGE").BfMergeSketches) => void;
node_modules/redis/dist/index.d.ts:1833:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:1837:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, destination: import("@redis/client").RedisArgument, source: import("@redis/bloom/dist/lib/commands/count-min-sketch/MERGE").BfMergeSketches) => void;
node_modules/redis/dist/index.d.ts:1838:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:1842:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/redis/dist/index.d.ts:1843:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:1847:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/redis/dist/index.d.ts:1848:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:1854:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1856:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/redis/dist/index.d.ts:1857:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/redis/dist/index.d.ts:1862:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1864:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/redis/dist/index.d.ts:1865:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/redis/dist/index.d.ts:1870:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1872:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/redis/dist/index.d.ts:1873:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/redis/dist/index.d.ts:1878:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1880:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/redis/dist/index.d.ts:1881:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/redis/dist/index.d.ts:1886:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1887:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1891:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1892:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1896:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1898:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/redis/dist/index.d.ts:1899:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/redis/dist/index.d.ts:1904:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1906:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/redis/dist/index.d.ts:1907:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/redis/dist/index.d.ts:1912:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1914:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/redis/dist/index.d.ts:1915:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/redis/dist/index.d.ts:1920:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1922:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/redis/dist/index.d.ts:1923:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/redis/dist/index.d.ts:1928:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1930:                readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Size">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of buckets">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of filters">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of items inserted">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of items deleted">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Bucket size">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Expansion rate">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Max iterations">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: TypeMapping | undefined) => import("@redis/bloom/dist/lib/commands/cuckoo/INFO").CfInfoReplyMap;
node_modules/redis/dist/index.d.ts:1931:                readonly 3: () => import("@redis/bloom/dist/lib/commands/cuckoo/INFO").CfInfoReplyMap;
node_modules/redis/dist/index.d.ts:1936:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1938:                readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Size">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of buckets">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of filters">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of items inserted">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of items deleted">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Bucket size">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Expansion rate">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Max iterations">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: TypeMapping | undefined) => import("@redis/bloom/dist/lib/commands/cuckoo/INFO").CfInfoReplyMap;
node_modules/redis/dist/index.d.ts:1939:                readonly 3: () => import("@redis/bloom/dist/lib/commands/cuckoo/INFO").CfInfoReplyMap;
node_modules/redis/dist/index.d.ts:1944:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/bloom/dist/lib/commands/cuckoo/INSERT").CfInsertOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1946:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/redis/dist/index.d.ts:1947:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/redis/dist/index.d.ts:1952:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/bloom/dist/lib/commands/cuckoo/INSERT").CfInsertOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1954:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/redis/dist/index.d.ts:1955:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/redis/dist/index.d.ts:1960:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/bloom/dist/lib/commands/cuckoo/INSERT").CfInsertOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1962:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/redis/dist/index.d.ts:1963:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/redis/dist/index.d.ts:1968:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/bloom/dist/lib/commands/cuckoo/INSERT").CfInsertOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1970:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/redis/dist/index.d.ts:1971:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/redis/dist/index.d.ts:1976:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, iterator: number, chunk: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1977:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:1981:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, iterator: number, chunk: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:1982:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:1986:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, capacity: number, options?: import("@redis/bloom/dist/lib/commands/cuckoo/RESERVE").CfReserveOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1987:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:1991:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, capacity: number, options?: import("@redis/bloom/dist/lib/commands/cuckoo/RESERVE").CfReserveOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:1992:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:1996:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, iterator: number) => void;
node_modules/redis/dist/index.d.ts:1997:            readonly transformReply: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]) => {
node_modules/redis/dist/index.d.ts:1998:                iterator: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:1999:                chunk: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/redis/dist/index.d.ts:2004:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, iterator: number) => void;
node_modules/redis/dist/index.d.ts:2005:            readonly transformReply: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]) => {
node_modules/redis/dist/index.d.ts:2006:                iterator: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:2007:                chunk: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/redis/dist/index.d.ts:2014:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, values: number[]) => void;
node_modules/redis/dist/index.d.ts:2015:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:2019:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, values: number[]) => void;
node_modules/redis/dist/index.d.ts:2020:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:2024:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, ranks: number[]) => void;
node_modules/redis/dist/index.d.ts:2026:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/redis/dist/index.d.ts:2027:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/redis/dist/index.d.ts:2032:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, ranks: number[]) => void;
node_modules/redis/dist/index.d.ts:2034:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/redis/dist/index.d.ts:2035:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/redis/dist/index.d.ts:2040:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, ranks: number[]) => void;
node_modules/redis/dist/index.d.ts:2042:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/redis/dist/index.d.ts:2043:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/redis/dist/index.d.ts:2048:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, ranks: number[]) => void;
node_modules/redis/dist/index.d.ts:2050:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/redis/dist/index.d.ts:2051:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/redis/dist/index.d.ts:2056:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, values: number[]) => void;
node_modules/redis/dist/index.d.ts:2058:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/redis/dist/index.d.ts:2059:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/redis/dist/index.d.ts:2064:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, values: number[]) => void;
node_modules/redis/dist/index.d.ts:2066:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/redis/dist/index.d.ts:2067:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/redis/dist/index.d.ts:2072:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/bloom/dist/lib/commands/t-digest/CREATE").TDigestCreateOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:2073:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:2077:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("@redis/bloom/dist/lib/commands/t-digest/CREATE").TDigestCreateOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:2078:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:2082:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:2084:                readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Compression">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Capacity">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Merged nodes">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Unmerged nodes">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Merged weight">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Unmerged weight">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Observations">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Total compressions">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Memory usage">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: TypeMapping | undefined) => import("@redis/bloom/dist/lib/commands/t-digest/INFO").TdInfoReplyMap;
node_modules/redis/dist/index.d.ts:2085:                readonly 3: () => import("@redis/bloom/dist/lib/commands/t-digest/INFO").TdInfoReplyMap;
node_modules/redis/dist/index.d.ts:2090:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:2092:                readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Compression">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Capacity">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Merged nodes">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Unmerged nodes">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Merged weight">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Unmerged weight">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Observations">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Total compressions">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Memory usage">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: TypeMapping | undefined) => import("@redis/bloom/dist/lib/commands/t-digest/INFO").TdInfoReplyMap;
node_modules/redis/dist/index.d.ts:2093:                readonly 3: () => import("@redis/bloom/dist/lib/commands/t-digest/INFO").TdInfoReplyMap;
node_modules/redis/dist/index.d.ts:2098:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:2100:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, preserve?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:2101:                3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:2106:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:2108:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, preserve?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:2109:                3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:2114:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, destination: import("@redis/client").RedisArgument, source: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/bloom/dist/lib/commands/t-digest/MERGE").TDigestMergeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:2115:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:2119:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, destination: import("@redis/client").RedisArgument, source: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/bloom/dist/lib/commands/t-digest/MERGE").TDigestMergeOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:2120:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:2124:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:2126:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, preserve?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:2127:                3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:2132:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:2134:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, preserve?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:2135:                3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:2140:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, quantiles: number[]) => void;
node_modules/redis/dist/index.d.ts:2142:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/redis/dist/index.d.ts:2143:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/redis/dist/index.d.ts:2148:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, quantiles: number[]) => void;
node_modules/redis/dist/index.d.ts:2150:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/redis/dist/index.d.ts:2151:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/redis/dist/index.d.ts:2156:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, values: number[]) => void;
node_modules/redis/dist/index.d.ts:2157:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:2161:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, values: number[]) => void;
node_modules/redis/dist/index.d.ts:2162:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:2166:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:2167:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:2171:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:2172:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:2176:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, values: number[]) => void;
node_modules/redis/dist/index.d.ts:2177:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:2181:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, values: number[]) => void;
node_modules/redis/dist/index.d.ts:2182:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:2186:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, lowCutPercentile: number, highCutPercentile: number) => void;
node_modules/redis/dist/index.d.ts:2188:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, preserve?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:2189:                3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:2194:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, lowCutPercentile: number, highCutPercentile: number) => void;
node_modules/redis/dist/index.d.ts:2196:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, preserve?: any, typeMapping?: TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:2197:                3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/redis/dist/index.d.ts:2204:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/redis/dist/index.d.ts:2205:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:2209:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/redis/dist/index.d.ts:2210:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:2214:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/redis/dist/index.d.ts:2215:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:2219:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/redis/dist/index.d.ts:2220:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/redis/dist/index.d.ts:2224:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/bloom/dist/lib/commands/top-k/INCRBY").TopKIncrByItem | import("@redis/bloom/dist/lib/commands/top-k/INCRBY").TopKIncrByItem[]) => void;
node_modules/redis/dist/index.d.ts:2225:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").SimpleStringReply<string>>;
node_modules/redis/dist/index.d.ts:2229:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/bloom/dist/lib/commands/top-k/INCRBY").TopKIncrByItem | import("@redis/bloom/dist/lib/commands/top-k/INCRBY").TopKIncrByItem[]) => void;
node_modules/redis/dist/index.d.ts:2230:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").SimpleStringReply<string>>;
node_modules/redis/dist/index.d.ts:2234:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:2236:                readonly 2: (reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"k">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"width">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"depth">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"decay">, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], preserve?: any, typeMapping?: TypeMapping | undefined) => import("@redis/bloom/dist/lib/commands/top-k/INFO").TopKInfoReplyMap;
node_modules/redis/dist/index.d.ts:2237:                readonly 3: () => import("@redis/bloom/dist/lib/commands/top-k/INFO").TopKInfoReplyMap;
node_modules/redis/dist/index.d.ts:2242:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:2244:                readonly 2: (reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"k">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"width">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"depth">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"decay">, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], preserve?: any, typeMapping?: TypeMapping | undefined) => import("@redis/bloom/dist/lib/commands/top-k/INFO").TopKInfoReplyMap;
node_modules/redis/dist/index.d.ts:2245:                readonly 3: () => import("@redis/bloom/dist/lib/commands/top-k/INFO").TopKInfoReplyMap;
node_modules/redis/dist/index.d.ts:2250:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:2251:            readonly transformReply: (this: void, rawReply: (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number>)[]) => {
node_modules/redis/dist/index.d.ts:2252:                item: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/redis/dist/index.d.ts:2253:                count: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:2258:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:2259:            readonly transformReply: (this: void, rawReply: (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number>)[]) => {
node_modules/redis/dist/index.d.ts:2260:                item: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/redis/dist/index.d.ts:2261:                count: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/redis/dist/index.d.ts:2266:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:2267:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:2271:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/redis/dist/index.d.ts:2272:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/redis/dist/index.d.ts:2276:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/redis/dist/index.d.ts:2278:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/redis/dist/index.d.ts:2279:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/redis/dist/index.d.ts:2284:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/redis/dist/index.d.ts:2286:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/redis/dist/index.d.ts:2287:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/redis/dist/index.d.ts:2292grep: node_modules/.bin/supabase: binary file matches
:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, topK: number, options?: import("@redis/bloom/dist/lib/commands/top-k/RESERVE").TopKReserveOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:2293:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.d.ts:2297:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, topK: number, options?: import("@redis/bloom/dist/lib/commands/top-k/RESERVE").TopKReserveOptions | undefined) => void;
node_modules/redis/dist/index.d.ts:2298:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/redis/dist/index.js:21:const client_1 = require("@redis/client");
node_modules/redis/dist/index.js:22:const bloom_1 = __importDefault(require("@redis/bloom"));
node_modules/redis/dist/index.js:23:const json_1 = __importDefault(require("@redis/json"));
node_modules/redis/dist/index.js:24:const search_1 = __importDefault(require("@redis/search"));
node_modules/redis/dist/index.js:25:const time_series_1 = __importDefault(require("@redis/time-series"));
node_modules/redis/dist/index.js:26:__exportStar(require("@redis/client"), exports);
node_modules/redis/dist/index.js:27:__exportStar(require("@redis/bloom"), exports);
node_modules/redis/dist/index.js:28:__exportStar(require("@redis/json"), exports);
node_modules/redis/dist/index.js:29:__exportStar(require("@redis/search"), exports);
node_modules/redis/dist/index.js:30:__exportStar(require("@redis/time-series"), exports);
grep: node_modules/supabase/bin/supabase: binary file matches
node_modules/clinic/CONTRIBUTING.md:88:redistributed consistent with this project or license(s) involved.
node_modules/d3-fg/LICENSE:154:    appropriateness of using or redistributing the Work and assume any
node_modules/d3-fg/LICENSE:169:  9. Accepting Warranty or Additional Liability. While redistributing
node_modules/chromium-bidi/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/chromium-bidi/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/reflect-metadata/LICENSE:49:7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.
node_modules/reflect-metadata/LICENSE:53:9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.
node_modules/cluster-key-slot/index.d.ts:2:  // Convert a string or Buffer into a redis slot hash.
node_modules/cluster-key-slot/index.d.ts:5:  // Convert an array of multiple strings or Buffers into a redis slot hash.
node_modules/cluster-key-slot/lib/index.js:119: * Convert a string into a redis slot hash.
node_modules/cluster-key-slot/lib/index.js:151: * Convert an array of multiple strings into a redis slot hash.
node_modules/cluster-key-slot/package.json:4:  "description": "Generates CRC hashes for strings - for use by node redis clients to determine key slots.",
node_modules/cluster-key-slot/package.json:19:    "redis",
node_modules/cluster-key-slot/package.json:26:    "node_redis",
node_modules/cluster-key-slot/package.json:27:    "ioredis"
node_modules/cluster-key-slot/README.md:10:A high performance redis cluster key slot calculator for node redis clients e.g. [node_redis](https://github.com/NodeRedis/node_redis), [ioredis](https://github.com/luin/ioredis) and [redis-clustr](https://github.com/gosquared/redis-clustr/).
node_modules/cluster-key-slot/README.md:31:const slot = calculateSlot('test:key:{butOnlyThis}redis');
node_modules/cluster-key-slot/README.md:39:  'test:key:{butOnlyThis}redis',
node_modules/cluster-key-slot/README.md:47:`OLD` in these benchmarks refers to the `ioredis` crc calc and many of the other calculators that use `Buffer`.
node_modules/text-decoder/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/text-decoder/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/class-variance-authority/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/class-variance-authority/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@nearform/heap-profiler/CONTRIBUTING.md:65:  maintained indefinitely and may be redistributed consistent with
node_modules/cacheable-request/node_modules/keyv/package.json:41:    "@keyv/redis": "*",
node_modules/cacheable-request/node_modules/keyv/src/index.js:8:		redis: '@keyv/redis',
node_modules/cacheable-request/node_modules/keyv/README.md:42:npm install --save @keyv/redis
node_modules/cacheable-request/node_modules/keyv/README.md:56:const keyv = new Keyv('redis://user:pass@localhost:6379');
node_modules/cacheable-request/node_modules/keyv/README.md:77:const users = new Keyv('redis://user:pass@localhost:6379', { namespace: 'users' });
node_modules/cacheable-request/node_modules/keyv/README.md:78:const cache = new Keyv('redis://user:pass@localhost:6379', { namespace: 'cache' });
node_modules/cacheable-request/node_modules/keyv/README.md:107:Redis | [@keyv/redis](https://github.com/lukechilds/keyv-redis) | Yes | [![Build Status](https://travis-ci.org/lukechilds/keyv-redis.svg?branch=master)](https://travis-ci.org/lukechilds/keyv-redis) [![Coverage Status](https://coveralls.io/repos/github/lukechilds/keyv-redis/badge.svg?branch=master)](https://coveralls.io/github/lukechilds/keyv-redis?branch=master)
node_modules/cacheable-request/node_modules/keyv/README.md:174:// After npm install --save keyv-redis
node_modules/cacheable-request/node_modules/keyv/README.md:175:const awesomeModule = new AwesomeModule({ cache: 'redis://localhost' });
node_modules/cacheable-request/node_modules/keyv/README.md:244:Specify an adapter to use. e.g `'redis'` or `'mongodb'`.
node_modules/cacheable-request/README.md:63:npm install @keyv/redis
node_modules/cacheable-request/README.md:69:const cacheableRequest = new CacheableRequest(http.request, 'redis://user:pass@localhost:6379');
node_modules/eslint-plugin-react/node_modules/doctrine/LICENSE.closure-compiler:151:      appropriateness of using or redistributing the Work and assume any
node_modules/eslint-plugin-react/node_modules/doctrine/LICENSE.closure-compiler:166:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/eslint-plugin-react/node_modules/doctrine/LICENSE:151:  appropriateness of using or redistributing the Work and assume any
node_modules/eslint-plugin-react/node_modules/doctrine/LICENSE:166:9. Accepting Warranty or Additional Liability. While redistributing
node_modules/forever-agent/LICENSE:49:7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.
node_modules/forever-agent/LICENSE:53:9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.
node_modules/next/dist/compiled/@opentelemetry/api/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/next/dist/compiled/@opentelemetry/api/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/next/dist/compiled/@ampproject/toolbox-optimizer/LICENSE:151:      appropriateness of using or redistributing the Work and assume any
node_modules/next/dist/compiled/@ampproject/toolbox-optimizer/LICENSE:166:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/next/dist/compiled/web-vitals-attribution/LICENSE:151:      appropriateness of using or redistributing the Work and assume any
node_modules/next/dist/compiled/web-vitals-attribution/LICENSE:166:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/next/dist/compiled/web-vitals/LICENSE:151:      appropriateness of using or redistributing the Work and assume any
node_modules/next/dist/compiled/web-vitals/LICENSE:166:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/next/dist/compiled/native-url/LICENSE:151:      appropriateness of using or redistributing the Work and assume any
node_modules/next/dist/compiled/native-url/LICENSE:166:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@angular-devkit/schematics/node_modules/rxjs/LICENSE.txt:150:    appropriateness of using or redistributing the Work and assume any
node_modules/@angular-devkit/schematics/node_modules/rxjs/LICENSE.txt:165: 9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@angular-devkit/schematics/node_modules/rxjs/dist/bundles/rxjs.umd.js:152:    appropriateness of using or redistributing the Work and assume any
node_modules/@angular-devkit/schematics/node_modules/rxjs/dist/bundles/rxjs.umd.js:167: 9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@angular-devkit/schematics/node_modules/rxjs/dist/bundles/rxjs.umd.js:358:    appropriateness of using or redistributing the Work and assume any
node_modules/@angular-devkit/schematics/node_modules/rxjs/dist/bundles/rxjs.umd.js:373: 9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@angular-devkit/core/node_modules/rxjs/LICENSE.txt:150:    appropriateness of using or redistributing the Work and assume any
node_modules/@angular-devkit/core/node_modules/rxjs/LICENSE.txt:165: 9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@angular-devkit/core/node_modules/rxjs/dist/bundles/rxjs.umd.js:152:    appropriateness of using or redistributing the Work and assume any
node_modules/@angular-devkit/core/node_modules/rxjs/dist/bundles/rxjs.umd.js:167: 9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@angular-devkit/core/node_modules/rxjs/dist/bundles/rxjs.umd.js:358:    appropriateness of using or redistributing the Work and assume any
node_modules/@angular-devkit/core/node_modules/rxjs/dist/bundles/rxjs.umd.js:373: 9. Accepting Warranty or Additional Liability. While redistributing
node_modules/rollup/dist/native.js:37:	arm64: 'vc_redist.arm64.exe',
node_modules/rollup/dist/native.js:38:	ia32: 'vc_redist.x86.exe',
node_modules/rollup/dist/native.js:39:	x64: 'vc_redist.x64.exe'
node_modules/libphonenumber-js/LICENSE.Apache:150:      appropriateness of using or redistributing the Work and assume any
node_modules/libphonenumber-js/LICENSE.Apache:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@ampproject/remapping/LICENSE:151:      appropriateness of using or redistributing the Work and assume any
node_modules/@ampproject/remapping/LICENSE:166:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/node-fetch-native/README.md:10:A redistribution of [node-fetch v3](https://github.com/node-fetch/node-fetch) (+ more!) for better backward and forward compatibility.
node_modules/@swc/helpers/LICENSE:150:   appropriateness of using or redistributing the Work and assume any
node_modules/@swc/helpers/LICENSE:165:9. Accepting Warranty or Additional Liability. While redistributing
node_modules/prettier/THIRD-PARTY-NOTICES.md:3783:> 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.
node_modules/prettier/THIRD-PARTY-NOTICES.md:3787:> 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.
node_modules/aria-query/LICENSE:150:appropriateness of using or redistributing the Work and assume any
node_modules/aria-query/LICENSE:165:9. Accepting Warranty or Additional Liability. While redistributing
node_modules/windows-release/node_modules/human-signals/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/windows-release/node_modules/human-signals/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/ts-interface-checker/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/ts-interface-checker/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/multer/node_modules/readable-stream/CONTRIBUTING.md:24:  maintained indefinitely and may be redistributed consistent with
node_modules/doctrine/LICENSE.closure-compiler:151:      appropriateness of using or redistributing the Work and assume any
node_modules/doctrine/LICENSE.closure-compiler:166:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/doctrine/LICENSE:151:  appropriateness of using or redistributing the Work and assume any
node_modules/doctrine/LICENSE:166:9. Accepting Warranty or Additional Liability. While redistributing
node_modules/axobject-query/LICENSE:150:appropriateness of using or redistributing the Work and assume any
node_modules/axobject-query/LICENSE:165:9. Accepting Warranty or Additional Liability. While redistributing
node_modules/detective-typescript/node_modules/eslint-visitor-keys/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/detective-typescript/node_modules/eslint-visitor-keys/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/ecc-jsbn/lib/LICENSE-jsbn:33: * All redistributions must retain an intact copy of this copyright notice
node_modules/oauth-sign/LICENSE:49:7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.
node_modules/oauth-sign/LICENSE:53:9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.
node_modules/@img/sharp-linux-x64/LICENSE:141:redistributing the Work and assume any risks associated with Your exercise of
node_modules/@img/sharp-linux-x64/LICENSE:158:While redistributing the Work or Derivative Works thereof, You may choose to
node_modules/@img/sharp-linuxmusl-x64/LICENSE:141:redistributing the Work and assume any risks associated with Your exercise of
node_modules/@img/sharp-linuxmusl-x64/LICENSE:158:While redistributing the Work or Derivative Works thereof, You may choose to
node_modules/stream-browserify/node_modules/readable-stream/CONTRIBUTING.md:24:  maintained indefinitely and may be redistributed consistent with
node_modules/eslint-visitor-keys/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/eslint-visitor-keys/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/got/readme.md:806:$ npm install @keyv/redis
node_modules/got/readme.md:811:const KeyvRedis = require('@keyv/redis');
node_modules/got/readme.md:813:const redis = new KeyvRedis('redis://user:pass@localhost:6379');
node_modules/got/readme.md:815:got('sindresorhus.com', {cache: redis});
node_modules/api/package.json:73:    "cache-manager-redis-store": "^3.0.1",
node_modules/api/package.json:89:    "redis": "^5.6.0",
node_modules/api/src/payments/payments.controller.ts:38:import { RedisService } from '../common/redis/redis.service';
node_modules/api/src/payments/payments.controller.ts:50:    private readonly redisService: RedisService,
node_modules/api/src/payments/payments.controller.ts:389:    const cached = await this.redisService.get<PaymentInitResponseDto>(cacheKey);
node_modules/api/src/payments/payments.controller.ts:459:    await this.redisService.set(cacheKey, response, 120);
node_modules/api/src/payments/payment-gateway.service.ts:6:import { RedisService } from '../common/redis/redis.service';
node_modules/api/src/payments/payment-gateway.service.ts:17:    private redisService: RedisService,
node_modules/api/src/payments/payment-gateway.service.ts:120:    const cached = await this.redisService.get<{ provider: string; config: any }>(cacheKey);
node_modules/api/src/payments/payment-gateway.service.ts:135:    await this.redisService.set(cacheKey, config, 300);
node_modules/api/src/payments/payments.module.ts:12:import { RedisModule } from '../common/redis/redis.module';
node_modules/api/src/payments/orders.service.ts:5:import { RedisService } from '../common/redis/redis.service';
node_modules/api/src/payments/orders.service.ts:22:    private redisService: RedisService,
node_modules/api/src/payments/orders.service.ts:69:    const cachedOrder = await this.redisService.get(cacheKey);
node_modules/api/src/payments/orders.service.ts:151:    await this.redisService.set(cacheKey, order, 300);
node_modules/api/src/payments/orders.service.ts:224:    await this.redisService.del(RedisService.getOrderCacheKey(orderId));
node_modules/api/src/payments/orders.service.ts:226:      await this.redisService.del(RedisService.getOrderByBookingCacheKey(order.bookingId));
node_modules/api/src/payments/orders.service.ts:266:    await this.redisService.del(RedisService.getOrderCacheKey(orderId));
node_modules/api/src/payments/orders.service.ts:268:      await this.redisService.del(RedisService.getOrderByBookingCacheKey(order.bookingId));
node_modules/api/src/payments/orders.service.ts:486:    const cachedOrderId = await this.redisService.get<string>(bookingCacheKey);
node_modules/api/src/payments/orders.service.ts:497:        await this.redisService.del(bookingCacheKey);
node_modules/api/src/payments/orders.service.ts:624:    await this.redisService.set(newBookingCacheKey, order.id, 300); // 5 minutes
node_modules/api/src/payments/orders.service.ts:964:          await this.redisService.set(newBookingCacheKey, order.id, 300); // 5 minutes
node_modules/api/src/app.module.ts:28:import { RedisModule } from './common/redis/redis.module';
node_modules/api/src/common/redis/redis.module.ts:3:import * as redisStore from 'cache-manager-redis-store';
node_modules/api/src/common/redis/redis.module.ts:5:import { RedisService } from './redis.service';
node_modules/api/src/common/redis/redis.module.ts:14:        const redisEnabled = configService.get('REDIS_ENABLED', 'false') === 'true';
node_modules/api/src/common/redis/redis.module.ts:16:        if (!redisEnabled) {
node_modules/api/src/common/redis/redis.module.ts:25:          store: redisStore,
node_modules/api/node_modules/@nestjs/cache-manager/package.json:26:    "@keyv/redis": "4.3.2",
node_modules/api/node_modules/keyv/package.json:39:    "redis",
node_modules/api/node_modules/keyv/README.md:78:npm install --save @keyv/redis
node_modules/api/node_modules/keyv/README.md:127:// redis
node_modules/api/node_modules/keyv/README.md:128:import KeyvRedis from '@keyv/redis';
node_modules/api/node_modules/keyv/README.md:130:const keyv = new Keyv(new KeyvRedis('redis://user:pass@localhost:6379'));
node_modules/api/node_modules/keyv/README.md:154:import KeyvRedis from '@keyv/redis';
node_modules/api/node_modules/keyv/README.md:156:const keyvRedis = new KeyvRedis('redis://user:pass@localhost:6379');
node_modules/api/node_modules/keyv/README.md:173:const users = new Keyv(new KeyvRedis('redis://user:pass@localhost:6379'), { namespace: 'users' });
node_modules/api/node_modules/keyv/README.md:174:const cache = new Keyv(new KeyvRedis('redis://user:pass@localhost:6379'), { namespace: 'cache' });
node_modules/api/node_modules/keyv/README.md:281:Redis | [@keyv/redis](https://github.com/jaredwray/keyv/tree/master/packages/redis) | Yes
node_modules/api/node_modules/keyv/dist/index.cjs:215:  "redis",
node_modules/api/node_modules/keyv/dist/index.js:189:  "redis",
node_modules/api/scripts/fix-production-bookings.js:49:      console.log('   This needs to be redistributed across multiple days.');
node_modules/api/FLY_DEPLOYMENT_GUIDE.md:54:fly redis create --name heya-pos-redis --region syd --no-replicas
node_modules/api/FLY_DEPLOYMENT_GUIDE.md:59:fly redis status heya-pos-redis
node_modules/api/FLY_DEPLOYMENT_GUIDE.md:64:fly secrets set REDIS_URL="redis://default:password@heya-pos-redis.internal:6379"
node_modules/@prisma/debug/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/@prisma/debug/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@prisma/config/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/@prisma/config/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@prisma/get-platform/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/@prisma/get-platform/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@prisma/client/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/@prisma/client/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@prisma/fetch-engine/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/@prisma/fetch-engine/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@prisma/engines/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/@prisma/engines/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@prisma/engines-version/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/@prisma/engines-version/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@pkgjs/parseargs/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/@pkgjs/parseargs/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/minify-stream/node_modules/readable-stream/CONTRIBUTING.md:24:  maintained indefinitely and may be redistributed consistent with
node_modules/@webassemblyjs/leb128/LICENSE.txt:168:   appropriateness of using or redistributing the Work and assume any
node_modules/@webassemblyjs/leb128/LICENSE.txt:183:9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@humanwhocodes/module-importer/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/@humanwhocodes/module-importer/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@humanwhocodes/config-array/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/@humanwhocodes/config-array/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/readable-stream/CONTRIBUTING.md:24:  maintained indefinitely and may be redistributed consistent with
node_modules/@redis/json/package.json:2:  "name": "@redis/json",
node_modules/@redis/json/package.json:16:    "@redis/client": "^5.6.0"
node_modules/@redis/json/package.json:19:    "@redis/test-utils": "*"
node_modules/@redis/json/package.json:26:    "url": "git://github.com/redis/node-redis.git"
node_modules/@redis/json/package.json:29:    "url": "https://github.com/redis/node-redis/issues"
node_modules/@redis/json/package.json:31:  "homepage": "https://github.com/redis/node-redis/tree/master/packages/json",
node_modules/@redis/json/package.json:33:    "redis",
node_modules/@redis/json/README.md:1:# @redis/json
node_modules/@redis/json/README.md:3:This package provides support for the [RedisJSON](https://redis.io/docs/data-types/json/) module, which adds JSON as a native data type to Redis.
node_modules/@redis/json/README.md:5:Should be used with [`redis`/`@redis/client`](https://github.com/redis/node-redis).
node_modules/@redis/json/README.md:11:For a complete example, see [`managing-json.js`](https://github.com/redis/node-redis/blob/master/examples/managing-json.js) in the [examples folder](https://github.com/redis/node-redis/tree/master/examples).
node_modules/@redis/json/README.md:15:The [`JSON.SET`](https://redis.io/commands/json.set/) command stores a JSON value at a given JSON Path in a Redis key.
node_modules/@redis/json/README.md:20:await client.json.set('noderedis:jsondata', '$', {
node_modules/@redis/json/README.md:36:For more information about RedisJSON's path syntax, [check out the documentation](https://redis.io/docs/data-types/json/path/).
node_modules/@redis/json/README.md:40:With RedisJSON, we can retrieve all or part(s) of a JSON document using the [`JSON.GET`](https://redis.io/commands/json.get/) command and one or more JSON Paths. Let's get the name and age of one of the pets:
node_modules/@redis/json/README.md:43:const results = await client.json.get('noderedis:jsondata', {
node_modules/@redis/json/README.md:61:Using the [`JSON.NUMINCRBY`](https://redis.io/commands/json.numincrby/) command, we can update the age of one of the pets like this:
node_modules/@redis/json/README.md:64:await client.json.numIncrBy('noderedis:jsondata', '.pets[1].age', 1);
node_modules/@redis/json/README.md:67:And we can add a new object to the pets array with the [`JSON.ARRAPPEND`](https://redis.io/commands/json.arrappend/) command:
node_modules/@redis/json/README.md:70:await client.json.arrAppend('noderedis:jsondata', '.pets', {
node_modules/@redis/json/dist/lib/commands/TOGGLE.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/TOGGLE.d.ts:2:import { RedisArgument, ArrayReply, NumberReply, NullReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/ARRINSERT.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/json/dist/lib/commands/index.d.ts:1:export type { RedisJSON } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/json/dist/lib/commands/index.d.ts:2:export { transformRedisJsonArgument, transformRedisJsonReply, transformRedisJsonNullReply } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/json/dist/lib/commands/index.d.ts:6:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, path: import("@redis/client/dist/lib/RESP/types").RedisArgument, json: import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON, ...jsons: import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON[]) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:7:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:11:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, path: import("@redis/client/dist/lib/RESP/types").RedisArgument, json: import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON, ...jsons: import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON[]) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:12:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:16:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, path: import("@redis/client/dist/lib/RESP/types").RedisArgument, json: import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON, options?: import("./ARRINDEX").JsonArrIndexOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:17:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:21:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, path: import("@redis/client/dist/lib/RESP/types").RedisArgument, json: import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON, options?: import("./ARRINDEX").JsonArrIndexOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:22:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:26:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, path: import("@redis/client/dist/lib/RESP/types").RedisArgument, index: number, json: import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON, ...jsons: import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON[]) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:27:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:31:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, path: import("@redis/client/dist/lib/RESP/types").RedisArgument, index: number, json: import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON, ...jsons: import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON[]) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:32:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:36:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./ARRLEN").JsonArrLenOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:37:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:41:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./ARRLEN").JsonArrLenOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:42:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:46:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./ARRPOP").RedisArrPopOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:47:        readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>) => string | number | boolean | Date | {
node_modules/@redis/json/dist/lib/commands/index.d.ts:48:            [key: string]: import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON;
node_modules/@redis/json/dist/lib/commands/index.d.ts:49:            [key: number]: import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON;
node_modules/@redis/json/dist/lib/commands/index.d.ts:50:        } | import("@redis/client/dist/lib/RESP/types").NullReply | (import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON | import("@redis/client/dist/lib/RESP/types").NullReply)[] | null;
node_modules/@redis/json/dist/lib/commands/index.d.ts:54:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./ARRPOP").RedisArrPopOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:55:        readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>) => string | number | boolean | Date | {
node_modules/@redis/json/dist/lib/commands/index.d.ts:56:            [key: string]: import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON;
node_modules/@redis/json/dist/lib/commands/index.d.ts:57:            [key: number]: import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON;
node_modules/@redis/json/dist/lib/commands/index.d.ts:58:        } | import("@redis/client/dist/lib/RESP/types").NullReply | (import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON | import("@redis/client/dist/lib/RESP/types").NullReply)[] | null;
node_modules/@redis/json/dist/lib/commands/index.d.ts:62:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, path: import("@redis/client/dist/lib/RESP/types").RedisArgument, start: number, stop: number) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:63:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:67:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, path: import("@redis/client/dist/lib/RESP/types").RedisArgument, start: number, stop: number) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:68:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:72:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./CLEAR").JsonClearOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:73:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:77:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./CLEAR").JsonClearOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:78:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:82:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./DEBUG_MEMORY").JsonDebugMemoryOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:83:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:87:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./DEBUG_MEMORY").JsonDebugMemoryOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:88:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:92:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./DEL").JsonDelOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:93:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:97:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./DEL").JsonDelOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:98:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:102:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./FORGET").JsonForgetOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:103:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:107:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./FORGET").JsonForgetOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:108:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:112:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./GET").JsonGetOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:113:        readonly transformReply: typeof import("@redis/client/dist/lib/commands/generic-transformers").transformRedisJsonNullReply;
node_modules/@redis/json/dist/lib/commands/index.d.ts:117:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./GET").JsonGetOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:118:        readonly transformReply: typeof import("@redis/client/dist/lib/commands/generic-transformers").transformRedisJsonNullReply;
node_modules/@redis/json/dist/lib/commands/index.d.ts:122:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, path: import("@redis/client/dist/lib/RESP/types").RedisArgument, value: import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:123:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/json/dist/lib/commands/index.d.ts:127:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, path: import("@redis/client/dist/lib/RESP/types").RedisArgument, value: import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:128:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/json/dist/lib/commands/index.d.ts:132:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, keys: import("@redis/client/dist/lib/RESP/types").RedisArgument[], path: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:133:        readonly transformReply: (this: void, reply: (import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>)[]) => (import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON | import("@redis/client/dist/lib/RESP/types").NullReply)[];
node_modules/@redis/json/dist/lib/commands/index.d.ts:137:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, keys: import("@redis/client/dist/lib/RESP/types").RedisArgument[], path: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:138:        readonly transformReply: (this: void, reply: (import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>)[]) => (import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON | import("@redis/client/dist/lib/RESP/types").NullReply)[];
node_modules/@redis/json/dist/lib/commands/index.d.ts:142:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, items: import("./MSET").JsonMSetItem[]) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:143:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/json/dist/lib/commands/index.d.ts:147:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, items: import("./MSET").JsonMSetItem[]) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:148:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/json/dist/lib/commands/index.d.ts:152:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, path: import("@redis/client/dist/lib/RESP/types").RedisArgument, by: number) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:154:            readonly 2: (reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>) => number | (number | null)[];
node_modules/@redis/json/dist/lib/commands/index.d.ts:155:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:160:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, path: import("@redis/client/dist/lib/RESP/types").RedisArgument, by: number) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:162:            readonly 2: (reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>) => number | (number | null)[];
node_modules/@redis/json/dist/lib/commands/index.d.ts:163:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:171:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, path: import("@redis/client/dist/lib/RESP/types").RedisArgument, by: number) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:173:            readonly 2: (reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>) => number | (number | null)[];
node_modules/@redis/json/dist/lib/commands/index.d.ts:174:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:182:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, path: import("@redis/client/dist/lib/RESP/types").RedisArgument, by: number) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:184:            readonly 2: (reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>) => number | (number | null)[];
node_modules/@redis/json/dist/lib/commands/index.d.ts:185:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:190:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./OBJKEYS").JsonObjKeysOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:191:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:195:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./OBJKEYS").JsonObjKeysOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:196:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:200:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./OBJLEN").JsonObjLenOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:201:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:205:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./OBJLEN").JsonObjLenOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:206:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:210:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, path: import("@redis/client/dist/lib/RESP/types").RedisArgument, json: import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON, options?: import("./SET").JsonSetOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:211:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/json/dist/lib/commands/index.d.ts:215:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, path: import("@redis/client/dist/lib/RESP/types").RedisArgument, json: import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON, options?: import("./SET").JsonSetOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:216:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/json/dist/lib/commands/index.d.ts:220:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, append: string, options?: import("./STRAPPEND").JsonStrAppendOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:221:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:225:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, append: string, options?: import("./STRAPPEND").JsonStrAppendOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:226:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:230:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./STRLEN").JsonStrLenOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:231:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:235:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./STRLEN").JsonStrLenOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:236:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:240:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, path: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:241:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:245:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, path: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:246:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:250:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./TYPE").JsonTypeOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:252:            readonly 2: () => import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:253:            readonly 3: (reply: (import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>)[]) => import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:258:        readonly parseCommand: (this: void, parser: import("@redis/client/dist/lib/client/parser").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./TYPE").JsonTypeOptions | undefined) => void;
node_modules/@redis/json/dist/lib/commands/index.d.ts:260:            readonly 2: () => import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/json/dist/lib/commands/index.d.ts:261:            readonly 3: (reply: (import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>)[]) => import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/json/dist/lib/commands/MGET.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/MGET.d.ts:2:import { RedisArgument, UnwrapReply, ArrayReply, NullReply, BlobStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/MGET.d.ts:14:    readonly transformReply: (this: void, reply: UnwrapReply<ArrayReply<NullReply | BlobStringReply>>) => (import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON | NullReply)[];
node_modules/@redis/json/dist/lib/commands/OBJLEN.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/OBJLEN.d.ts:2:import { RedisArgument, NumberReply, ArrayReply, NullReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/ARRINSERT.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/ARRINSERT.d.ts:2:import { RedisArgument, NumberReply, ArrayReply, NullReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/ARRINSERT.d.ts:3:import { RedisJSON } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/json/dist/lib/commands/SET.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/json/dist/lib/commands/MERGE.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/json/dist/lib/commands/ARRINDEX.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/ARRINDEX.d.ts:2:import { RedisArgument, NumberReply, ArrayReply, NullReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/ARRINDEX.d.ts:3:import { RedisJSON } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/json/dist/lib/commands/CLEAR.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/CLEAR.d.ts:2:import { RedisArgument, NumberReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/ARRTRIM.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/ARRTRIM.d.ts:2:import { RedisArgument, ArrayReply, NumberReply, NullReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/RESP.d.ts:1:import { CommandParser } from "@redis/client/dist/lib/client/parser";
node_modules/@redis/json/dist/lib/commands/RESP.d.ts:2:import { RedisArgument } from "@redis/client/dist/lib/RESP/types";
node_modules/@redis/json/dist/lib/commands/GET.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/GET.d.ts:2:import { RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/GET.d.ts:3:import { RedisVariadicArgument, transformRedisJsonNullReply } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/json/dist/lib/commands/DEL.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/DEL.d.ts:2:import { RedisArgument, NumberReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/GET.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/json/dist/lib/commands/NUMMULTBY.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/NUMMULTBY.d.ts:2:import { RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/NUMMULTBY.d.ts:16:        readonly 2: (reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>) => number | (number | null)[];
node_modules/@redis/json/dist/lib/commands/NUMMULTBY.d.ts:17:        readonly 3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/json/dist/lib/commands/ARRAPPEND.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/ARRAPPEND.d.ts:2:import { RedisJSON } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/json/dist/lib/commands/ARRAPPEND.d.ts:3:import { RedisArgument, NumberReply, ArrayReply, NullReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/ARRPOP.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/json/dist/lib/commands/ARRLEN.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/ARRLEN.d.ts:2:import { RedisArgument, ArrayReply, NumberReply, NullReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/TYPE.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/TYPE.d.ts:2:import { NullReply, BlobStringReply, ArrayReply, RedisArgument, UnwrapReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/OBJKEYS.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/OBJKEYS.d.ts:2:import { RedisArgument, ArrayReply, BlobStringReply, NullReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/index.js:31:var generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/json/dist/lib/commands/SET.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/SET.d.ts:2:import { RedisArgument, SimpleStringReply, NullReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/SET.d.ts:3:import { RedisJSON } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/json/dist/lib/commands/MERGE.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/MERGE.d.ts:2:import { SimpleStringReply, RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/MERGE.d.ts:3:import { RedisJSON } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/json/dist/lib/commands/MSET.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/MSET.d.ts:2:import { RedisArgument, SimpleStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/MSET.d.ts:3:import { RedisJSON } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/json/dist/lib/commands/NUMINCRBY.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/NUMINCRBY.d.ts:2:import { RedisArgument, ArrayReply, NumberReply, DoubleReply, NullReply, BlobStringReply, UnwrapReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/STRLEN.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/STRLEN.d.ts:2:import { RedisArgument, ArrayReply, NumberReply, NullReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/DEBUG_MEMORY.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/DEBUG_MEMORY.d.ts:2:import { RedisArgument, NumberReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/ARRINDEX.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/json/dist/lib/commands/ARRAPPEND.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/json/dist/lib/commands/STRAPPEND.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/json/dist/lib/commands/FORGET.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/FORGET.d.ts:2:import { RedisArgument, NumberReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/STRAPPEND.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/STRAPPEND.d.ts:2:import { RedisArgument, NullReply, NumberReply, ArrayReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/ARRPOP.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/json/dist/lib/commands/ARRPOP.d.ts:2:import { RedisArgument, ArrayReply, NullReply, BlobStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/json/dist/lib/commands/ARRPOP.d.ts:21:        [key: string]: import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON;
node_modules/@redis/json/dist/lib/commands/ARRPOP.d.ts:22:        [key: number]: import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON;
node_modules/@redis/json/dist/lib/commands/ARRPOP.d.ts:23:    } | NullReply | (import("@redis/client/dist/lib/commands/generic-transformers").RedisJSON | NullReply)[] | null;
node_modules/@redis/json/dist/lib/commands/MSET.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/json/dist/lib/commands/MGET.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/time-series/package.json:2:  "name": "@redis/time-series",
node_modules/@redis/time-series/package.json:16:    "@redis/client": "^5.6.0"
node_modules/@redis/time-series/package.json:19:    "@redis/test-utils": "*"
node_modules/@redis/time-series/package.json:26:    "url": "git://github.com/redis/node-redis.git"
node_modules/@redis/time-series/package.json:29:    "url": "https://github.com/redis/node-redis/issues"
node_modules/@redis/time-series/package.json:31:  "homepage": "https://github.com/redis/node-redis/tree/master/packages/time-series",
node_modules/@redis/time-series/package.json:33:    "redis",
node_modules/@redis/time-series/README.md:1:# @redis/time-series
node_modules/@redis/time-series/README.md:3:This package provides support for the [RedisTimeSeries](https://redis.io/docs/data-types/timeseries/) module, which adds a time series data structure to Redis.
node_modules/@redis/time-series/README.md:5:Should be used with [`redis`/`@redis/client`](https://github.com/redis/node-redis).
node_modules/@redis/time-series/README.md:11:For a complete example, see [`time-series.js`](https://github.com/redis/node-redis/blob/master/examples/time-series.js) in the Node Redis examples folder.
node_modules/@redis/time-series/README.md:15:The [`TS.CREATE`](https://oss.redis.com/redistimeseries/commands/#tscreate) command creates a new time series.
node_modules/@redis/time-series/README.md:21:import { createClient } from 'redis';
node_modules/@redis/time-series/README.md:22:import { TimeSeriesDuplicatePolicies, TimeSeriesEncoding, TimeSeriesAggregationType } from '@redis/time-series';
node_modules/@redis/time-series/README.md:41:With RedisTimeSeries, we can add a single value to time series data structure using the [`TS.ADD`](https://redis.io/commands/ts.add/) command and if we would like to add multiple values we can use the [`TS.MADD`](https://redis.io/commands/ts.madd/) command.
node_modules/@redis/time-series/README.md:51:  // https://redis.io/commands/ts.add/
node_modules/@redis/time-series/README.md:61:// https://redis.io/commands/ts.madd/
node_modules/@redis/time-series/README.md:75:With RedisTimeSeries, we can retrieve the time series data using the [`TS.RANGE`](https://redis.io/commands/ts.range/) command by passing the criteria as follows:
node_modules/@redis/time-series/README.md:79:// https://redis.io/commands/ts.range/
node_modules/@redis/time-series/README.md:107:Using the [`TS.ALTER`](https://redis.io/commands/ts.alter/) command, we can update time series retention like this:
node_modules/@redis/time-series/README.md:110:// https://redis.io/commands/ts.alter/
node_modules/@redis/time-series/README.md:120:Using the [`TS.INFO`](https://redis.io/commands/ts.info/) command, we can view timeseries information like this:
node_modules/@redis/time-series/README.md:124:// https://redis.io/commands/ts.info/
node_modules/@redis/time-series/dist/lib/commands/ADD.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/time-series/dist/lib/commands/ADD.d.ts:2:import { RedisArgument, NumberReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/time-series/dist/lib/commands/INFO.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/time-series/dist/lib/commands/INFO.d.ts:2:import { ArrayReply, BlobStringReply, DoubleReply, NumberReply, ReplyUnion, SimpleStringReply, TypeMapping } from "@redis/client/dist/lib/RESP/types";
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:6:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, timestamp: import("./helpers").Timestamp, value: number, options?: import("./ADD").TsAddOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:7:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:11:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, timestamp: import("./helpers").Timestamp, value: number, options?: import("./ADD").TsAddOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:12:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:16:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./ALTER").TsAlterOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:17:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:21:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./ALTER").TsAlterOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:22:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:26:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./CREATE").TsCreateOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:27:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:31:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./CREATE").TsCreateOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:32:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:36:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, sourceKey: import("@redis/client/dist/lib/RESP/types").RedisArgument, destinationKey: import("@redis/client/dist/lib/RESP/types").RedisArgument, aggregationType: import("./CREATERULE").TimeSeriesAggregationType, bucketDuration: number, alignTimestamp?: number | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:37:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:41:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, sourceKey: import("@redis/client/dist/lib/RESP/types").RedisArgument, destinationKey: import("@redis/client/dist/lib/RESP/types").RedisArgument, aggregationType: import("./CREATERULE").TimeSeriesAggregationType, bucketDuration: number, alignTimestamp?: number | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:42:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:46:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, value: number, options?: import("./INCRBY").TsIncrByOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:47:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:51:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, value: number, options?: import("./INCRBY").TsIncrByOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:52:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:56:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:57:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:61:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:62:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:66:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, sourceKey: import("@redis/client/dist/lib/RESP/types").RedisArgument, destinationKey: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:67:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:71:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, sourceKey: import("@redis/client/dist/lib/RESP/types").RedisArgument, destinationKey: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:72:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:76:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./GET").TsGetOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:78:            readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").Resp2Reply<import("./GET").TsGetReply>>) => {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:79:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:82:            readonly 3: (this: void, reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("./GET").TsGetReply>) => {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:83:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:84:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:90:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./GET").TsGetOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:92:            readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").Resp2Reply<import("./GET").TsGetReply>>) => {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:93:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:96:            readonly 3: (this: void, reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("./GET").TsGetReply>) => {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:97:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:98:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:104:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, value: number, options?: import("./INCRBY").TsIncrByOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:105:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:109:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, value: number, options?: import("./INCRBY").TsIncrByOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:110:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:114:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: string) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:116:            readonly 2: (this: void, reply: [...import("./INFO").InfoRawReplyTypes[], "keySelfName", import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, "Chunks", ["startTimestamp", import("@redis/client/dist/lib/RESP/types").NumberReply<number>, "endTimestamp", import("@redis/client/dist/lib/RESP/types").NumberReply<number>, "samples", import("@redis/client/dist/lib/RESP/types").NumberReply<number>, "size", import("@redis/client/dist/lib/RESP/types").NumberReply<number>, "bytesPerSample", import("@redis/client/dist/lib/RESP/types").SimpleStringReply<string>][]], _: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("./INFO_DEBUG").InfoDebugReply;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:117:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:123:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: string) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:125:            readonly 2: (this: void, reply: [...import("./INFO").InfoRawReplyTypes[], "keySelfName", import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, "Chunks", ["startTimestamp", import("@redis/client/dist/lib/RESP/types").NumberReply<number>, "endTimestamp", import("@redis/client/dist/lib/RESP/types").NumberReply<number>, "samples", import("@redis/client/dist/lib/RESP/types").NumberReply<number>, "size", import("@redis/client/dist/lib/RESP/types").NumberReply<number>, "bytesPerSample", import("@redis/client/dist/lib/RESP/types").SimpleStringReply<string>][]], _: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("./INFO_DEBUG").InfoDebugReply;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:126:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:132:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: string) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:134:            readonly 2: (this: void, reply: import("./INFO").InfoRawReply, _: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("./INFO").InfoReply;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:135:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:141:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: string) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:143:            readonly 2: (this: void, reply: import("./INFO").InfoRawReply, _: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("./INFO").InfoReply;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:144:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:150:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, toAdd: import("./MADD").TsMAddSample[]) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:151:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").SimpleErrorReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:155:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, toAdd: import("./MADD").TsMAddSample[]) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:156:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").SimpleErrorReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:160:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, selectedLabels: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./MGET").TsMGetOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:162:            2(this: void, reply: import("./MGET_WITHLABELS").MGetLabelsRawReply2<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>, _: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined): import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:163:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:165:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:169:            3(this: void, reply: import("./MGET_WITHLABELS").MGetLabelsRawReply3<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>): import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:170:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:172:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:173:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:180:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, selectedLabels: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./MGET").TsMGetOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:182:            2(this: void, reply: import("./MGET_WITHLABELS").MGetLabelsRawReply2<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>, _: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined): import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:183:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:185:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:189:            3(this: void, reply: import("./MGET_WITHLABELS").MGetLabelsRawReply3<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>): import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:190:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:192:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:193:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:200:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./MGET_WITHLABELS").TsMGetWithLabelsOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:202:            2(this: void, reply: import("./MGET_WITHLABELS").MGetLabelsRawReply2<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>, _: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined): import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:203:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:205:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:209:            3(this: void, reply: import("./MGET_WITHLABELS").MGetLabelsRawReply3<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>): import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:210:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:212:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:213:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:220:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./MGET_WITHLABELS").TsMGetWithLabelsOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:222:            2(this: void, reply: import("./MGET_WITHLABELS").MGetLabelsRawReply2<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>, _: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined): import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:223:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:225:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:229:            3(this: void, reply: import("./MGET_WITHLABELS").MGetLabelsRawReply3<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>): import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:230:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:232:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:233:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:241:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./MGET").TsMGetOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:243:            readonly 2: (this: void, reply: import("./MGET").MGetRawReply2, _: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:245:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:249:            readonly 3: (this: void, reply: import("./MGET").MGetRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:251:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:252:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:260:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./MGET").TsMGetOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:262:            readonly 2: (this: void, reply: import("./MGET").MGetRawReply2, _: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:264:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:268:            readonly 3: (this: void, reply: import("./MGET").MGetRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:270:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:271:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:278:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("./MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:280:            readonly 2: (this: void, reply: import("./MRANGE_GROUPBY").TsMRangeGroupByRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:282:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:286:            readonly 3: (this: void, reply: import("./MRANGE_GROUPBY").TsMRangeGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:287:                sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:289:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:290:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:297:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("./MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:299:            readonly 2: (this: void, reply: import("./MRANGE_GROUPBY").TsMRangeGroupByRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:301:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:305:            readonly 3: (this: void, reply: import("./MRANGE_GROUPBY").TsMRangeGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:306:                sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:308:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:309:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:316:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, selectedLabels: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("./MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:318:            readonly 2: (this: void, reply: import("./MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:319:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:321:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:325:            readonly 3: (this: void, reply: import("./MRANGE_SELECTED_LABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:326:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:327:                sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:329:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:330:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:337:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, selectedLabels: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("./MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:339:            readonly 2: (this: void, reply: import("./MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:340:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:342:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:346:            readonly 3: (this: void, reply: import("./MRANGE_SELECTED_LABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:347:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:348:                sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:350:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:351:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:358:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, selectedLabels: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:360:            readonly 2: (this: void, reply: import("./MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:361:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:363:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:367:            readonly 3: (this: void, reply: import("./MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:370:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:371:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:378:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, selectedLabels: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:380:            readonly 2: (this: void, reply: import("./MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:381:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:383:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:387:            readonly 3: (this: void, reply: import("./MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:390:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:391:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:398:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("./MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:400:            readonly 2: (this: void, reply: import("./MRANGE_WITHLABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:401:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:404:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:408:            readonly 3: (this: void, reply: import("./MRANGE_WITHLABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:409:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:410:                sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:412:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:413:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:420:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("./MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:422:            readonly 2: (this: void, reply: import("./MRANGE_WITHLABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:423:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:426:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:430:            readonly 3: (this: void, reply: import("./MRANGE_WITHLABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:431:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:432:                sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:434:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:435:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:443:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:445:            readonly 2: (this: void, reply: import("./MRANGE_WITHLABELS").TsMRangeWithLabelsRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:446:                labels: Record<string, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:448:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:452:            readonly 3: (this: void, reply: import("./MRANGE_WITHLABELS").TsMRangeWithLabelsRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:453:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:455:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:456:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:464:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:466:            readonly 2: (this: void, reply: import("./MRANGE_WITHLABELS").TsMRangeWithLabelsRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:467:                labels: Record<string, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:469:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:473:            readonly 3: (this: void, reply: import("./MRANGE_WITHLABELS").TsMRangeWithLabelsRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:474:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:476:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:477:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:485:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:487:            readonly 2: (this: void, reply: import("./MRANGE").TsMRangeRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:488:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:491:            readonly 3: (this: void, reply: import("./MRANGE").TsMRangeRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:492:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:493:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:500:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:502:            readonly 2: (this: void, reply: import("./MRANGE").TsMRangeRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:503:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:506:            readonly 3: (this: void, reply: import("./MRANGE").TsMRangeRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:507:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:508:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:514:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("./MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:516:            readonly 2: (this: void, reply: import("./MRANGE_GROUPBY").TsMRangeGroupByRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:518:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:522:            readonly 3: (this: void, reply: import("./MRANGE_GROUPBY").TsMRangeGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:523:                sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:525:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:526:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:533:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("./MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:535:            readonly 2: (this: void, reply: import("./MRANGE_GROUPBY").TsMRangeGroupByRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:537:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:541:            readonly 3: (this: void, reply: import("./MRANGE_GROUPBY").TsMRangeGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:542:                sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:544:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:545:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:552:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, selectedLabels: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("./MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:554:            readonly 2: (this: void, reply: import("./MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:555:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:557:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:561:            readonly 3: (this: void, reply: import("./MRANGE_SELECTED_LABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:562:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:563:                sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:565:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:566:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:573:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, selectedLabels: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("./MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:575:            readonly 2: (this: void, reply: import("./MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:576:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:578:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:582:            readonly 3: (this: void, reply: import("./MRANGE_SELECTED_LABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:583:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:584:                sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:586:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:587:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:594:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, selectedLabels: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:596:            readonly 2: (this: void, reply: import("./MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:597:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:599:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:603:            readonly 3: (this: void, reply: import("./MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:606:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:607:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:614:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, selectedLabels: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:616:            readonly 2: (this: void, reply: import("./MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:617:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:619:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:623:            readonly 3: (this: void, reply: import("./MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:626:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:627:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:634:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("./MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:636:            readonly 2: (this: void, reply: import("./MRANGE_WITHLABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:637:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:640:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:644:            readonly 3: (this: void, reply: import("./MRANGE_WITHLABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:645:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:646:                sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:648:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:649:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:656:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("./MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:658:            readonly 2: (this: void, reply: import("./MRANGE_WITHLABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:659:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:662:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:666:            readonly 3: (this: void, reply: import("./MRANGE_WITHLABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:667:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:668:                sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:670:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:671:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:679:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:681:            readonly 2: (this: void, reply: import("./MRANGE_WITHLABELS").TsMRangeWithLabelsRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:682:                labels: Record<string, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:684:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:688:            readonly 3: (this: void, reply: import("./MRANGE_WITHLABELS").TsMRangeWithLabelsRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:689:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:691:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:692:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:700:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:702:            readonly 2: (this: void, reply: import("./MRANGE_WITHLABELS").TsMRangeWithLabelsRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:703:                labels: Record<string, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:705:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:709:            readonly 3: (this: void, reply: import("./MRANGE_WITHLABELS").TsMRangeWithLabelsRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:710:                labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:712:                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:713:                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:721:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:723:            readonly 2: (this: void, reply: import("./MRANGE").TsMRangeRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:724:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:727:            readonly 3: (this: void, reply: import("./MRANGE").TsMRangeRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:728:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:729:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:736:        readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:738:            readonly 2: (this: void, reply: import("./MRANGE").TsMRangeRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:739:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:742:            readonly 3: (this: void, reply: import("./MRANGE").TsMRangeRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:743:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:744:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:751:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:753:            readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:754:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:760:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:762:            readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:763:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:768:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:770:            readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").RespType<42, import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[], never, import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[]>) => {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:771:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:775:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:776:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:782:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:784:            readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").RespType<42, import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[], never, import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[]>) => {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:785:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:789:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:790:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:796:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:798:            readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").RespType<42, import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[], never, import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[]>) => {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:799:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:803:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:804:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:810:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:812:            readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").RespType<42, import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[], never, import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[]>) => {
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:813:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:817:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/index.d.ts:818:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MADD.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/time-series/dist/lib/commands/MADD.d.ts:3:import { ArrayReply, NumberReply, SimpleErrorReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/time-series/dist/lib/commands/MGET.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/time-series/dist/lib/commands/MGET.d.ts:2:import { BlobStringReply, ArrayReply, Resp2Reply, MapReply, TuplesReply, TypeMapping } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/time-series/dist/lib/commands/MGET.d.ts:4:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/time-series/dist/lib/commands/MGET.d.ts:42:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MGET.d.ts:48:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MGET.d.ts:49:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_SELECTED_LABELS_GROUPBY.d.ts:13:    readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, selectedLabels: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("./MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_SELECTED_LABELS_GROUPBY.d.ts:15:        readonly 2: (this: void, reply: import("./MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_SELECTED_LABELS_GROUPBY.d.ts:16:            labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_SELECTED_LABELS_GROUPBY.d.ts:18:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_SELECTED_LABELS_GROUPBY.d.ts:22:        readonly 3: (this: void, reply: import("./MRANGE_SELECTED_LABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_SELECTED_LABELS_GROUPBY.d.ts:23:            labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_SELECTED_LABELS_GROUPBY.d.ts:24:            sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_SELECTED_LABELS_GROUPBY.d.ts:26:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_SELECTED_LABELS_GROUPBY.d.ts:27:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/INCRBY.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/time-series/dist/lib/commands/INCRBY.d.ts:2:import { RedisArgument, NumberReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS.d.ts:2:import { ArrayReply, BlobStringReply, Resp2Reply, MapReply, TuplesReply, TypeMapping, NullReply, RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS.d.ts:3:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS.d.ts:40:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS.d.ts:47:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS.d.ts:48:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/GET.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/time-series/dist/lib/commands/GET.d.ts:2:import { RedisArgument, TuplesReply, NumberReply, DoubleReply, UnwrapReply, Resp2Reply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/time-series/dist/lib/commands/ALTER.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/time-series/dist/lib/commands/ALTER.d.ts:2:import { RedisArgument, SimpleStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS.d.ts:2:import { ArrayReply, BlobStringReply, Resp2Reply, MapReply, TuplesReply, TypeMapping, RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS.d.ts:3:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS.d.ts:40:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS.d.ts:47:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS.d.ts:48:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_WITHLABELS_GROUPBY.d.ts:13:    readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("./MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_WITHLABELS_GROUPBY.d.ts:15:        readonly 2: (this: void, reply: import("./MRANGE_WITHLABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_WITHLABELS_GROUPBY.d.ts:16:            labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_WITHLABELS_GROUPBY.d.ts:19:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_WITHLABELS_GROUPBY.d.ts:23:        readonly 3: (this: void, reply: import("./MRANGE_WITHLABELS_GROUPBY").TsMRangeWithLabelsGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_WITHLABELS_GROUPBY.d.ts:24:            labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_WITHLABELS_GROUPBY.d.ts:25:            sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_WITHLABELS_GROUPBY.d.ts:27:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_WITHLABELS_GROUPBY.d.ts:28:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/DEL.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/time-series/dist/lib/commands/DEL.d.ts:3:import { RedisArgument, NumberReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_SELECTED_LABELS.d.ts:12:    readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, selectedLabels: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_SELECTED_LABELS.d.ts:14:        readonly 2: (this: void, reply: import("./MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_SELECTED_LABELS.d.ts:15:            labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_SELECTED_LABELS.d.ts:17:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_SELECTED_LABELS.d.ts:21:        readonly 3: (this: void, reply: import("./MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_SELECTED_LABELS.d.ts:24:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_SELECTED_LABELS.d.ts:25:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/helpers.js:4:const client_1 = require("@redis/client");
node_modules/@redis/time-series/dist/lib/commands/helpers.js:90:// TODO: move to @redis/client?
node_modules/@redis/time-series/dist/lib/commands/helpers.d.ts:2:import { CommandParser } from "@redis/client/dist/lib/client/parser";
node_modules/@redis/time-series/dist/lib/commands/helpers.d.ts:4:import { ArrayReply, BlobStringReply, DoubleReply, MapReply, NullReply, NumberReply, ReplyUnion, RespType, TuplesReply, TypeMapping, UnwrapReply } from "@redis/client/dist/lib/RESP/types";
node_modules/@redis/time-series/dist/lib/commands/helpers.d.ts:5:import { RedisVariadicArgument } from "@redis/client/dist/lib/commands/generic-transformers";
node_modules/@redis/time-series/dist/lib/commands/DECRBY.d.ts:7:    readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, value: number, options?: import("./INCRBY").TsIncrByOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/DECRBY.d.ts:8:    readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS_GROUPBY.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS_GROUPBY.d.ts:2:import { ArrayReply, BlobStringReply, MapReply, TuplesReply, RedisArgument, NullReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS_GROUPBY.d.ts:3:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS_GROUPBY.d.ts:32:        readonly 2: (this: void, reply: import("./MRANGE_SELECTED_LABELS").TsMRangeSelectedLabelsRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => MapReply<BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS_GROUPBY.d.ts:35:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS_GROUPBY.d.ts:43:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MRANGE_SELECTED_LABELS_GROUPBY.d.ts:44:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE.d.ts:12:    readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE.d.ts:14:        readonly 2: (this: void, reply: import("./MRANGE").TsMRangeRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE.d.ts:15:            timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE.d.ts:18:        readonly 3: (this: void, reply: import("./MRANGE").TsMRangeRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE.d.ts:19:            timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE.d.ts:20:            value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/INFO_DEBUG.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/time-series/dist/lib/commands/INFO_DEBUG.d.ts:2:import { BlobStringReply, NumberReply, SimpleStringReply, TypeMapping, ReplyUnion } from "@redis/client/dist/lib/RESP/types";
node_modules/@redis/time-series/dist/lib/commands/REVRANGE.d.ts:7:    readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/REVRANGE.d.ts:9:        readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").RespType<42, import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[], never, import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[]>) => {
node_modules/@redis/time-series/dist/lib/commands/REVRANGE.d.ts:10:            timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/REVRANGE.d.ts:14:            timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/REVRANGE.d.ts:15:            value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MGET_SELECTED_LABELS.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/time-series/dist/lib/commands/MGET_SELECTED_LABELS.d.ts:2:import { BlobStringReply, NullReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/time-series/dist/lib/commands/MGET_SELECTED_LABELS.d.ts:3:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/time-series/dist/lib/commands/MGET_SELECTED_LABELS.d.ts:16:        2(this: void, reply: import("./MGET_WITHLABELS").MGetLabelsRawReply2<NullReply | BlobStringReply<string>>, _: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined): import("@redis/client/dist/lib/RESP/types").MapReply<BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/MGET_SELECTED_LABELS.d.ts:17:            labels: import("@redis/client/dist/lib/RESP/types").MapReply<BlobStringReply<string>, NullReply | BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/MGET_SELECTED_LABELS.d.ts:19:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MGET_SELECTED_LABELS.d.ts:23:        3(this: void, reply: import("./MGET_WITHLABELS").MGetLabelsRawReply3<NullReply | BlobStringReply<string>>): import("@redis/client/dist/lib/RESP/types").MapReply<BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/MGET_SELECTED_LABELS.d.ts:24:            labels: import("@redis/client/dist/lib/RESP/types").MapReply<BlobStringReply<string>, NullReply | BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/MGET_SELECTED_LABELS.d.ts:26:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MGET_SELECTED_LABELS.d.ts:27:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/DELETERULE.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/time-series/dist/lib/commands/DELETERULE.d.ts:2:import { RedisArgument, SimpleStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/time-series/dist/lib/commands/CREATE.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/time-series/dist/lib/commands/CREATE.d.ts:2:import { RedisArgument, SimpleStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/time-series/dist/lib/commands/CREATERULE.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/time-series/dist/lib/commands/CREATERULE.d.ts:2:import { RedisArgument, SimpleStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS_GROUPBY.d.ts:2:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS_GROUPBY.d.ts:3:import { ArrayReply, BlobStringReply, Resp2Reply, MapReply, TuplesReply, TypeMapping, RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS_GROUPBY.d.ts:4:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS_GROUPBY.d.ts:40:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS_GROUPBY.d.ts:48:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS_GROUPBY.d.ts:49:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/RANGE.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/time-series/dist/lib/commands/RANGE.d.ts:2:import { RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/time-series/dist/lib/commands/RANGE.d.ts:38:        readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").RespType<42, import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[], never, import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[]>) => {
node_modules/@redis/time-series/dist/lib/commands/RANGE.d.ts:39:            timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/RANGE.d.ts:43:            timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/RANGE.d.ts:44:            value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MRANGE_GROUPBY.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/time-series/dist/lib/commands/MRANGE_GROUPBY.d.ts:2:import { ArrayReply, BlobStringReply, Resp2Reply, MapReply, TuplesReply, TypeMapping, RedisArgument, TuplesToMapReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/time-series/dist/lib/commands/MRANGE_GROUPBY.d.ts:3:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/time-series/dist/lib/commands/MRANGE_GROUPBY.d.ts:71:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MRANGE_GROUPBY.d.ts:78:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MRANGE_GROUPBY.d.ts:79:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_WITHLABELS.d.ts:12:    readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_WITHLABELS.d.ts:14:        readonly 2: (this: void, reply: import("./MRANGE_WITHLABELS").TsMRangeWithLabelsRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_WITHLABELS.d.ts:15:            labels: Record<string, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_WITHLABELS.d.ts:17:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_WITHLABELS.d.ts:21:        readonly 3: (this: void, reply: import("./MRANGE_WITHLABELS").TsMRangeWithLabelsRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_WITHLABELS.d.ts:22:            labels: import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_WITHLABELS.d.ts:24:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_WITHLABELS.d.ts:25:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MGET_WITHLABELS.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/time-series/dist/lib/commands/MGET_WITHLABELS.d.ts:2:import { BlobStringReply, ArrayReply, Resp2Reply, MapReply, TuplesReply, TypeMapping } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/time-series/dist/lib/commands/MGET_WITHLABELS.d.ts:3:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/time-series/dist/lib/commands/MGET_WITHLABELS.d.ts:25:            timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MGET_WITHLABELS.d.ts:32:            timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MGET_WITHLABELS.d.ts:33:            value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MGET_WITHLABELS.d.ts:50:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MGET_WITHLABELS.d.ts:57:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MGET_WITHLABELS.d.ts:58:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/QUERYINDEX.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/time-series/dist/lib/commands/QUERYINDEX.d.ts:2:import { ArrayReply, BlobStringReply, SetReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/time-series/dist/lib/commands/QUERYINDEX.d.ts:3:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_GROUPBY.d.ts:12:    readonly parseCommand: (parser: import("@redis/client").CommandParser, fromTimestamp: import("./helpers").Timestamp, toTimestamp: import("./helpers").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, groupBy: import("./MRANGE_GROUPBY").TsMRangeGroupBy, options?: import("./RANGE").TsRangeOptions | undefined) => void;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_GROUPBY.d.ts:14:        readonly 2: (this: void, reply: import("./MRANGE_GROUPBY").TsMRangeGroupByRawReply2, _?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_GROUPBY.d.ts:16:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_GROUPBY.d.ts:20:        readonly 3: (this: void, reply: import("./MRANGE_GROUPBY").TsMRangeGroupByRawReply3) => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, {
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_GROUPBY.d.ts:21:            sources: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_GROUPBY.d.ts:23:                timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MREVRANGE_GROUPBY.d.ts:24:                value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/time-series/dist/lib/commands/INFO.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/time-series/dist/lib/commands/MRANGE.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/time-series/dist/lib/commands/MRANGE.d.ts:2:import { ArrayReply, BlobStringReply, Resp2Reply, MapReply, TuplesReply, TypeMapping, RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/time-series/dist/lib/commands/MRANGE.d.ts:3:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/time-series/dist/lib/commands/MRANGE.d.ts:35:            timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MRANGE.d.ts:39:            timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/time-series/dist/lib/commands/MRANGE.d.ts:40:            value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/client/package.json:2:  "name": "@redis/client",
node_modules/@redis/client/package.json:19:    "@redis/test-utils": "*",
node_modules/@redis/client/package.json:28:    "url": "git://github.com/redis/node-redis.git"
node_modules/@redis/client/package.json:31:    "url": "https://github.com/redis/node-redis/issues"
node_modules/@redis/client/package.json:33:  "homepage": "https://github.com/redis/node-redis/tree/master/packages/client",
node_modules/@redis/client/package.json:35:    "redis"
node_modules/@redis/client/README.md:1:# @redis/client
node_modules/@redis/client/README.md:3:The source code and documentation for this package are in the main [node-redis](https://github.com/redis/node-redis) repo.
node_modules/@redis/client/dist/lib/sentinel/multi-commands.js:16:            const redisArgs = parser.redisArgs;
node_modules/@redis/client/dist/lib/sentinel/multi-commands.js:17:            redisArgs.preserve = parser.preserve;
node_modules/@redis/client/dist/lib/sentinel/multi-commands.js:18:            return this.addCommand(command.IS_READ_ONLY, redisArgs, transformReply);
node_modules/@redis/client/dist/lib/sentinel/multi-commands.js:26:            const redisArgs = parser.redisArgs;
node_modules/@redis/client/dist/lib/sentinel/multi-commands.js:27:            redisArgs.preserve = parser.preserve;
node_modules/@redis/client/dist/lib/sentinel/multi-commands.js:28:            return this._self.addCommand(command.IS_READ_ONLY, redisArgs, transformReply);
node_modules/@redis/client/dist/lib/sentinel/multi-commands.js:38:            const redisArgs = parser.redisArgs;
node_modules/@redis/client/dist/lib/sentinel/multi-commands.js:39:            redisArgs.preserve = parser.preserve;
node_modules/@redis/client/dist/lib/sentinel/multi-commands.js:40:            return this._self.addCommand(fn.IS_READ_ONLY, redisArgs, transformReply);
node_modules/@redis/client/dist/lib/sentinel/multi-commands.js:48:            const scriptArgs = parser.redisArgs;
node_modules/@redis/client/dist/lib/sentinel/index.js:575:                  rediscover and retry if doing a command against a "master"
node_modules/@redis/client/dist/lib/cluster/multi-command.js:16:            const redisArgs = parser.redisArgs;
node_modules/@redis/client/dist/lib/cluster/multi-command.js:17:            redisArgs.preserve = parser.preserve;
node_modules/@redis/client/dist/lib/cluster/multi-command.js:19:            return this.addCommand(firstKey, command.IS_READ_ONLY, redisArgs, transformReply);
node_modules/@redis/client/dist/lib/cluster/multi-command.js:27:            const redisArgs = parser.redisArgs;
node_modules/@redis/client/dist/lib/cluster/multi-command.js:28:            redisArgs.preserve = parser.preserve;
node_modules/@redis/client/dist/lib/cluster/multi-command.js:30:            return this._self.addCommand(firstKey, command.IS_READ_ONLY, redisArgs, transformReply);
node_modules/@redis/client/dist/lib/cluster/multi-command.js:40:            const redisArgs = parser.redisArgs;
node_modules/@redis/client/dist/lib/cluster/multi-command.js:41:            redisArgs.preserve = parser.preserve;
node_modules/@redis/client/dist/lib/cluster/multi-command.js:43:            return this._self.addCommand(firstKey, fn.IS_READ_ONLY, redisArgs, transformReply);
node_modules/@redis/client/dist/lib/cluster/multi-command.js:51:            const scriptArgs = parser.redisArgs;
node_modules/@redis/client/dist/lib/cluster/cluster-slots.d.ts:50:    rediscover(startWith: RedisClientType<M, F, S, RESP>): Promise<void>;
node_modules/@redis/client/dist/lib/cluster/cluster-slots.js:220:    async rediscover(startWith) {
node_modules/@redis/client/dist/lib/cluster/cluster-slots.js:221:        this.#runningRediscoverPromise ??= this.#rediscover(startWith)
node_modules/@redis/client/dist/lib/cluster/cluster-slots.js:225:    async #rediscover(startWith) {
node_modules/@redis/client/dist/lib/cluster/cluster-slots.js:402:                await this.rediscover(client);
node_modules/@redis/client/dist/lib/cluster/index.js:194:                        await this._slots.rediscover(client);
node_modules/@redis/client/dist/lib/cluster/index.js:205:                    await this._slots.rediscover(client);
node_modules/@redis/client/dist/lib/cluster/index.js:261:                    await this._self._slots.rediscover(client);
node_modules/@redis/client/dist/lib/multi-command.js:18:        const redisArgs = [];
node_modules/@redis/client/dist/lib/multi-command.js:19:        redisArgs.preserve = args.preserve;
node_modules/@redis/client/dist/lib/multi-command.js:21:            redisArgs.push('EVALSHA', script.SHA1);
node_modules/@redis/client/dist/lib/multi-command.js:25:            redisArgs.push('EVAL', script.SCRIPT);
node_modules/@redis/client/dist/lib/multi-command.js:28:            redisArgs.push(script.NUMBER_OF_KEYS.toString());
node_modules/@redis/client/dist/lib/multi-command.js:30:        redisArgs.push(...args);
node_modules/@redis/client/dist/lib/multi-command.js:31:        this.addCommand(redisArgs, transformReply);
node_modules/@redis/client/dist/lib/client/pub-sub.js:274:        const channelString = pattern ? channel.toString() : keyString, messageString = channelString === '__redis__:invalidate' ?
node_modules/@redis/client/dist/lib/client/pub-sub.js:275:            // https://github.com/redis/redis/pull/7469
node_modules/@redis/client/dist/lib/client/pub-sub.js:276:            // https://github.com/redis/redis/issues/7463
node_modules/@redis/client/dist/lib/client/index.d.ts:21:     * `redis[s]://[[username][:password]@][host][:port][/db-number]`
node_modules/@redis/client/dist/lib/client/index.d.ts:22:     * See [`redis`](https://www.iana.org/assignments/uri-schemes/prov/redis) and [`rediss`](https://www.iana.org/assignments/uri-schemes/prov/rediss) IANA registration for more details
node_modules/@redis/client/dist/lib/client/index.d.ts:30:     * ACL username ([see ACL guide](https://redis.io/topics/acl))
node_modules/@redis/client/dist/lib/client/index.d.ts:44:     * Client name ([see `CLIENT SETNAME`](https://redis.io/commands/client-setname))
node_modules/@redis/client/dist/lib/client/index.d.ts:48:     * Redis database number (see [`SELECT`](https://redis.io/commands/select) command)
node_modules/@redis/client/dist/lib/client/index.d.ts:61:     * Connect in [`READONLY`](https://redis.io/commands/readonly) mode
node_modules/@redis/client/dist/lib/client/index.d.ts:127:     * If set to true, disables sending client identifier (user-agent like message) to the redis server
node_modules/@redis/client/dist/lib/client/cache.js:251: * @param redisArgs - Array of Redis command arguments
node_modules/@redis/client/dist/lib/client/cache.js:254:function generateCacheKey(redisArgs) {
node_modules/@redis/client/dist/lib/client/cache.js:255:    const tmp = new Array(redisArgs.length * 2);
node_modules/@redis/client/dist/lib/client/cache.js:256:    for (let i = 0; i < redisArgs.length; i++) {
node_modules/@redis/client/dist/lib/client/cache.js:257:        tmp[i] = redisArgs[i].length;
node_modules/@redis/client/dist/lib/client/cache.js:258:        tmp[i + redisArgs.length] = redisArgs[i];
node_modules/@redis/client/dist/lib/client/cache.js:334:        redisKeys - an array of redis keys as strings that if the key is modified, will cause redis to invalidate this result when cached
node_modules/@redis/client/dist/lib/client/cache.js:347:        const cacheKey = generateCacheKey(parser.redisArgs);
node_modules/@redis/client/dist/lib/client/multi-command.js:16:            const redisArgs = parser.redisArgs;
node_modules/@redis/client/dist/lib/client/multi-command.js:17:            redisArgs.preserve = parser.preserve;
node_modules/@redis/client/dist/lib/client/multi-command.js:18:            return this.addCommand(redisArgs, transformReply);
node_modules/@redis/client/dist/lib/client/multi-command.js:26:            const redisArgs = parser.redisArgs;
node_modules/@redis/client/dist/lib/client/multi-command.js:27:            redisArgs.preserve = parser.preserve;
node_modules/@redis/client/dist/lib/client/multi-command.js:28:            return this._self.addCommand(redisArgs, transformReply);
node_modules/@redis/client/dist/lib/client/multi-command.js:38:            const redisArgs = parser.redisArgs;
node_modules/@redis/client/dist/lib/client/multi-command.js:39:            redisArgs.preserve = parser.preserve;
node_modules/@redis/client/dist/lib/client/multi-command.js:40:            return this._self.addCommand(redisArgs, transformReply);
node_modules/@redis/client/dist/lib/client/multi-command.js:48:            const redisArgs = parser.redisArgs;
node_modules/@redis/client/dist/lib/client/multi-command.js:49:            redisArgs.preserve = parser.preserve;
node_modules/@redis/client/dist/lib/client/multi-command.js:50:            return this.#addScript(script, redisArgs, transformReply);
node_modules/@redis/client/dist/lib/client/parser.d.ts:4:    redisArgs: ReadonlyArray<RedisArgument>;
node_modules/@redis/client/dist/lib/client/parser.d.ts:19:    get redisArgs(): RedisArgument[];
node_modules/@redis/client/dist/lib/client/parser.js:5:    #redisArgs = [];
node_modules/@redis/client/dist/lib/client/parser.js:8:    get redisArgs() {
node_modules/@redis/client/dist/lib/client/parser.js:9:        return this.#redisArgs;
node_modules/@redis/client/dist/lib/client/parser.js:18:        const tmp = new Array(this.#redisArgs.length * 2);
node_modules/@redis/client/dist/lib/client/parser.js:19:        for (let i = 0; i < this.#redisArgs.length; i++) {
node_modules/@redis/client/dist/lib/client/parser.js:20:            tmp[i] = this.#redisArgs[i].length;
node_modules/@redis/client/dist/lib/client/parser.js:21:            tmp[i + this.#redisArgs.length] = this.#redisArgs[i];
node_modules/@redis/client/dist/lib/client/parser.js:26:        this.#redisArgs.push(...arg);
node_modules/@redis/client/dist/lib/client/parser.js:41:            this.#redisArgs.push(vals.length.toString());
node_modules/@redis/client/dist/lib/client/parser.js:44:            this.#redisArgs.push('1');
node_modules/@redis/client/dist/lib/client/parser.js:60:        this.#redisArgs.push(key);
node_modules/@redis/client/dist/lib/client/parser.js:64:            this.#redisArgs.push(keys.length.toString());
node_modules/@redis/client/dist/lib/client/parser.js:67:            this.#redisArgs.push('1');
node_modules/@redis/client/dist/lib/client/parser.js:74:            this.#redisArgs.push(...keys);
node_modules/@redis/client/dist/lib/client/parser.js:78:            this.#redisArgs.push(keys);
node_modules/@redis/client/dist/lib/client/legacy-mode.js:11:    static #transformArguments(redisArgs, args) {
node_modules/@redis/client/dist/lib/client/legacy-mode.js:16:        RedisLegacyClient.pushArguments(redisArgs, args);
node_modules/@redis/client/dist/lib/client/legacy-mode.js:19:    static pushArguments(redisArgs, args) {
node_modules/@redis/client/dist/lib/client/legacy-mode.js:23:                RedisLegacyClient.pushArguments(redisArgs, arg);
node_modules/@redis/client/dist/lib/client/legacy-mode.js:26:                redisArgs.push(typeof arg === 'number' || arg instanceof Date ?
node_modules/@redis/client/dist/lib/client/legacy-mode.js:40:            const redisArgs = [name], callback = RedisLegacyClient.#transformArguments(redisArgs, args), promise = this.#client.sendCommand(redisArgs);
node_modules/@redis/client/dist/lib/client/legacy-mode.js:62:        const redisArgs = [], callback = RedisLegacyClient.#transformArguments(redisArgs, args), promise = this.#client.sendCommand(redisArgs);
node_modules/@redis/client/dist/lib/client/legacy-mode.js:80:            const redisArgs = [name];
node_modules/@redis/client/dist/lib/client/legacy-mode.js:81:            RedisLegacyClient.pushArguments(redisArgs, args);
node_modules/@redis/client/dist/lib/client/legacy-mode.js:82:            this.#multi.addCommand(redisArgs, transformReply);
node_modules/@redis/client/dist/lib/client/legacy-mode.js:103:        const redisArgs = [];
node_modules/@redis/client/dist/lib/client/legacy-mode.js:104:        RedisLegacyClient.pushArguments(redisArgs, args);
node_modules/@redis/client/dist/lib/client/legacy-mode.js:105:        this.#multi.addCommand(redisArgs);
node_modules/@redis/client/dist/lib/client/index.js:87:        // https://www.iana.org/assignments/uri-schemes/prov/redis
node_modules/@redis/client/dist/lib/client/index.js:93:        if (protocol === 'rediss:') {
node_modules/@redis/client/dist/lib/client/index.js:96:        else if (protocol !== 'redis:') {
node_modules/@redis/client/dist/lib/client/index.js:349:                        ? `node-redis(${this.#options.clientInfoTag})`
node_modules/@redis/client/dist/lib/client/index.js:350:                        : 'node-redis'
node_modules/@redis/client/dist/lib/client/index.js:486:        const fn = () => { return this.sendCommand(parser.redisArgs, commandOptions); };
node_modules/@redis/client/dist/lib/client/index.js:502:        const args = parser.redisArgs;
node_modules/@redis/client/dist/lib/client/legacy-mode.d.ts:19:    static pushArguments(redisArgs: CommandArguments, args: LegacyArguments): void;
node_modules/@redis/client/dist/lib/commands/PUBLISH.js:13:     * @see https://redis.io/commands/publish/
node_modules/@redis/client/dist/lib/commands/HSTRLEN.d.ts:12:     * @see https://redis.io/commands/hstrlen/
node_modules/@redis/client/dist/lib/commands/LATENCY_GRAPH.d.ts:30:     * @see https://redis.io/commands/latency-graph/
node_modules/@redis/client/dist/lib/commands/LPUSH.js:10:     * @see https://redis.io/commands/lpush/
node_modules/@redis/client/dist/lib/commands/HPEXPIRETIME.d.ts:12:     * @see https://redis.io/commands/hpexpiretime/
node_modules/@redis/client/dist/lib/commands/VSIM_WITHSCORES.d.ts:7:     * @see https://redis.io/commands/vsim/
node_modules/@redis/client/dist/lib/commands/INCRBYFLOAT.d.ts:10:     * @see https://redis.io/commands/incrbyfloat/
node_modules/@redis/client/dist/lib/commands/RENAMENX.d.ts:11:     * @see https://redis.io/commands/renamenx/
node_modules/@redis/client/dist/lib/commands/VINFO.js:10:     * @see https://redis.io/commands/vinfo/
node_modules/@redis/client/dist/lib/commands/RPOPLPUSH.d.ts:10:     * @see https://redis.io/commands/rpoplpush/
node_modules/@redis/client/dist/lib/commands/PERSIST.js:9:     * @see https://redis.io/commands/persist/
node_modules/@redis/client/dist/lib/commands/SINTER.js:11:     * @see https://redis.io/commands/sinter/
node_modules/@redis/client/dist/lib/commands/SCRIPT_EXISTS.js:11:     * @see https://redis.io/commands/script-exists/
node_modules/@redis/client/dist/lib/commands/SDIFF.d.ts:12:     * @see https://redis.io/commands/sdiff/
node_modules/@redis/client/dist/lib/commands/MIGRATE.d.ts:21:     * @see https://redis.io/commands/migrate/
node_modules/@redis/client/dist/lib/commands/ROLE.d.ts:39:     * @see https://redis.io/commands/role/
node_modules/@redis/client/dist/lib/commands/LPUSH.d.ts:11:     * @see https://redis.io/commands/lpush/
node_modules/@redis/client/dist/lib/commands/INFO.d.ts:11:     * @see https://redis.io/commands/info/
node_modules/@redis/client/dist/lib/commands/VRANDMEMBER.d.ts:11:     * @see https://redis.io/commands/vrandmember/
node_modules/@redis/client/dist/lib/commands/SRANDMEMBER_COUNT.d.ts:11:     * @see https://redis.io/commands/srandmember/
node_modules/@redis/client/dist/lib/commands/MGET.d.ts:11:     * @see https://redis.io/commands/mget/
node_modules/@redis/client/dist/lib/commands/READONLY.d.ts:10:     * @see https://redis.io/commands/readonly/
node_modules/@redis/client/dist/lib/commands/MODULE_LOAD.d.ts:12:     * @see https://redis.io/commands/module-load/
node_modules/@redis/client/dist/lib/commands/XGROUP_SETID.d.ts:23:     * @see https://redis.io/commands/xgroup-setid/
node_modules/@redis/client/dist/lib/commands/MEMORY_DOCTOR.d.ts:10:     * @see https://redis.io/commands/memory-doctor/
node_modules/@redis/client/dist/lib/commands/SETEX.js:11:     * @see https://redis.io/commands/setex/
node_modules/@redis/client/dist/lib/commands/SMISMEMBER.d.ts:12:     * @see https://redis.io/commands/smismember/
node_modules/@redis/client/dist/lib/commands/LCS.js:11:     * @see https://redis.io/commands/lcs/
node_modules/@redis/client/dist/lib/commands/UNLINK.d.ts:12:     * @see https://redis.io/commands/unlink/
node_modules/@redis/client/dist/lib/commands/XGROUP_DESTROY.d.ts:15:     * @see https://redis.io/commands/xgroup-destroy/
node_modules/@redis/client/dist/lib/commands/XINFO_CONSUMERS.js:12:     * @see https://redis.io/commands/xinfo-consumers/
node_modules/@redis/client/dist/lib/commands/SINTERCARD.js:11:     * @see https://redis.io/commands/sintercard/
node_modules/@redis/client/dist/lib/commands/LPOS.d.ts:17:     * @see https://redis.io/commands/lpos/
node_modules/@redis/client/dist/lib/commands/HSETEX.js:12:     * @see https://redis.io/commands/hsetex/
node_modules/@redis/client/dist/lib/commands/HSETEX.js:53:    if (tmpParser.redisArgs.length % 2 != 0) {
node_modules/@redis/client/dist/lib/commands/HSETEX.js:56:    parser.push((tmpParser.redisArgs.length / 2).toString());
node_modules/@redis/client/dist/lib/commands/HSETEX.js:57:    parser.push(...tmpParser.redisArgs);
node_modules/@redis/client/dist/lib/commands/SREM.js:12:     * @see https://redis.io/commands/srem/
node_modules/@redis/client/dist/lib/commands/VREM.js:11:     * @see https://redis.io/commands/vrem/
node_modules/@redis/client/dist/lib/commands/INCRBYFLOAT.js:10:     * @see https://redis.io/commands/incrbyfloat/
node_modules/@redis/client/dist/lib/commands/LPOP_COUNT.js:15:     * @see https://redis.io/commands/lpop/
node_modules/@redis/client/dist/lib/commands/SETRANGE.js:11:     * @see https://redis.io/commands/setrange/
node_modules/@redis/client/dist/lib/commands/HPTTL.d.ts:12:     * @see https://redis.io/commands/hpttl/
node_modules/@redis/client/dist/lib/commands/SADD.js:10:     * @see https://redis.io/commands/sadd/
node_modules/@redis/client/dist/lib/commands/PERSIST.d.ts:9:     * @see https://redis.io/commands/persist/
node_modules/@redis/client/dist/lib/commands/PEXPIRE.d.ts:12:     * @see https://redis.io/commands/pexpire/
node_modules/@redis/client/dist/lib/commands/WAIT.d.ts:13:     * @see https://redis.io/commands/wait/
node_modules/@redis/client/dist/lib/commands/SET.js:11:     * @see https://redis.io/commands/set/
node_modules/@redis/client/dist/lib/commands/PUBSUB_NUMPAT.js:10:     * @see https://redis.io/commands/pubsub-numpat/
node_modules/@redis/client/dist/lib/commands/MIGRATE.js:15:     * @see https://redis.io/commands/migrate/
node_modules/@redis/client/dist/lib/commands/VCARD.d.ts:10:     * @see https://redis.io/commands/vcard/
node_modules/@redis/client/dist/lib/commands/LOLWUT.js:12:     * @see https://redis.io/commands/lolwut/
node_modules/@redis/client/dist/lib/commands/MODULE_UNLOAD.d.ts:11:     * @see https://redis.io/commands/module-unload/
node_modules/@redis/client/dist/lib/commands/RPUSHX.js:10:     * @see https://redis.io/commands/rpushx/
node_modules/@redis/client/dist/lib/commands/SMISMEMBER.js:12:     * @see https://redis.io/commands/smismember/
node_modules/@redis/client/dist/lib/commands/XINFO_GROUPS.js:11:     * @see https://redis.io/commands/xinfo-groups/
node_modules/@redis/client/dist/lib/commands/XINFO_CONSUMERS.d.ts:39:     * @see https://redis.io/commands/xinfo-consumers/
node_modules/@redis/client/dist/lib/commands/XCLAIM_JUSTID.d.ts:12:     * @see https://redis.io/commands/xclaim/
node_modules/@redis/client/dist/lib/commands/SRANDMEMBER_COUNT.js:15:     * @see https://redis.io/commands/srandmember/
node_modules/@redis/client/dist/lib/commands/MSETNX.d.ts:11:     * @see https://redis.io/commands/msetnx/
node_modules/@redis/client/dist/lib/commands/SDIFF.js:11:     * @see https://redis.io/commands/sdiff/
node_modules/@redis/client/dist/lib/commands/INCRBY.d.ts:10:     * @see https://redis.io/commands/incrby/
node_modules/@redis/client/dist/lib/commands/SETNX.d.ts:10:     * @see https://redis.io/commands/setnx/
node_modules/@redis/client/dist/lib/commands/XGROUP_DELCONSUMER.js:16:     * @see https://redis.io/commands/xgroup-delconsumer/
node_modules/@redis/client/dist/lib/commands/PUBSUB_SHARDCHANNELS.d.ts:11:     * @see https://redis.io/commands/pubsub-shardchannels/
node_modules/@redis/client/dist/lib/commands/READWRITE.js:10:     * @see https://redis.io/commands/readwrite/
node_modules/@redis/client/dist/lib/commands/LRANGE.js:13:     * @see https://redis.io/commands/lrange/
node_modules/@redis/client/dist/lib/commands/SRANDMEMBER.d.ts:10:     * @see https://redis.io/commands/srandmember/
node_modules/@redis/client/dist/lib/commands/MODULE_LOAD.js:12:     * @see https://redis.io/commands/module-load/
node_modules/@redis/client/dist/lib/commands/MODULE_LIST.js:10:     * @see https://redis.io/commands/module-list/
node_modules/@redis/client/dist/lib/commands/LINSERT.d.ts:14:     * @see https://redis.io/commands/linsert/
node_modules/@redis/client/dist/lib/commands/ZADD_INCR.d.ts:28:     * @see https://redis.io/commands/zadd/
node_modules/@redis/client/dist/lib/commands/MEMORY_PURGE.js:10:     * @see https://redis.io/commands/memory-purge/
node_modules/@redis/client/dist/lib/commands/VEMB_RAW.d.ts:17:     * @see https://redis.io/commands/vemb/
node_modules/@redis/client/dist/lib/commands/XAUTOCLAIM_JUSTID.js:14:     * @see https://redis.io/commands/xautoclaim/
node_modules/@redis/client/dist/lib/commands/SCRIPT_KILL.d.ts:10:     * @see https://redis.io/commands/script-kill/
node_modules/@redis/client/dist/lib/commands/SORT.js:45:     * @see https://redis.io/commands/sort/
node_modules/@redis/client/dist/lib/commands/OBJECT_REFCOUNT.d.ts:10:     * @see https://redis.io/commands/object-refcount/
node_modules/@redis/client/dist/lib/commands/LASTSAVE.d.ts:10:     * @see https://redis.io/commands/lastsave/
node_modules/@redis/client/dist/lib/commands/PUBSUB_NUMSUB.js:11:     * @see https://redis.io/commands/pubsub-numsub/
node_modules/@redis/client/dist/lib/commands/PFADD.d.ts:12:     * @see https://redis.io/commands/pfadd/
node_modules/@redis/client/dist/lib/commands/XDEL.js:15:     * @see https://redis.io/commands/xdel/
node_modules/@redis/client/dist/lib/commands/XADD.d.ts:42:     * @see https://redis.io/commands/xadd/
node_modules/@redis/client/dist/lib/commands/XINFO_STREAM.js:12:     * @see https://redis.io/commands/xinfo-stream/
node_modules/@redis/client/dist/lib/commands/SPOP.js:10:     * @see https://redis.io/commands/spop/
node_modules/@redis/client/dist/lib/commands/XADD_NOMKSTREAM.js:14:     * @see https://redis.io/commands/xadd/
node_modules/@redis/client/dist/lib/commands/SPUBLISH.js:11:     * @see https://redis.io/commands/spublish/
node_modules/@redis/client/dist/lib/commands/PEXPIRETIME.js:10:     * @see https://redis.io/commands/pexpiretime/
node_modules/@redis/client/dist/lib/commands/LREM.d.ts:12:     * @see https://redis.io/commands/lrem/
node_modules/@redis/client/dist/lib/commands/SMEMBERS.js:11:     * @see https://redis.io/commands/smembers/
node_modules/@redis/client/dist/lib/commands/READONLY.js:10:     * @see https://redis.io/commands/readonly/
node_modules/@redis/client/dist/lib/commands/LCS_LEN.js:13:     * @see https://redis.io/commands/lcs/
node_modules/@redis/client/dist/lib/commands/HSETNX.js:12:     * @see https://redis.io/commands/hsetnx/
node_modules/@redis/client/dist/lib/commands/LCS_IDX.js:16:     * @see https://redis.io/commands/lcs/
node_modules/@redis/client/dist/lib/commands/LTRIM.js:11:     * @see https://redis.io/commands/ltrim/
node_modules/@redis/client/dist/lib/commands/HSCAN.js:13:     * @see https://redis.io/commands/hscan/
node_modules/@redis/client/dist/lib/commands/HPTTL.js:11:     * @see https://redis.io/commands/hpttl/
node_modules/@redis/client/dist/lib/commands/ZCARD.js:15:     * @see https://redis.io/commands/zcard/
node_modules/@redis/client/dist/lib/commands/XPENDING_RANGE.js:17:     * @see https://redis.io/commands/xpending/
node_modules/@redis/client/dist/lib/commands/MEMORY_PURGE.d.ts:10:     * @see https://redis.io/commands/memory-purge/
node_modules/@redis/client/dist/lib/commands/LPOP_COUNT.d.ts:11:     * @see https://redis.io/commands/lpop/
node_modules/@redis/client/dist/lib/commands/HRANDFIELD_COUNT_WITHVALUES.d.ts:15:     * @see https://redis.io/commands/hrandfield/
node_modules/@redis/client/dist/lib/commands/XCLAIM.d.ts:33:     * @see https://redis.io/commands/xclaim/
node_modules/@redis/client/dist/lib/commands/VGETATTR.d.ts:12:     * @see https://redis.io/commands/vgetattr/
node_modules/@redis/client/dist/lib/commands/HSETEX.d.ts:24:     * @see https://redis.io/commands/hsetex/
node_modules/@redis/client/dist/lib/commands/LPOS_COUNT.d.ts:15:     * @see https://redis.io/commands/lpos/
node_modules/@redis/client/dist/lib/commands/PTTL.js:10:     * @see https://redis.io/commands/pttl/
node_modules/@redis/client/dist/lib/commands/OBJECT_ENCODING.js:10:     * @see https://redis.io/commands/object-encoding/
node_modules/@redis/client/dist/lib/commands/SCARD.js:11:     * @see https://redis.io/commands/scard/
node_modules/@redis/client/dist/lib/commands/LCS_IDX_WITHMATCHLEN.d.ts:24:     * @see https://redis.io/commands/lcs/
node_modules/@redis/client/dist/lib/commands/HSET.d.ts:19:     * @see https://redis.io/commands/hset/
node_modules/@redis/client/dist/lib/commands/XTRIM.js:17:     * @see https://redis.io/commands/xtrim/
node_modules/@redis/client/dist/lib/commands/XREADGROUP.js:16:     * @see https://redis.io/commands/xreadgroup/
node_modules/@redis/client/dist/lib/commands/XGROUP_CREATECONSUMER.js:16:     * @see https://redis.io/commands/xgroup-createconsumer/
node_modules/@redis/client/dist/lib/commands/LTRIM.d.ts:11:     * @see https://redis.io/commands/ltrim/
node_modules/@redis/client/dist/lib/commands/MEMORY_STATS.d.ts:122:     * @see https://redis.io/commands/memory-stats/
node_modules/@redis/client/dist/lib/commands/RANDOMKEY.d.ts:10:     * @see https://redis.io/commands/randomkey/
node_modules/@redis/client/dist/lib/commands/LMOVE.d.ts:14:     * @see https://redis.io/commands/lmove/
node_modules/@redis/client/dist/lib/commands/SMOVE.d.ts:12:     * @see https://redis.io/commands/smove/
node_modules/@redis/client/dist/lib/commands/RPOP_COUNT.js:10:     * @see https://redis.io/commands/rpop/
node_modules/@redis/client/dist/lib/commands/SPOP.d.ts:10:     * @see https://redis.io/commands/spop/
node_modules/@redis/client/dist/lib/commands/PUBSUB_SHARDNUMSUB.js:10:     * @see https://redis.io/commands/pubsub-shardnumsub/
node_modules/@redis/client/dist/lib/commands/REPLICAOF.d.ts:12:     * @see https://redis.io/commands/replicaof/
node_modules/@redis/client/dist/lib/commands/LPOS.js:13:     * @see https://redis.io/commands/lpos/
node_modules/@redis/client/dist/lib/commands/OBJECT_REFCOUNT.js:10:     * @see https://redis.io/commands/object-refcount/
node_modules/@redis/client/dist/lib/commands/VADD.d.ts:20:     * @see https://redis.io/commands/vadd/
node_modules/@redis/client/dist/lib/commands/XPENDING.js:13:     * @see https://redis.io/commands/xpending/
node_modules/@redis/client/dist/lib/commands/WAIT.js:13:     * @see https://redis.io/commands/wait/
node_modules/@redis/client/dist/lib/commands/SINTERCARD.d.ts:20:     * @see https://redis.io/commands/sintercard/
node_modules/@redis/client/dist/lib/commands/OBJECT_IDLETIME.d.ts:10:     * @see https://redis.io/commands/object-idletime/
node_modules/@redis/client/dist/lib/commands/LLEN.js:11:     * @see https://redis.io/commands/llen/
node_modules/@redis/client/dist/lib/commands/LMPOP.d.ts:16:     * @see https://redis.io/commands/lmpop/
node_modules/@redis/client/dist/lib/commands/RPOP.js:9:     * @see https://redis.io/commands/rpop/
node_modules/@redis/client/dist/lib/commands/SPOP_COUNT.d.ts:11:     * @see https://redis.io/commands/spop/
node_modules/@redis/client/dist/lib/commands/INCR.d.ts:9:     * @see https://redis.io/commands/incr/
node_modules/@redis/client/dist/lib/commands/SHUTDOWN.js:11:     * @see https://redis.io/commands/shutdown/
node_modules/@redis/client/dist/lib/commands/VSETATTR.js:12:     * @see https://redis.io/commands/vsetattr/
node_modules/@redis/client/dist/lib/commands/XPENDING_RANGE.d.ts:41:     * @see https://redis.io/commands/xpending/
node_modules/@redis/client/dist/lib/commands/VSIM.js:13:     * @see https://redis.io/commands/vsim/
node_modules/@redis/client/dist/lib/commands/PING.js:11:     * @see https://redis.io/commands/ping/
node_modules/@redis/client/dist/lib/commands/LASTSAVE.js:10:     * @see https://redis.io/commands/lastsave/
node_modules/@redis/client/dist/lib/commands/XCLAIM_JUSTID.js:17:     * @see https://redis.io/commands/xclaim/
node_modules/@redis/client/dist/lib/commands/XTRIM.d.ts:28:     * @see https://redis.io/commands/xtrim/
node_modules/@redis/client/dist/lib/commands/SDIFFSTORE.js:10:     * @see https://redis.io/commands/sdiffstore/
node_modules/@redis/client/dist/lib/commands/XINFO_GROUPS.d.ts:42:     * @see https://redis.io/commands/xinfo-groups/
node_modules/@redis/client/dist/lib/commands/HRANDFIELD_COUNT_WITHVALUES.js:11:     * @see https://redis.io/commands/hrandfield/
node_modules/@redis/client/dist/lib/commands/LPOS_COUNT.js:18:     * @see https://redis.io/commands/lpos/
node_modules/@redis/client/dist/lib/commands/HSCAN_NOVALUES.d.ts:8:     * @see https://redis.io/commands/hscan/
node_modules/@redis/client/dist/lib/commands/PEXPIRETIME.d.ts:10:     * @see https://redis.io/commands/pexpiretime/
node_modules/@redis/client/dist/lib/commands/generic-transformers.js:181:        // https://github.com/redis/node-redis/pull/2160
node_modules/@redis/client/dist/lib/commands/generic-transformers.js:354:    const redisArgs = parser.redisArgs;
node_modules/@redis/client/dist/lib/commands/generic-transformers.js:356:        redisArgs.preserve = parser.preserve;
node_modules/@redis/client/dist/lib/commands/generic-transformers.js:358:    return redisArgs;
node_modules/@redis/client/dist/lib/commands/INCR.js:9:     * @see https://redis.io/commands/incr/
node_modules/@redis/client/dist/lib/commands/TIME.js:11:     * @see https://redis.io/commands/time/
node_modules/@redis/client/dist/lib/commands/MODULE_LIST.d.ts:20:     * @see https://redis.io/commands/module-list/
node_modules/@redis/client/dist/lib/commands/PING.d.ts:11:     * @see https://redis.io/commands/ping/
node_modules/@redis/client/dist/lib/commands/SCRIPT_LOAD.js:11:     * @see https://redis.io/commands/script-load/
node_modules/@redis/client/dist/lib/commands/TYPE.d.ts:12:     * @see https://redis.io/commands/type/
node_modules/@redis/client/dist/lib/commands/VSIM.d.ts:20:     * @see https://redis.io/commands/vsim/
node_modules/@redis/client/dist/lib/commands/MEMORY_USAGE.js:11:     * @see https://redis.io/commands/memory-usage/
node_modules/@redis/client/dist/lib/commands/RPOPLPUSH.js:10:     * @see https://redis.io/commands/rpoplpush/
node_modules/@redis/client/dist/lib/commands/VADD.js:13:     * @see https://redis.io/commands/vadd/
node_modules/@redis/client/dist/lib/commands/OBJECT_FREQ.js:10:     * @see https://redis.io/commands/object-freq/
node_modules/@redis/client/dist/lib/commands/VDIM.d.ts:10:     * @see https://redis.io/commands/vdim/
node_modules/@redis/client/dist/lib/commands/HSCAN.d.ts:17:     * @see https://redis.io/commands/hscan/
node_modules/@redis/client/dist/lib/commands/XGROUP_CREATE.d.ts:27:     * @see https://redis.io/commands/xgroup-create/
node_modules/@redis/client/dist/lib/commands/READWRITE.d.ts:10:     * @see https://redis.io/commands/readwrite/
node_modules/@redis/client/dist/lib/commands/PUBSUB_SHARDNUMSUB.d.ts:11:     * @see https://redis.io/commands/pubsub-shardnumsub/
node_modules/@redis/client/dist/lib/commands/XGROUP_DESTROY.js:15:     * @see https://redis.io/commands/xgroup-destroy/
node_modules/@redis/client/dist/lib/commands/RENAME.d.ts:11:     * @see https://redis.io/commands/rename/
node_modules/@redis/client/dist/lib/commands/VEMB_RAW.js:34:     * @see https://redis.io/commands/vemb/
node_modules/@redis/client/dist/lib/commands/MODULE_UNLOAD.js:11:     * @see https://redis.io/commands/module-unload/
node_modules/@redis/client/dist/lib/commands/PFMERGE.d.ts:11:     * @see https://redis.io/commands/pfmerge/
node_modules/@redis/client/dist/lib/commands/ZCARD.d.ts:15:     * @see https://redis.io/commands/zcard/
node_modules/@redis/client/dist/lib/commands/RPUSH.d.ts:11:     * @see https://redis.io/commands/rpush/
node_modules/@redis/client/dist/lib/commands/MSETNX.js:11:     * @see https://redis.io/commands/msetnx/
node_modules/@redis/client/dist/lib/commands/LSET.d.ts:12:     * @see https://redis.io/commands/lset/
node_modules/@redis/client/dist/lib/commands/HSTRLEN.js:12:     * @see https://redis.io/commands/hstrlen/
node_modules/@redis/client/dist/lib/commands/SETBIT.js:12:     * @see https://redis.io/commands/setbit/
node_modules/@redis/client/dist/lib/commands/LPUSHX.d.ts:11:     * @see https://redis.io/commands/lpushx/
node_modules/@redis/client/dist/lib/commands/RPOP.d.ts:9:     * @see https://redis.io/commands/rpop/
node_modules/@redis/client/dist/lib/commands/HSETNX.d.ts:12:     * @see https://redis.io/commands/hsetnx/
node_modules/@redis/client/dist/lib/commands/LPUSHX.js:10:     * @see https://redis.io/commands/lpushx/
node_modules/@redis/client/dist/lib/commands/XACK.d.ts:14:     * @see https://redis.io/commands/xack/
node_modules/@redis/client/dist/lib/commands/PFADD.js:11:     * @see https://redis.io/commands/pfadd/
node_modules/@redis/client/dist/lib/commands/TIME.d.ts:11:     * @see https://redis.io/commands/time/
node_modules/@redis/client/dist/lib/commands/SMEMBERS.d.ts:11:     * @see https://redis.io/commands/smembers/
node_modules/@redis/client/dist/lib/commands/LREM.js:12:     * @see https://redis.io/commands/lrem/
node_modules/@redis/client/dist/lib/commands/LRANGE.d.ts:13:     * @see https://redis.io/commands/lrange/
node_modules/@redis/client/dist/lib/commands/VCARD.js:10:     * @see https://redis.io/commands/vcard/
node_modules/@redis/client/dist/lib/commands/SCARD.d.ts:11:     * @see https://redis.io/commands/scard/
node_modules/@redis/client/dist/lib/commands/INCRBY.js:10:     * @see https://redis.io/commands/incrby/
node_modules/@redis/client/dist/lib/commands/XREAD.d.ts:41:     * @see https://redis.io/commands/xread/
node_modules/@redis/client/dist/lib/commands/SINTER.d.ts:12:     * @see https://redis.io/commands/sinter/
node_modules/@redis/client/dist/lib/commands/XLEN.d.ts:15:     * @see https://redis.io/commands/xlen/
node_modules/@redis/client/dist/lib/commands/SREM.d.ts:13:     * @see https://redis.io/commands/srem/
node_modules/@redis/client/dist/lib/commands/SUNIONSTORE.js:12:     * @see https://redis.io/commands/sunionstore/
node_modules/@redis/client/dist/lib/commands/SADD.d.ts:11:     * @see https://redis.io/commands/sadd/
node_modules/@redis/client/dist/lib/commands/PUBSUB_CHANNELS.d.ts:11:     * @see https://redis.io/commands/pubsub-channels/
node_modules/@redis/client/dist/lib/commands/MEMORY_MALLOC-STATS.js:10:     * @see https://redis.io/commands/memory-malloc-stats/
node_modules/@redis/client/dist/lib/commands/SCRIPT_FLUSH.js:11:     * @see https://redis.io/commands/script-flush/
node_modules/@redis/client/dist/lib/commands/SPUBLISH.d.ts:11:     * @see https://redis.io/commands/spublish/
node_modules/@redis/client/dist/lib/commands/VDIM.js:10:     * @see https://redis.io/commands/vdim/
node_modules/@redis/client/dist/lib/commands/RPUSHX.d.ts:11:     * @see https://redis.io/commands/rpushx/
node_modules/@redis/client/dist/lib/commands/VLINKS.d.ts:11:     * @see https://redis.io/commands/vlinks/
node_modules/@redis/client/dist/lib/commands/SET.d.ts:49:     * @see https://redis.io/commands/set/
node_modules/@redis/client/dist/lib/commands/LATENCY_LATEST.js:10:     * @see https://redis.io/commands/latency-latest/
node_modules/@redis/client/dist/lib/commands/HPEXPIRETIME.js:11:     * @see https://redis.io/commands/hpexpiretime/
node_modules/@redis/client/dist/lib/commands/XREVRANGE.js:40:     * @see https://redis.io/commands/xrevrange/
node_modules/@redis/client/dist/lib/commands/VLINKS_WITHSCORES.d.ts:8:     * @see https://redis.io/commands/vlinks/
node_modules/@redis/client/dist/lib/commands/LINDEX.js:12:     * @see https://redis.io/commands/lindex/
node_modules/@redis/client/dist/lib/commands/MEMORY_STATS.js:11:     * @see https://redis.io/commands/memory-stats/
node_modules/@redis/client/dist/lib/commands/SCRIPT_EXISTS.d.ts:12:     * @see https://redis.io/commands/script-exists/
node_modules/@redis/client/dist/lib/commands/LPOP.js:9:     * @see https://redis.io/commands/lpop/
node_modules/@redis/client/dist/lib/commands/STRLEN.js:12:     * @see https://redis.io/commands/strlen/
node_modules/@redis/client/dist/lib/commands/MSET.d.ts:12:     * @see https://redis.io/commands/mset/
node_modules/@redis/client/dist/lib/commands/SCRIPT_LOAD.d.ts:11:     * @see https://redis.io/commands/script-load/
node_modules/@redis/client/dist/lib/commands/XLEN.js:15:     * @see https://redis.io/commands/xlen/
node_modules/@redis/client/dist/lib/commands/TTL.d.ts:11:     * @see https://redis.io/commands/ttl/
node_modules/@redis/client/dist/lib/commands/XINFO_STREAM.d.ts:70:     * @see https://redis.io/commands/xinfo-stream/
node_modules/@redis/client/dist/lib/commands/HSCAN_NOVALUES.js:13:     * @see https://redis.io/commands/hscan/
node_modules/@redis/client/dist/lib/commands/RESTORE-ASKING.js:10:     * @see https://redis.io/commands/restore-asking/
node_modules/@redis/client/dist/lib/commands/TOUCH.d.ts:12:     * @see https://redis.io/commands/touch/
node_modules/@redis/client/dist/lib/commands/VGETATTR.js:12:     * @see https://redis.io/commands/vgetattr/
node_modules/@redis/client/dist/lib/commands/SCRIPT_FLUSH.d.ts:11:     * @see https://redis.io/commands/script-flush/
node_modules/@redis/client/dist/lib/commands/XDEL.d.ts:16:     * @see https://redis.io/commands/xdel/
node_modules/@redis/client/dist/lib/commands/PEXPIRE.js:12:     * @see https://redis.io/commands/pexpire/
node_modules/@redis/client/dist/lib/commands/SPOP_COUNT.js:11:     * @see https://redis.io/commands/spop/
node_modules/@redis/client/dist/lib/commands/RESTORE-ASKING.d.ts:10:     * @see https://redis.io/commands/restore-asking/
node_modules/@redis/client/dist/lib/commands/LINSERT.js:13:     * @see https://redis.io/commands/linsert/
node_modules/@redis/client/dist/lib/commands/MEMORY_MALLOC-STATS.d.ts:10:     * @see https://redis.io/commands/memory-malloc-stats/
node_modules/@redis/client/dist/lib/commands/LCS.d.ts:11:     * @see https://redis.io/commands/lcs/
node_modules/@redis/client/dist/lib/commands/PEXPIREAT.js:13:     * @see https://redis.io/commands/pexpireat/
node_modules/@redis/client/dist/lib/commands/SDIFFSTORE.d.ts:11:     * @see https://redis.io/commands/sdiffstore/
node_modules/@redis/client/dist/lib/commands/XGROUP_SETID.js:14:     * @see https://redis.io/commands/xgroup-setid/
node_modules/@redis/client/dist/lib/commands/TTL.js:11:     * @see https://redis.io/commands/ttl/
node_modules/@redis/client/dist/lib/commands/VREM.d.ts:10:     * @see https://redis.io/commands/vrem/
node_modules/@redis/client/dist/lib/commands/STRLEN.d.ts:12:     * @see https://redis.io/commands/strlen/
node_modules/@redis/client/dist/lib/commands/LATENCY_DOCTOR.js:10:     * @see https://redis.io/commands/latency-doctor/
node_modules/@redis/client/dist/lib/commands/HRANDFIELD.js:10:     * @see https://redis.io/commands/hrandfield/
node_modules/@redis/client/dist/lib/commands/LATENCY_GRAPH.js:30:     * @see https://redis.io/commands/latency-graph/
node_modules/@redis/client/dist/lib/commands/PFCOUNT.d.ts:11:     * @see https://redis.io/commands/pfcount/
node_modules/@redis/client/dist/lib/commands/XREAD.js:36:     * @see https://redis.io/commands/xread/
node_modules/@redis/client/dist/lib/commands/SCRIPT_DEBUG.js:11:     * @see https://redis.io/commands/script-debug/
node_modules/@redis/client/dist/lib/commands/ZADD.js:17:     * @see https://redis.io/commands/zadd/
node_modules/@redis/client/dist/lib/commands/PUBSUB_CHANNELS.js:11:     * @see https://redis.io/commands/pubsub-channels/
node_modules/@redis/client/dist/lib/commands/LCS_IDX_WITHMATCHLEN.js:13:     * @see https://redis.io/commands/lcs/
node_modules/@redis/client/dist/lib/commands/MEMORY_DOCTOR.js:10:     * @see https://redis.io/commands/memory-doctor/
node_modules/@redis/client/dist/lib/commands/LATENCY_LATEST.d.ts:10:     * @see https://redis.io/commands/latency-latest/
node_modules/@redis/client/dist/lib/commands/REPLICAOF.js:12:     * @see https://redis.io/commands/replicaof/
node_modules/@redis/client/dist/lib/commands/XPENDING.d.ts:13:     * @see https://redis.io/commands/xpending/
node_modules/@redis/client/dist/lib/commands/SISMEMBER.d.ts:12:     * @see https://redis.io/commands/sismember/
node_modules/@redis/client/dist/lib/commands/VRANDMEMBER.js:11:     * @see https://redis.io/commands/vrandmember/
node_modules/@redis/client/dist/lib/commands/SAVE.js:10:     * @see https://redis.io/commands/save/
node_modules/@redis/client/dist/lib/commands/RPOP_COUNT.d.ts:10:     * @see https://redis.io/commands/rpop/
node_modules/@redis/client/dist/lib/commands/OBJECT_ENCODING.d.ts:10:     * @see https://redis.io/commands/object-encoding/
node_modules/@redis/client/dist/lib/commands/PUBSUB_SHARDCHANNELS.js:11:     * @see https://redis.io/commands/pubsub-shardchannels/
node_modules/@redis/client/dist/lib/commands/SCAN.d.ts:47:     * @see https://redis.io/commands/scan/
node_modules/@redis/client/dist/lib/commands/LMPOP.js:19:     * @see https://redis.io/commands/lmpop/
node_modules/@redis/client/dist/lib/commands/RESTORE.js:13:     * @see https://redis.io/commands/restore/
node_modules/@redis/client/dist/lib/commands/SSCAN.js:14:     * @see https://redis.io/commands/sscan/
node_modules/@redis/client/dist/lib/commands/LATENCY_HISTORY.js:11:     * @see https://redis.io/commands/latency-history/
node_modules/@redis/client/dist/lib/commands/SINTERSTORE.js:11:     * @see https://redis.io/commands/sinterstore/
node_modules/@redis/client/dist/lib/commands/SRANDMEMBER.js:10:     * @see https://redis.io/commands/srandmember/
node_modules/@redis/client/dist/lib/commands/VSETATTR.d.ts:11:     * @see https://redis.io/commands/vsetattr/
node_modules/@redis/client/dist/lib/commands/RESTORE.d.ts:27:     * @see https://redis.io/commands/restore/
node_modules/@redis/client/dist/lib/commands/SSCAN.d.ts:14:     * @see https://redis.io/commands/sscan/
node_modules/@redis/client/dist/lib/commands/XGROUP_CREATE.js:14:     * @see https://redis.io/commands/xgroup-create/
node_modules/@redis/client/dist/lib/commands/MOVE.d.ts:10:     * @see https://redis.io/commands/move/
node_modules/@redis/client/dist/lib/commands/XRANGE.js:31:     * @see https://redis.io/commands/xrange/
node_modules/@redis/client/dist/lib/commands/VSIM_WITHSCORES.js:13:     * @see https://redis.io/commands/vsim/
node_modules/@redis/client/dist/lib/commands/SETRANGE.d.ts:11:     * @see https://redis.io/commands/setrange/
node_modules/@redis/client/dist/lib/commands/XREVRANGE.d.ts:24:     * @see https://redis.io/commands/xrevrange/
node_modules/@redis/client/dist/lib/commands/VLINKS.js:11:     * @see https://redis.io/commands/vlinks/
node_modules/@redis/client/dist/lib/commands/HSET.js:11:     * @see https://redis.io/commands/hset/
node_modules/@redis/client/dist/lib/commands/LSET.js:12:     * @see https://redis.io/commands/lset/
node_modules/@redis/client/dist/lib/commands/ROLE.js:10:     * @see https://redis.io/commands/role/
node_modules/@redis/client/dist/lib/commands/XCLAIM.js:17:     * @see https://redis.io/commands/xclaim/
node_modules/@redis/client/dist/lib/commands/TYPE.js:12:     * @see https://redis.io/commands/type/
node_modules/@redis/client/dist/lib/commands/LLEN.d.ts:11:     * @see https://redis.io/commands/llen/
node_modules/@redis/client/dist/lib/commands/SETBIT.d.ts:13:     * @see https://redis.io/commands/setbit/
node_modules/@redis/client/dist/lib/commands/PUBSUB_NUMSUB.d.ts:12:     * @see https://redis.io/commands/pubsub-numsub/
node_modules/@redis/client/dist/lib/commands/PUBLISH.d.ts:13:     * @see https://redis.io/commands/publish/
node_modules/@redis/client/dist/lib/commands/PFMERGE.js:10:     * @see https://redis.io/commands/pfmerge/
node_modules/@redis/client/dist/lib/commands/PUBSUB_NUMPAT.d.ts:10:     * @see https://redis.io/commands/pubsub-numpat/
node_modules/@redis/client/dist/lib/commands/PTTL.d.ts:10:     * @see https://redis.io/commands/pttl/
node_modules/@redis/client/dist/lib/commands/PEXPIREAT.d.ts:12:     * @see https://redis.io/commands/pexpireat/
node_modules/@redis/client/dist/lib/commands/SETEX.d.ts:11:     * @see https://redis.io/commands/setex/
node_modules/@redis/client/dist/lib/commands/SUNION.d.ts:13:     * @see https://redis.io/commands/sunion/
node_modules/@redis/client/dist/lib/commands/SUNIONSTORE.d.ts:13:     * @see https://redis.io/commands/sunionstore/
node_modules/@redis/client/dist/lib/commands/XAUTOCLAIM_JUSTID.d.ts:9:     * @see https://redis.io/commands/xautoclaim/
node_modules/@redis/client/dist/lib/commands/RENAME.js:11:     * @see https://redis.io/commands/rename/
node_modules/@redis/client/dist/lib/commands/XADD_NOMKSTREAM.d.ts:12:     * @see https://redis.io/commands/xadd/
node_modules/@redis/client/dist/lib/commands/SAVE.d.ts:10:     * @see https://redis.io/commands/save/
node_modules/@redis/client/dist/lib/commands/XGROUP_CREATECONSUMER.d.ts:16:     * @see https://redis.io/commands/xgroup-createconsumer/
node_modules/@redis/client/dist/lib/commands/LATENCY_HISTORY.d.ts:12:     * @see https://redis.io/commands/latency-history/
node_modules/@redis/client/dist/lib/commands/SISMEMBER.js:12:     * @see https://redis.io/commands/sismember/
node_modules/@redis/client/dist/lib/commands/HRANDFIELD_COUNT.d.ts:11:     * @see https://redis.io/commands/hrandfield/
node_modules/@redis/client/dist/lib/commands/ZADD_INCR.js:17:     * @see https://redis.io/commands/zadd/
node_modules/@redis/client/dist/lib/commands/XGROUP_DELCONSUMER.d.ts:16:     * @see https://redis.io/commands/xgroup-delconsumer/
node_modules/@redis/client/dist/lib/commands/LCS_IDX.d.ts:33:     * @see https://redis.io/commands/lcs/
node_modules/@redis/client/dist/lib/commands/MOVE.js:10:     * @see https://redis.io/commands/move/
node_modules/@redis/client/dist/lib/commands/LMOVE.js:13:     * @see https://redis.io/commands/lmove/
node_modules/@redis/client/dist/lib/commands/LATENCY_DOCTOR.d.ts:10:     * @see https://redis.io/commands/latency-doctor/
node_modules/@redis/client/dist/lib/commands/SINTERSTORE.d.ts:12:     * @see https://redis.io/commands/sinterstore/
node_modules/@redis/client/dist/lib/commands/XAUTOCLAIM.d.ts:37:     * @see https://redis.io/commands/xautoclaim/
node_modules/@redis/client/dist/lib/commands/XAUTOCLAIM.js:17:     * @see https://redis.io/commands/xautoclaim/
node_modules/@redis/client/dist/lib/commands/VEMB.js:12:     * @see https://redis.io/commands/vemb/
node_modules/@redis/client/dist/lib/commands/SHUTDOWN.d.ts:25:     * @see https://redis.io/commands/shutdown/
node_modules/@redis/client/dist/lib/commands/SUNION.js:12:     * @see https://redis.io/commands/sunion/
node_modules/@redis/client/dist/lib/commands/SCAN.js:49:     * @see https://redis.io/commands/scan/
node_modules/@redis/client/dist/lib/commands/LINDEX.d.ts:12:     * @see https://redis.io/commands/lindex/
node_modules/@redis/client/dist/lib/commands/XRANGE.d.ts:31:     * @see https://redis.io/commands/xrange/
node_modules/@redis/client/dist/lib/commands/HRANDFIELD.d.ts:10:     * @see https://redis.io/commands/hrandfield/
node_modules/@redis/client/dist/lib/commands/XREADGROUP.d.ts:28:     * @see https://redis.io/commands/xreadgroup/
node_modules/@redis/client/dist/lib/commands/RPUSH.js:10:     * @see https://redis.io/commands/rpush/
node_modules/@redis/client/dist/lib/commands/XADD.js:49:     * @see https://redis.io/commands/xadd/
node_modules/@redis/client/dist/lib/commands/UNLINK.js:11:     * @see https://redis.io/commands/unlink/
node_modules/@redis/client/dist/lib/commands/TOUCH.js:11:     * @see https://redis.io/commands/touch/
node_modules/@redis/client/dist/lib/commands/RENAMENX.js:11:     * @see https://redis.io/commands/renamenx/
node_modules/@redis/client/dist/lib/commands/KEYS.js:11:     * @see https://redis.io/commands/keys/
node_modules/@redis/client/dist/lib/commands/HRANDFIELD_COUNT.js:11:     * @see https://redis.io/commands/hrandfield/
node_modules/@redis/client/dist/lib/commands/PFCOUNT.js:10:     * @see https://redis.io/commands/pfcount/
node_modules/@redis/client/dist/lib/commands/SCRIPT_KILL.js:10:     * @see https://redis.io/commands/script-kill/
node_modules/@redis/client/dist/lib/commands/VINFO.d.ts:36:     * @see https://redis.io/commands/vinfo/
node_modules/@redis/client/dist/lib/commands/SETNX.js:10:     * @see https://redis.io/commands/setnx/
node_modules/@redis/client/dist/lib/commands/SCRIPT_DEBUG.d.ts:11:     * @see https://redis.io/commands/script-debug/
node_modules/@redis/client/dist/lib/commands/INFO.js:11:     * @see https://redis.io/commands/info/
node_modules/@redis/client/dist/lib/commands/LPOP.d.ts:9:     * @see https://redis.io/commands/lpop/
node_modules/@redis/client/dist/lib/commands/SORT.d.ts:38:     * @see https://redis.io/commands/sort/
node_modules/@redis/client/dist/lib/commands/XACK.js:13:     * @see https://redis.io/commands/xack/
node_modules/@redis/client/dist/lib/commands/PSETEX.js:11:     * @see https://redis.io/commands/psetex/
node_modules/@redis/client/dist/lib/commands/OBJECT_FREQ.d.ts:10:     * @see https://redis.io/commands/object-freq/
node_modules/@redis/client/dist/lib/commands/RANDOMKEY.js:10:     * @see https://redis.io/commands/randomkey/
node_modules/@redis/client/dist/lib/commands/SMOVE.js:12:     * @see https://redis.io/commands/smove/
node_modules/@redis/client/dist/lib/commands/LOLWUT.d.ts:12:     * @see https://redis.io/commands/lolwut/
node_modules/@redis/client/dist/lib/commands/MSET.js:38:     * @see https://redis.io/commands/mset/
node_modules/@redis/client/dist/lib/commands/VLINKS_WITHSCORES.js:27:     * @see https://redis.io/commands/vlinks/
node_modules/@redis/client/dist/lib/commands/LCS_LEN.d.ts:8:     * @see https://redis.io/commands/lcs/
node_modules/@redis/client/dist/lib/commands/MEMORY_USAGE.d.ts:14:     * @see https://redis.io/commands/memory-usage/
node_modules/@redis/client/dist/lib/commands/OBJECT_IDLETIME.js:10:     * @see https://redis.io/commands/object-idletime/
node_modules/@redis/client/dist/lib/commands/VEMB.d.ts:11:     * @see https://redis.io/commands/vemb/
node_modules/@redis/client/dist/lib/commands/PSETEX.d.ts:11:     * @see https://redis.io/commands/psetex/
node_modules/@redis/client/dist/lib/commands/KEYS.d.ts:11:     * @see https://redis.io/commands/keys/
node_modules/@redis/client/dist/lib/commands/ZADD.d.ts:40:     * @see https://redis.io/commands/zadd/
node_modules/@redis/client/dist/lib/commands/MGET.js:11:     * @see https://redis.io/commands/mget/
node_modules/@redis/client/dist/lib/RESP/decoder.js:8:// https://github.com/redis/redis-specifications/blob/master/protocol/RESP3.md
node_modules/@redis/client/dist/lib/RESP/decoder.js:361:        // https://github.com/redis/redis-specifications/blob/master/protocol/RESP2.md#resp-bulk-strings
node_modules/@redis/client/dist/lib/RESP/decoder.js:519:        // https://github.com/redis/redis-specifications/blob/master/protocol/RESP2.md#resp-arrays
node_modules/@redis/client/dist/lib/authx/credentials-provider.d.ts:16:     * Provides initial credentials and subscribes to subsequent updates. This is used internally by the node-redis client
node_modules/@redis/client/dist/lib/authx/credentials-provider.d.ts:19:     * Note: The node-redis client manages the subscription lifecycle automatically. Users only need to implement
node_modules/@redis/client/dist/package.json:2:    "name": "@redis/client",
node_modules/@redis/client/dist/package.json:19:        "@redis/test-utils": "*",
node_modules/@redis/client/dist/package.json:28:        "url": "git://github.com/redis/node-redis.git"
node_modules/@redis/client/dist/package.json:31:        "url": "https://github.com/redis/node-redis/issues"
node_modules/@redis/client/dist/package.json:33:    "homepage": "https://github.com/redis/node-redis/tree/master/packages/client",
node_modules/@redis/client/dist/package.json:35:        "redis"
node_modules/@redis/search/package.json:2:  "name": "@redis/search",
node_modules/@redis/search/package.json:17:    "@redis/client": "^5.6.0"
node_modules/@redis/search/package.json:20:    "@redis/test-utils": "*"
node_modules/@redis/search/package.json:27:    "url": "git://github.com/redis/node-redis.git"
node_modules/@redis/search/package.json:30:    "url": "https://github.com/redis/node-redis/issues"
node_modules/@redis/search/package.json:32:  "homepage": "https://github.com/redis/node-redis/tree/master/packages/search",
node_modules/@redis/search/package.json:34:    "redis",
node_modules/@redis/search/README.md:1:# @redis/search
node_modules/@redis/search/README.md:3:This package provides support for the [RediSearch](https://redis.io/docs/interact/search-and-query/) module, which adds indexing and querying support for data stored in Redis Hashes or as JSON documents with the [RedisJSON](https://redis.io/docs/data-types/json/) module.
node_modules/@redis/search/README.md:5:Should be used with [`redis`/`@redis/client`](https://github.com/redis/node-redis).
node_modules/@redis/search/README.md:11:For complete examples, see [`search-hashes.js`](https://github.com/redis/node-redis/blob/master/examples/search-hashes.js) and [`search-json.js`](https://github.com/redis/node-redis/blob/master/examples/search-json.js) in the [examples folder](https://github.com/redis/node-redis/tree/master/examples).
node_modules/@redis/search/README.md:17:Before we can perform any searches, we need to tell RediSearch how to index our data, and which Redis keys to find that data in.  The [FT.CREATE](https://redis.io/commands/ft.create) command creates a RediSearch index. Here's how to use it to create an index we'll call `idx:animals` where we want to index hashes containing `name`, `species` and `age` fields, and whose key names in Redis begin with the prefix `noderedis:animals`:
node_modules/@redis/search/README.md:29:  PREFIX: 'noderedis:animals'
node_modules/@redis/search/README.md:33:See the [`FT.CREATE` documentation](https://redis.io/commands/ft.create/#description) for information about the different field types and additional options.
node_modules/@redis/search/README.md:37:Once we've created an index, and added some data to Redis hashes whose keys begin with the prefix `noderedis:animals`, we can start writing some search queries.  RediSearch supports a rich query syntax for full-text search, faceted search, aggregation and more.  Check out the [`FT.SEARCH` documentation](https://redis.io/commands/ft.search) and the [query syntax reference](https://redis.io/docs/interact/search-and-query/query) for more information.
node_modules/@redis/search/README.md:52:      id: 'noderedis:animals:4',
node_modules/@redis/search/README.md:60:      id: 'noderedis:animals:3',
node_modules/@redis/search/README.md:107:  PREFIX: 'noderedis:users'
node_modules/@redis/search/README.md:115:Now we have an index and some data stored as JSON documents in Redis (see the [JSON package documentation](https://github.com/redis/node-redis/tree/master/packages/json) for examples of how to store JSON), we can write some queries...
node_modules/@redis/search/README.md:117:We'll use the [RediSearch query language](https://redis.io/docs/interact/search-and-query/query) and [`FT.SEARCH`](https://redis.io/commands/ft.search) command.  Here's a query to find users under the age of 30:
node_modules/@redis/search/dist/lib/commands/EXPLAIN.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/EXPLAIN.d.ts:2:import { RedisArgument, SimpleStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/INFO.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/INFO.d.ts:2:import { RedisArgument } from "@redis/client";
node_modules/@redis/search/dist/lib/commands/INFO.d.ts:3:import { ArrayReply, BlobStringReply, DoubleReply, MapReply, NullReply, NumberReply, ReplyUnion, SimpleStringReply, TypeMapping } from "@redis/client/dist/lib/RESP/types";
node_modules/@redis/search/dist/lib/commands/INFO.d.ts:4:import { TuplesReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/index.d.ts:6:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:8:            readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:9:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:15:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:17:            readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:18:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:24:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, schema: import("./CREATE").RediSearchSchema) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:25:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/search/dist/lib/commands/index.d.ts:30:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, schema: import("./CREATE").RediSearchSchema) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:31:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/search/dist/lib/commands/index.d.ts:35:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("./AGGREGATE_WITHCURSOR").FtAggregateWithCursorOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:37:            readonly 2: (reply: [result: [total: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>, ...results: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>[]], cursor: import("@redis/client/dist/lib/RESP/types").NumberReply<number>]) => import("./AGGREGATE_WITHCURSOR").AggregateWithCursorReply;
node_modules/@redis/search/dist/lib/commands/index.d.ts:38:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/search/dist/lib/commands/index.d.ts:44:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("./AGGREGATE_WITHCURSOR").FtAggregateWithCursorOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:46:            readonly 2: (reply: [result: [total: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>, ...results: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>[]], cursor: import("@redis/client/dist/lib/RESP/types").NumberReply<number>]) => import("./AGGREGATE_WITHCURSOR").AggregateWithCursorReply;
node_modules/@redis/search/dist/lib/commands/index.d.ts:47:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/search/dist/lib/commands/index.d.ts:54:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("./AGGREGATE").FtAggregateOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:56:            readonly 2: (rawReply: [total: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>, ...results: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>[]], preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("./AGGREGATE").AggregateReply;
node_modules/@redis/search/dist/lib/commands/index.d.ts:57:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/search/dist/lib/commands/index.d.ts:64:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("./AGGREGATE").FtAggregateOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:66:            readonly 2: (rawReply: [total: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>, ...results: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>[]], preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("./AGGREGATE").AggregateReply;
node_modules/@redis/search/dist/lib/commands/index.d.ts:67:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/search/dist/lib/commands/index.d.ts:74:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, alias: import("@redis/client").RedisArgument, index: import("@redis/client").RedisArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:75:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/search/dist/lib/commands/index.d.ts:80:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, alias: import("@redis/client").RedisArgument, index: import("@redis/client").RedisArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:81:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/search/dist/lib/commands/index.d.ts:86:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, alias: import("@redis/client").RedisArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:87:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/search/dist/lib/commands/index.d.ts:92:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, alias: import("@redis/client").RedisArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:93:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/search/dist/lib/commands/index.d.ts:98:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, alias: import("@redis/client").RedisArgument, index: import("@redis/client").RedisArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:99:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/search/dist/lib/commands/index.d.ts:104:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, alias: import("@redis/client").RedisArgument, index: import("@redis/client").RedisArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:105:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/search/dist/lib/commands/index.d.ts:113:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, option: string) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:114:        readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").TuplesReply<[import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NullReply]>[]) => Record<string, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NullReply>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:122:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, option: string) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:123:        readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").TuplesReply<[import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NullReply]>[]) => Record<string, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NullReply>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:131:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, property: Buffer | (string & {}) | "a" | "b", value: import("@redis/client").RedisArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:132:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/search/dist/lib/commands/index.d.ts:140:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, property: Buffer | (string & {}) | "a" | "b", value: import("@redis/client").RedisArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:141:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/search/dist/lib/commands/index.d.ts:146:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, schema: import("./CREATE").RediSearchSchema, options?: import("./CREATE").CreateOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:147:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/search/dist/lib/commands/index.d.ts:152:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, schema: import("./CREATE").RediSearchSchema, options?: import("./CREATE").CreateOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:153:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/search/dist/lib/commands/index.d.ts:158:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, cursorId: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:159:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/search/dist/lib/commands/index.d.ts:164:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, cursorId: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:165:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/search/dist/lib/commands/index.d.ts:170:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, cursor: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>, options?: import("./CURSOR_READ").FtCursorReadOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:172:            readonly 2: (reply: [result: [total: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>, ...results: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>[]], cursor: import("@redis/client/dist/lib/RESP/types").NumberReply<number>]) => import("./AGGREGATE_WITHCURSOR").AggregateWithCursorReply;
node_modules/@redis/search/dist/lib/commands/index.d.ts:173:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/search/dist/lib/commands/index.d.ts:180:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, cursor: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>, options?: import("./CURSOR_READ").FtCursorReadOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:182:            readonly 2: (reply: [result: [total: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>, ...results: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>[]], cursor: import("@redis/client/dist/lib/RESP/types").NumberReply<number>]) => import("./AGGREGATE_WITHCURSOR").AggregateWithCursorReply;
node_modules/@redis/search/dist/lib/commands/index.d.ts:183:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/search/dist/lib/commands/index.d.ts:190:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, dictionary: import("@redis/client").RedisArgument, term: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:191:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:196:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, dictionary: import("@redis/client").RedisArgument, term: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:197:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:202:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, dictionary: import("@redis/client").RedisArgument, term: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:203:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:208:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, dictionary: import("@redis/client").RedisArgument, term: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:209:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:214:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, dictionary: import("@redis/client").RedisArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:216:            readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:217:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:223:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, dictionary: import("@redis/client").RedisArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:225:            readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:226:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:232:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, options?: import("./DROPINDEX").FtDropIndexOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:234:            readonly 2: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/search/dist/lib/commands/index.d.ts:235:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:241:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, options?: import("./DROPINDEX").FtDropIndexOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:243:            readonly 2: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/search/dist/lib/commands/index.d.ts:244:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:250:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("./EXPLAIN").FtExplainOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:251:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<string>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:256:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("./EXPLAIN").FtExplainOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:257:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<string>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:262:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("./EXPLAINCLI").FtExplainCLIOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:263:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:268:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("./EXPLAINCLI").FtExplainCLIOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:269:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:274:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:276:            readonly 2: (reply: any[], preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("./INFO").InfoReply;
node_modules/@redis/search/dist/lib/commands/index.d.ts:277:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/search/dist/lib/commands/index.d.ts:284:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:286:            readonly 2: (reply: any[], preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("./INFO").InfoReply;
node_modules/@redis/search/dist/lib/commands/index.d.ts:287:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/search/dist/lib/commands/index.d.ts:294:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: (import("./PROFILE_SEARCH").ProfileOptions & import("./SEARCH").FtSearchOptions) | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:296:            readonly 2: (reply: [import("./SEARCH").SearchRawReply, import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").ReplyUnion>]) => import("./PROFILE_SEARCH").ProfileReplyResp2;
node_modules/@redis/search/dist/lib/commands/index.d.ts:297:            readonly 3: (reply: import("@redis/client/dist/lib/RESP/types").ReplyUnion) => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/search/dist/lib/commands/index.d.ts:304:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: (import("./PROFILE_SEARCH").ProfileOptions & import("./SEARCH").FtSearchOptions) | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:306:            readonly 2: (reply: [import("./SEARCH").SearchRawReply, import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").ReplyUnion>]) => import("./PROFILE_SEARCH").ProfileReplyResp2;
node_modules/@redis/search/dist/lib/commands/index.d.ts:307:            readonly 3: (reply: import("@redis/client/dist/lib/RESP/types").ReplyUnion) => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/search/dist/lib/commands/index.d.ts:314:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: string, query: string, options?: (import("./PROFILE_SEARCH").ProfileOptions & import("./AGGREGATE").FtAggregateOptions) | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:316:            readonly 2: (reply: [[total: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>, ...results: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>[]], import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").ReplyUnion>]) => import("./PROFILE_SEARCH").ProfileReplyResp2;
node_modules/@redis/search/dist/lib/commands/index.d.ts:317:            readonly 3: (reply: import("@redis/client/dist/lib/RESP/types").ReplyUnion) => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/search/dist/lib/commands/index.d.ts:324:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: string, query: string, options?: (import("./PROFILE_SEARCH").ProfileOptions & import("./AGGREGATE").FtAggregateOptions) | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:326:            readonly 2: (reply: [[total: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>, ...results: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>[]], import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").ReplyUnion>]) => import("./PROFILE_SEARCH").ProfileReplyResp2;
node_modules/@redis/search/dist/lib/commands/index.d.ts:327:            readonly 3: (reply: import("@redis/client/dist/lib/RESP/types").ReplyUnion) => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/search/dist/lib/commands/index.d.ts:334:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("./SEARCH").FtSearchOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:337:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/search/dist/lib/commands/index.d.ts:344:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("./SEARCH").FtSearchOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:347:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/search/dist/lib/commands/index.d.ts:354:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("./SEARCH").FtSearchOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:357:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/search/dist/lib/commands/index.d.ts:364:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("./SEARCH").FtSearchOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:367:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/search/dist/lib/commands/index.d.ts:374:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("./SPELLCHECK").FtSpellCheckOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:383:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/search/dist/lib/commands/index.d.ts:390:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("./SPELLCHECK").FtSpellCheckOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:399:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/search/dist/lib/commands/index.d.ts:405:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, string: import("@redis/client").RedisArgument, score: number, options?: import("./SUGADD").FtSugAddOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:406:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:410:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, string: import("@redis/client").RedisArgument, score: number, options?: import("./SUGADD").FtSugAddOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:411:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:415:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, string: import("@redis/client").RedisArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:416:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:420:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, string: import("@redis/client").RedisArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:421:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:425:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("./SUGGET").FtSugGetOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:426:        readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[]) => {
node_modules/@redis/search/dist/lib/commands/index.d.ts:427:            suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:428:            payload: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:433:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("./SUGGET").FtSugGetOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:434:        readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[]) => {
node_modules/@redis/search/dist/lib/commands/index.d.ts:435:            suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:436:            payload: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:441:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("./SUGGET").FtSugGetOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:443:            readonly 2: (reply: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => {
node_modules/@redis/search/dist/lib/commands/index.d.ts:444:                suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:445:                score: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:446:                payload: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:448:            readonly 3: (reply: import("@redis/client/dist/lib/RESP/types").NullReply | (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>)[]) => {
node_modules/@redis/search/dist/lib/commands/index.d.ts:449:                suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:450:                score: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:451:                payload: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:457:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("./SUGGET").FtSugGetOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:459:            readonly 2: (reply: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => {
node_modules/@redis/search/dist/lib/commands/index.d.ts:460:                suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:461:                score: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:462:                payload: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:464:            readonly 3: (reply: import("@redis/client/dist/lib/RESP/types").NullReply | (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>)[]) => {
node_modules/@redis/search/dist/lib/commands/index.d.ts:465:                suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:466:                score: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:467:                payload: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:473:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("./SUGGET").FtSugGetOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:475:            readonly 2: (reply: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => {
node_modules/@redis/search/dist/lib/commands/index.d.ts:476:                suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:477:                score: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:479:            readonly 3: (reply: (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>)[]) => {
node_modules/@redis/search/dist/lib/commands/index.d.ts:480:                suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:481:                score: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:487:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("./SUGGET").FtSugGetOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:489:            readonly 2: (reply: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => {
node_modules/@redis/search/dist/lib/commands/index.d.ts:490:                suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:491:                score: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:493:            readonly 3: (reply: (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>)[]) => {
node_modules/@redis/search/dist/lib/commands/index.d.ts:494:                suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:495:                score: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:501:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("./SUGGET").FtSugGetOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:502:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>> | import("@redis/client/dist/lib/RESP/types").NullReply;
node_modules/@redis/search/dist/lib/commands/index.d.ts:506:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("./SUGGET").FtSugGetOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:507:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>> | import("@redis/client/dist/lib/RESP/types").NullReply;
node_modules/@redis/search/dist/lib/commands/index.d.ts:511:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:512:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:516:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:517:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:522:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:524:            readonly 2: (reply: (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>)[]) => Record<string, import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:525:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:531:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:533:            readonly 2: (reply: (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>)[]) => Record<string, import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:534:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:540:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, groupId: import("@redis/client").RedisArgument, terms: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./SYNUPDATE").FtSynUpdateOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:541:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/search/dist/lib/commands/index.d.ts:546:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, groupId: import("@redis/client").RedisArgument, terms: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./SYNUPDATE").FtSynUpdateOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:547:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/search/dist/lib/commands/index.d.ts:552:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, fieldName: import("@redis/client").RedisArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:554:            readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:555:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:561:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client").RedisArgument, fieldName: import("@redis/client").RedisArgument) => void;
node_modules/@redis/search/dist/lib/commands/index.d.ts:563:            readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/search/dist/lib/commands/index.d.ts:564:            readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/search/dist/lib/commands/ALIASADD.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/ALIASADD.d.ts:2:import { RedisArgument, SimpleStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/AGGREGATE.js:5:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/search/dist/lib/commands/AGGREGATE.js:55:                //  https://redis.io/docs/latest/commands/ft.aggregate/#return
node_modules/@redis/search/dist/lib/commands/SUGADD.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/SUGADD.d.ts:2:import { RedisArgument, NumberReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/SYNUPDATE.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/SYNUPDATE.d.ts:2:import { SimpleStringReply, RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/SYNUPDATE.d.ts:3:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/search/dist/lib/commands/SUGGET_WITHSCORES.d.ts:1:import { NullReply, ArrayReply, BlobStringReply, DoubleReply, UnwrapReply, TypeMapping } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/SUGGET_WITHSCORES.d.ts:16:    readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, prefix: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./SUGGET").FtSugGetOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/PROFILE_AGGREGATE.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/PROFILE_AGGREGATE.d.ts:2:import { ReplyUnion, UnwrapReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/PROFILE_AGGREGATE.d.ts:19:        readonly 2: (reply: [[total: UnwrapReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>, ...results: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>[]], import("@redis/client/dist/lib/RESP/types").ArrayReply<ReplyUnion>]) => ProfileReplyResp2;
node_modules/@redis/search/dist/lib/commands/EXPLAINCLI.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/EXPLAINCLI.d.ts:2:import { RedisArgument, ArrayReply, BlobStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/TAGVALS.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/TAGVALS.d.ts:2:import { RedisArgument, ArrayReply, SetReply, BlobStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/AGGREGATE.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/AGGREGATE.d.ts:2:import { ArrayReply, BlobStringReply, MapReply, NumberReply, RedisArgument, ReplyUnion, TypeMapping, UnwrapReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/ALIASUPDATE.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/ALIASUPDATE.d.ts:2:import { SimpleStringReply, RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/CURSOR_DEL.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/CURSOR_DEL.d.ts:2:import { SimpleStringReply, RedisArgument, NumberReply, UnwrapReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/CONFIG_GET.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/CONFIG_GET.d.ts:2:import { ArrayReply, TuplesReply, BlobStringReply, NullReply, UnwrapReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/SUGLEN.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/SUGLEN.d.ts:2:import { RedisArgument, NumberReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/ALTER.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/ALTER.d.ts:2:import { RedisArgument, SimpleStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/SUGGET.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/SUGGET.d.ts:2:import { NullReply, ArrayReply, BlobStringReply, RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/PROFILE_SEARCH.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/PROFILE_SEARCH.d.ts:2:import { ArrayReply, RedisArgument, ReplyUnion, TuplesReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/SUGDEL.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/SUGDEL.d.ts:2:import { RedisArgument, NumberReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/SEARCH.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/SEARCH.d.ts:2:import { RedisArgument, ReplyUnion } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/SEARCH.d.ts:3:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/search/dist/lib/commands/SEARCH.d.ts:51:     * @param query - The text query to search. For syntax, see https://redis.io/docs/stack/search/reference/query_syntax
node_modules/@redis/search/dist/lib/commands/CREATE.js:4:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/search/dist/lib/commands/SUGGET_WITHSCORES.js:6:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/search/dist/lib/commands/_LIST.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/_LIST.d.ts:2:import { ArrayReply, SetReply, BlobStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/SPELLCHECK.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/SPELLCHECK.d.ts:2:import { RedisArgument, ReplyUnion } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/DROPINDEX.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/DROPINDEX.d.ts:2:import { RedisArgument, SimpleStringReply, NumberReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/CONFIG_SET.d.ts:2:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/CONFIG_SET.d.ts:3:import { RedisArgument, SimpleStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/SEARCH.js:4:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/search/dist/lib/commands/SEARCH.js:103:     * @param query - The text query to search. For syntax, see https://redis.io/docs/stack/search/reference/query_syntax
node_modules/@redis/search/dist/lib/commands/CREATE.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/CREATE.d.ts:2:import { RedisArgument, SimpleStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/CREATE.d.ts:3:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/search/dist/lib/commands/SUGGET_WITHSCORES_WITHPAYLOADS.js:6:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/search/dist/lib/commands/SUGGET_WITHPAYLOADS.js:6:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/search/dist/lib/commands/DICTADD.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/DICTADD.d.ts:2:import { RedisArgument, NumberReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/DICTADD.d.ts:3:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/search/dist/lib/commands/CURSOR_READ.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/CURSOR_READ.d.ts:2:import { RedisArgument, NumberReply, UnwrapReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/CURSOR_READ.d.ts:19:        readonly 2: (reply: [result: [total: UnwrapReply<NumberReply<number>>, ...results: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>[]], cursor: NumberReply<number>]) => import("./AGGREGATE_WITHCURSOR").AggregateWithCursorReply;
node_modules/@redis/search/dist/lib/commands/CURSOR_READ.d.ts:20:        readonly 3: () => import("@redis/client/dist/lib/RESP/types").ReplyUnion;
node_modules/@redis/search/dist/lib/commands/ALIASDEL.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/ALIASDEL.d.ts:2:import { RedisArgument, SimpleStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/DICTDEL.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/DICTDEL.d.ts:2:import { RedisArgument, NumberReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/DICTDEL.d.ts:3:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/search/dist/lib/commands/SYNDUMP.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/SYNDUMP.d.ts:2:import { RedisArgument, MapReply, BlobStringReply, ArrayReply, UnwrapReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/AGGREGATE_WITHCURSOR.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/AGGREGATE_WITHCURSOR.d.ts:2:import { RedisArgument, ReplyUnion, NumberReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/DICTDUMP.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/search/dist/lib/commands/DICTDUMP.d.ts:2:import { RedisArgument, ArrayReply, SetReply, BlobStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/SUGGET_WITHPAYLOADS.d.ts:1:import { NullReply, ArrayReply, BlobStringReply, UnwrapReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/SUGGET_WITHPAYLOADS.d.ts:12:    readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, prefix: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./SUGGET").FtSugGetOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/SEARCH_NOCONTENT.d.ts:1:import { ReplyUnion } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/SEARCH_NOCONTENT.d.ts:14:    readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, index: import("@redis/client/dist/lib/RESP/types").RedisArgument, query: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./SEARCH").FtSearchOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/SUGGET_WITHSCORES_WITHPAYLOADS.d.ts:1:import { NullReply, ArrayReply, BlobStringReply, DoubleReply, UnwrapReply, TypeMapping } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/search/dist/lib/commands/SUGGET_WITHSCORES_WITHPAYLOADS.d.ts:17:    readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, prefix: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./SUGGET").FtSugGetOptions | undefined) => void;
node_modules/@redis/search/dist/lib/commands/INFO.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/bloom/package.json:2:  "name": "@redis/bloom",
node_modules/@redis/bloom/package.json:16:    "@redis/client": "^5.6.0"
node_modules/@redis/bloom/package.json:19:    "@redis/test-utils": "*"
node_modules/@redis/bloom/package.json:26:    "url": "git://github.com/redis/node-redis.git"
node_modules/@redis/bloom/package.json:29:    "url": "https://github.com/redis/node-redis/issues"
node_modules/@redis/bloom/package.json:31:  "homepage": "https://github.com/redis/node-redis/tree/master/packages/bloom",
node_modules/@redis/bloom/package.json:33:    "redis",
node_modules/@redis/bloom/README.md:1:# @redis/bloom
node_modules/@redis/bloom/README.md:3:This package provides support for the [RedisBloom](https://redis.io/docs/data-types/probabilistic/) module, which adds additional probabilistic data structures to Redis.
node_modules/@redis/bloom/README.md:5:Should be used with [`redis`/`@redis/client`](https://github.com/redis/node-redis).
node_modules/@redis/bloom/README.md:17:For some examples, see [`bloom-filter.js`](https://github.com/redis/node-redis/tree/master/examples/bloom-filter.js), [`cuckoo-filter.js`](https://github.com/redis/node-redis/tree/master/examples/cuckoo-filter.js), [`count-min-sketch.js`](https://github.com/redis/node-redis/tree/master/examples/count-min-sketch.js) and [`topk.js`](https://github.com/redis/node-redis/tree/master/examples/topk.js) in the [examples folder](https://github.com/redis/node-redis/tree/master/examples).
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:5:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:7:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:8:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:13:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:15:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:16:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:21:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:22:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:26:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:27:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:31:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:33:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:34:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:39:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:41:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:42:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:47:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:49:                readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Capacity">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Size">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of filters">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of items inserted">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Expansion rate">, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("./bloom/INFO").BfInfoReplyMap;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:55:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:57:                readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Capacity">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Size">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of filters">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of items inserted">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Expansion rate">, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("./bloom/INFO").BfInfoReplyMap;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:63:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./bloom/INSERT").BfInsertOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:65:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:66:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:71:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./bloom/INSERT").BfInsertOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:73:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:74:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:79:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, iterator: number, chunk: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:80:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:84:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, iterator: number, chunk: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:85:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:89:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:91:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:92:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:97:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:99:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:100:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:105:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:107:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:108:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:113:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:115:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:116:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:121:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, errorRate: number, capacity: number, options?: import("./bloom/RESERVE").BfReserveOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:122:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:126:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, errorRate: number, capacity: number, options?: import("./bloom/RESERVE").BfReserveOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:127:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:131:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, iterator: number) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:132:            readonly transformReply: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]) => {
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:133:                iterator: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:134:                chunk: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:139:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, iterator: number) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:140:            readonly transformReply: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]) => {
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:141:                iterator: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:142:                chunk: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:149:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("./count-min-sketch/INCRBY").BfIncrByItem | import("./count-min-sketch/INCRBY").BfIncrByItem[]) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:150:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:154:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("./count-min-sketch/INCRBY").BfIncrByItem | import("./count-min-sketch/INCRBY").BfIncrByItem[]) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:155:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:159:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:161:                readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"width">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"depth">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"count">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("./count-min-sketch/INFO").CmsInfoReply;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:167:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:169:                readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"width">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"depth">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"count">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("./count-min-sketch/INFO").CmsInfoReply;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:175:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, width: number, depth: number) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:176:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:180:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, width: number, depth: number) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:181:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:185:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, error: number, probability: number) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:186:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:190:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, error: number, probability: number) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:191:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:195:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, destination: import("@redis/client").RedisArgument, source: import("./count-min-sketch/MERGE").BfMergeSketches) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:196:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:200:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, destination: import("@redis/client").RedisArgument, source: import("./count-min-sketch/MERGE").BfMergeSketches) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:201:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:205:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:206:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:210:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:211:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:217:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:219:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:220:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:225:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:227:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:228:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:233:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:235:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:236:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:241:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:243:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:244:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:249:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:250:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:254:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:255:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:259:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:261:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:262:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:267:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:269:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:270:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:275:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:277:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:278:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:283:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:285:                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:286:                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:291:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:293:                readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Size">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of buckets">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of filters">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of items inserted">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of items deleted">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Bucket size">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Expansion rate">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Max iterations">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("./cuckoo/INFO").CfInfoReplyMap;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:299:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:301:                readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Size">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of buckets">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of filters">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of items inserted">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of items deleted">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Bucket size">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Expansion rate">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Max iterations">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("./cuckoo/INFO").CfInfoReplyMap;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:307:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./cuckoo/INSERT").CfInsertOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:309:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:310:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:315:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./cuckoo/INSERT").CfInsertOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:317:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:318:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:323:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./cuckoo/INSERT").CfInsertOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:325:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:326:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:331:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./cuckoo/INSERT").CfInsertOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:333:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:334:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:339:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, iterator: number, chunk: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:340:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:344:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, iterator: number, chunk: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:345:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:349:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, capacity: number, options?: import("./cuckoo/RESERVE").CfReserveOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:350:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:354:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, capacity: number, options?: import("./cuckoo/RESERVE").CfReserveOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:355:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:359:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, iterator: number) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:360:            readonly transformReply: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]) => {
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:361:                iterator: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:362:                chunk: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:367:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, iterator: number) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:368:            readonly transformReply: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]) => {
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:369:                iterator: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:370:                chunk: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:377:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, values: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:378:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:382:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, values: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:383:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:387:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, ranks: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:389:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:390:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:395:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, ranks: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:397:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:398:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:403:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, ranks: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:405:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:406:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:411:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, ranks: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:413:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:414:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:419:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, values: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:421:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:422:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:427:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, values: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:429:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:430:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:435:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("./t-digest/CREATE").TDigestCreateOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:436:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:440:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, options?: import("./t-digest/CREATE").TDigestCreateOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:441:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:445:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:447:                readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Compression">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Capacity">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Merged nodes">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Unmerged nodes">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Merged weight">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Unmerged weight">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Observations">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Total compressions">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Memory usage">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("./t-digest/INFO").TdInfoReplyMap;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:453:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:455:                readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Compression">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Capacity">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Merged nodes">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Unmerged nodes">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Merged weight">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Unmerged weight">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Observations">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Total compressions">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Memory usage">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("./t-digest/INFO").TdInfoReplyMap;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:461:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:463:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:464:                3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:469:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:471:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:472:                3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:477:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, destination: import("@redis/client").RedisArgument, source: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./t-digest/MERGE").TDigestMergeOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:478:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:482:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, destination: import("@redis/client").RedisArgument, source: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./t-digest/MERGE").TDigestMergeOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:483:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:487:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:489:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:490:                3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:495:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:497:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:498:                3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:503:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, quantiles: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:505:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:506:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:511:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, quantiles: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:513:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:514:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:519:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, values: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:520:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:524:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, values: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:525:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:529:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:530:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:534:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:535:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:539:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, values: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:540:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:544:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, values: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:545:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:549:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, lowCutPercentile: number, highCutPercentile: number) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:551:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:552:                3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:557:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, lowCutPercentile: number, highCutPercentile: number) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:559:                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:560:                3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:567:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:568:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:572:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:573:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:577:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:578:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:582:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:583:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:587:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("./top-k/INCRBY").TopKIncrByItem | import("./top-k/INCRBY").TopKIncrByItem[]) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:588:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").SimpleStringReply<string>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:592:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("./top-k/INCRBY").TopKIncrByItem | import("./top-k/INCRBY").TopKIncrByItem[]) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:593:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").SimpleStringReply<string>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:597:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:599:                readonly 2: (reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"k">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"width">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"depth">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"decay">, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("./top-k/INFO").TopKInfoReplyMap;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:605:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:607:                readonly 2: (reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"k">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"width">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"depth">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"decay">, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], preserve?: any, typeMapping?: import("@redis/client").TypeMapping | undefined) => import("./top-k/INFO").TopKInfoReplyMap;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:613:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:614:            readonly transformReply: (this: void, rawReply: (import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>)[]) => {
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:615:                item: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:616:                count: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:621:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:622:            readonly transformReply: (this: void, rawReply: (import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>)[]) => {
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:623:                item: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:624:                count: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:629:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:630:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:634:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:635:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:639:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:641:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:642:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:647:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:649:                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:650:                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:655:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, topK: number, options?: import("./top-k/RESERVE").TopKReserveOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:656:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:660:            readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client").RedisArgument, topK: number, options?: import("./top-k/RESERVE").TopKReserveOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/index.d.ts:661:            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/ADD.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/cuckoo/ADD.d.ts:2:import { RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/cuckoo/ADD.d.ts:13:        2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/ADD.d.ts:14:        3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/INFO.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/cuckoo/INFO.d.ts:2:import { RedisArgument, NumberReply, TuplesToMapReply, SimpleStringReply, TypeMapping } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:4:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, item: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:6:            2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:7:            3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:12:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, item: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:14:            2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:15:            3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:20:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, item: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:22:            2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:23:            3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:28:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, item: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:30:            2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:31:            3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:36:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, item: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:37:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:41:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, item: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:42:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:46:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, item: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:48:            2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:49:            3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:54:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, item: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:56:            2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:57:            3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:62:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, item: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:64:            2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:65:            3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:70:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, item: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:72:            2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:73:            3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:78:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:80:            readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Size">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of buckets">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of filters">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of items inserted">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of items deleted">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Bucket size">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Expansion rate">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Max iterations">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("./INFO").CfInfoReplyMap;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:86:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:88:            readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Size">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of buckets">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of filters">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of items inserted">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of items deleted">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Bucket size">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Expansion rate">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Max iterations">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("./INFO").CfInfoReplyMap;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:94:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./INSERT").CfInsertOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:96:            2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:97:            3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:102:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./INSERT").CfInsertOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:104:            2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:105:            3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:110:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./INSERT").CfInsertOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:112:            2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:113:            3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:118:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./INSERT").CfInsertOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:120:            2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:121:            3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:126:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, iterator: number, chunk: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:127:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:131:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, iterator: number, chunk: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:132:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:136:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, capacity: number, options?: import("./RESERVE").CfReserveOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:137:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:141:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, capacity: number, options?: import("./RESERVE").CfReserveOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:142:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:146:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, iterator: number) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:147:        readonly transformReply: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]) => {
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:148:            iterator: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:149:            chunk: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:154:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, iterator: number) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:155:        readonly transformReply: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]) => {
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:156:            iterator: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/index.d.ts:157:            chunk: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/ADDNX.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/bloom/dist/lib/commands/cuckoo/COUNT.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/cuckoo/COUNT.d.ts:2:import { RedisArgument, NumberReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/cuckoo/INSERT.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/cuckoo/INSERT.d.ts:2:import { RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/cuckoo/INSERT.d.ts:3:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/bloom/dist/lib/commands/cuckoo/INSERT.d.ts:22:        2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/cuckoo/INSERT.d.ts:23:        3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/EXISTS.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/bloom/dist/lib/commands/cuckoo/INSERT.js:4:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/bloom/dist/lib/commands/cuckoo/DEL.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/cuckoo/DEL.d.ts:2:import { RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/cuckoo/DEL.d.ts:13:        2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/DEL.d.ts:14:        3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/ADD.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/bloom/dist/lib/commands/cuckoo/RESERVE.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/cuckoo/RESERVE.d.ts:2:import { RedisArgument, SimpleStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/cuckoo/LOADCHUNK.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/cuckoo/LOADCHUNK.d.ts:2:import { SimpleStringReply, RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/cuckoo/INSERTNX.d.ts:12:    readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./INSERT").CfInsertOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/INSERTNX.d.ts:14:        2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/cuckoo/INSERTNX.d.ts:15:        3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/SCANDUMP.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/cuckoo/SCANDUMP.d.ts:2:import { RedisArgument, NumberReply, BlobStringReply, NullReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/cuckoo/DEL.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/bloom/dist/lib/commands/cuckoo/ADDNX.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/cuckoo/ADDNX.d.ts:2:import { RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/cuckoo/ADDNX.d.ts:13:        2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/ADDNX.d.ts:14:        3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/EXISTS.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/cuckoo/EXISTS.d.ts:2:import { RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/cuckoo/EXISTS.d.ts:13:        2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/cuckoo/EXISTS.d.ts:14:        3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/top-k/ADD.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/top-k/ADD.d.ts:2:import { RedisArgument, ArrayReply, BlobStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/top-k/ADD.d.ts:3:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/bloom/dist/lib/commands/top-k/INFO.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/top-k/INFO.d.ts:2:import { RedisArgument, TuplesToMapReply, NumberReply, DoubleReply, SimpleStringReply, TypeMapping } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/top-k/INFO.d.ts:30:        readonly 2: (reply: [SimpleStringReply<"k">, NumberReply<number>, SimpleStringReply<"width">, NumberReply<number>, SimpleStringReply<"depth">, NumberReply<number>, SimpleStringReply<"decay">, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], preserve?: any, typeMapping?: TypeMapping) => TopKInfoReplyMap;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:4:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:5:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:9:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:10:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:14:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:15:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:19:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:20:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:24:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("./INCRBY").TopKIncrByItem | import("./INCRBY").TopKIncrByItem[]) => void;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:25:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").SimpleStringReply<string>>;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:29:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("./INCRBY").TopKIncrByItem | import("./INCRBY").TopKIncrByItem[]) => void;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:30:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").SimpleStringReply<string>>;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:34:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:36:            readonly 2: (reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"k">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"width">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"depth">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"decay">, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("./INFO").TopKInfoReplyMap;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:42:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:44:            readonly 2: (reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"k">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"width">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"depth">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"decay">, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("./INFO").TopKInfoReplyMap;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:50:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:51:        readonly transformReply: (this: void, rawReply: (import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>)[]) => {
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:52:            item: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:53:            count: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:58:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:59:        readonly transformReply: (this: void, rawReply: (import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>)[]) => {
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:60:            item: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:61:            count: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:66:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:67:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:71:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:72:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:76:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:78:            2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:79:            3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:84:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:86:            2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:87:            3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:92:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, topK: number, options?: import("./RESERVE").TopKReserveOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:93:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:97:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, topK: number, options?: import("./RESERVE").TopKReserveOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/top-k/index.d.ts:98:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/top-k/COUNT.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/top-k/COUNT.d.ts:2:import { RedisArgument, ArrayReply, NumberReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/top-k/COUNT.d.ts:3:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/bloom/dist/lib/commands/top-k/INCRBY.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/top-k/INCRBY.d.ts:2:import { RedisArgument, ArrayReply, SimpleStringReply, NullReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/top-k/QUERY.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/top-k/QUERY.d.ts:2:import { RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/top-k/QUERY.d.ts:3:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/bloom/dist/lib/commands/top-k/QUERY.d.ts:14:        2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/top-k/QUERY.d.ts:15:        3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/top-k/LIST.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/top-k/LIST.d.ts:2:import { RedisArgument, ArrayReply, BlobStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/top-k/RESERVE.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/top-k/RESERVE.d.ts:2:import { SimpleStringReply, RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/top-k/LIST_WITHCOUNT.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/top-k/LIST_WITHCOUNT.d.ts:2:import { RedisArgument, ArrayReply, BlobStringReply, NumberReply, UnwrapReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/top-k/QUERY.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/bloom/dist/lib/commands/top-k/INFO.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/INFO.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/INFO.d.ts:2:import { RedisArgument, TuplesToMapReply, NumberReply, SimpleStringReply, TypeMapping } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:4:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("./INCRBY").BfIncrByItem | import("./INCRBY").BfIncrByItem[]) => void;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:5:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:9:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("./INCRBY").BfIncrByItem | import("./INCRBY").BfIncrByItem[]) => void;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:10:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:14:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:16:            readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"width">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"depth">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"count">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("./INFO").CmsInfoReply;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:22:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:24:            readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"width">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"depth">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"count">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("./INFO").CmsInfoReply;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:30:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, width: number, depth: number) => void;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:31:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:35:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, width: number, depth: number) => void;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:36:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:40:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, error: number, probability: number) => void;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:41:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:45:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, error: number, probability: number) => void;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:46:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:50:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, destination: import("@redis/client/dist/lib/RESP/types").RedisArgument, source: import("./MERGE").BfMergeSketches) => void;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:51:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:55:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, destination: import("@redis/client/dist/lib/RESP/types").RedisArgument, source: import("./MERGE").BfMergeSketches) => void;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:56:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:60:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:61:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:65:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/index.d.ts:66:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/INCRBY.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/INCRBY.d.ts:2:import { RedisArgument, ArrayReply, NumberReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/QUERY.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/QUERY.d.ts:2:import { ArrayReply, NumberReply, RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/QUERY.d.ts:3:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/INITBYPROB.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/INITBYPROB.d.ts:2:import { RedisArgument, SimpleStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/MERGE.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/MERGE.d.ts:2:import { RedisArgument, SimpleStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/INITBYDIM.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/count-min-sketch/INITBYDIM.d.ts:2:import { RedisArgument, SimpleStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/t-digest/ADD.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/t-digest/ADD.d.ts:2:import { SimpleStringReply, RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/t-digest/INFO.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/t-digest/INFO.d.ts:2:import { RedisArgument, NumberReply, TuplesToMapReply, SimpleStringReply, TypeMapping } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:4:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, values: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:5:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:9:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, values: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:10:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:14:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, ranks: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:16:            2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:17:            3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:22:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, ranks: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:24:            2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:25:            3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:30:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, ranks: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:32:            2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:33:            3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:38:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, ranks: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:40:            2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:41:            3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:46:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, values: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:48:            2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:49:            3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:54:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, values: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:56:            2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:57:            3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:62:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./CREATE").TDigestCreateOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:63:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:67:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, options?: import("./CREATE").TDigestCreateOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:68:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:72:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:74:            readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Compression">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Capacity">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Merged nodes">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Unmerged nodes">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Merged weight">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Unmerged weight">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Observations">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Total compressions">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Memory usage">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("./INFO").TdInfoReplyMap;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:80:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:82:            readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Compression">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Capacity">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Merged nodes">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Unmerged nodes">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Merged weight">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Unmerged weight">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Observations">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Total compressions">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Memory usage">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("./INFO").TdInfoReplyMap;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:88:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:90:            2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:91:            3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:96:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:98:            2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:99:            3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:104:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, destination: import("@redis/client/dist/lib/RESP/types").RedisArgument, source: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./MERGE").TDigestMergeOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:105:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:109:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, destination: import("@redis/client/dist/lib/RESP/types").RedisArgument, source: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./MERGE").TDigestMergeOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:110:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:114:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:116:            2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:117:            3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:122:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:124:            2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:125:            3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:130:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, quantiles: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:132:            2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:133:            3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:138:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, quantiles: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:140:            2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:141:            3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:146:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, values: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:147:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:151:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, values: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:152:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:156:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:157:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:161:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:162:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:166:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, values: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:167:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:171:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, values: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:172:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:176:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, lowCutPercentile: number, highCutPercentile: number) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:178:            2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:179:            3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:184:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, lowCutPercentile: number, highCutPercentile: number) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:186:            2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/index.d.ts:187:            3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/QUANTILE.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/bloom/dist/lib/commands/t-digest/RANK.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/t-digest/RANK.d.ts:2:import { RedisArgument, ArrayReply, NumberReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/t-digest/MAX.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/t-digest/MAX.d.ts:2:import { RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/t-digest/MAX.d.ts:12:        2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/MAX.d.ts:13:        3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/BYREVRANK.d.ts:9:    readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, ranks: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/BYREVRANK.d.ts:11:        2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/@redis/bloom/dist/lib/commands/t-digest/BYREVRANK.d.ts:12:        3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/BYRANK.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/t-digest/BYRANK.d.ts:2:import { RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/t-digest/BYRANK.d.ts:14:        2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/@redis/bloom/dist/lib/commands/t-digest/BYRANK.d.ts:15:        3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/BYRANK.js:4:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/bloom/dist/lib/commands/t-digest/CDF.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/bloom/dist/lib/commands/t-digest/TRIMMED_MEAN.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/bloom/dist/lib/commands/t-digest/MIN.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/bloom/dist/lib/commands/t-digest/MERGE.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/t-digest/MERGE.d.ts:2:import { RedisArgument, SimpleStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/t-digest/MERGE.d.ts:3:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/bloom/dist/lib/commands/t-digest/CREATE.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/t-digest/CREATE.d.ts:2:import { RedisArgument, SimpleStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/t-digest/MAX.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/bloom/dist/lib/commands/t-digest/QUANTILE.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/t-digest/QUANTILE.d.ts:2:import { RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/t-digest/QUANTILE.d.ts:13:        2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/@redis/bloom/dist/lib/commands/t-digest/QUANTILE.d.ts:14:        3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/TRIMMED_MEAN.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/t-digest/TRIMMED_MEAN.d.ts:2:import { RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/t-digest/TRIMMED_MEAN.d.ts:14:        2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/TRIMMED_MEAN.d.ts:15:        3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/CDF.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/t-digest/CDF.d.ts:2:import { RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/t-digest/CDF.d.ts:13:        2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[], preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>[];
node_modules/@redis/bloom/dist/lib/commands/t-digest/CDF.d.ts:14:        3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/REVRANK.d.ts:9:    readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, values: number[]) => void;
node_modules/@redis/bloom/dist/lib/commands/t-digest/REVRANK.d.ts:10:    readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/MIN.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/t-digest/MIN.d.ts:2:import { RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/t-digest/MIN.d.ts:12:        2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, preserve?: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/MIN.d.ts:13:        3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
node_modules/@redis/bloom/dist/lib/commands/t-digest/RESET.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/t-digest/RESET.d.ts:2:import { RedisArgument, SimpleStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/bloom/ADD.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/bloom/ADD.d.ts:2:import { RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/bloom/ADD.d.ts:13:        2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/bloom/ADD.d.ts:14:        3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/bloom/INFO.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/bloom/INFO.d.ts:2:import { RedisArgument, NullReply, NumberReply, TuplesToMapReply, SimpleStringReply, TypeMapping } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:5:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, item: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:7:            2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:8:            3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:13:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, item: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:15:            2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:16:            3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:21:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:22:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:26:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:27:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:31:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, item: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:33:            2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:34:            3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:39:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, item: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:41:            2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:42:            3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:47:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:49:            readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Capacity">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Size">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of filters">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of items inserted">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Expansion rate">, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("./INFO").BfInfoReplyMap;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:55:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:57:            readonly 2: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Capacity">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Size">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of filters">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Number of items inserted">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"Expansion rate">, import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").NumberReply<number>], _: any, typeMapping?: import("@redis/client/dist/lib/RESP/types").TypeMapping | undefined) => import("./INFO").BfInfoReplyMap;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:63:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./INSERT").BfInsertOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:65:            2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:66:            3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:71:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("./INSERT").BfInsertOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:73:            2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:74:            3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:79:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, iterator: number, chunk: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:80:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:84:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, iterator: number, chunk: import("@redis/client/dist/lib/RESP/types").RedisArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:85:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:89:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:91:            2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:92:            3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:97:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:99:            2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:100:            3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:105:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:107:            2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:108:            3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:113:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => void;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:115:            2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:116:            3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:121:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, errorRate: number, capacity: number, options?: import("./RESERVE").BfReserveOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:122:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:126:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, errorRate: number, capacity: number, options?: import("./RESERVE").BfReserveOptions | undefined) => void;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:127:        readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:131:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, iterator: number) => void;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:132:        readonly transformReply: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]) => {
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:133:            iterator: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:134:            chunk: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:139:        readonly parseCommand: (this: void, parser: import("@redis/client").CommandParser, key: import("@redis/client/dist/lib/RESP/types").RedisArgument, iterator: number) => void;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:140:        readonly transformReply: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]) => {
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:141:            iterator: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
node_modules/@redis/bloom/dist/lib/commands/bloom/index.d.ts:142:            chunk: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
node_modules/@redis/bloom/dist/lib/commands/bloom/MADD.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/bloom/MADD.d.ts:2:import { RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/bloom/MADD.d.ts:3:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/bloom/dist/lib/commands/bloom/MADD.d.ts:14:        2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/bloom/MADD.d.ts:15:        3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/bloom/CARD.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/bloom/CARD.d.ts:2:import { RedisArgument, NumberReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/bloom/MEXISTS.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/bloom/MEXISTS.d.ts:2:import { RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/bloom/MEXISTS.d.ts:3:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/bloom/dist/lib/commands/bloom/MEXISTS.d.ts:14:        2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/bloom/MEXISTS.d.ts:15:        3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/bloom/INSERT.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/bloom/INSERT.d.ts:2:import { RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/bloom/INSERT.d.ts:3:import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/@redis/bloom/dist/lib/commands/bloom/INSERT.d.ts:27:        2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
node_modules/@redis/bloom/dist/lib/commands/bloom/INSERT.d.ts:28:        3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
node_modules/@redis/bloom/dist/lib/commands/bloom/EXISTS.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/bloom/dist/lib/commands/bloom/INSERT.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/bloom/dist/lib/commands/bloom/MEXISTS.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/bloom/dist/lib/commands/bloom/ADD.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/bloom/dist/lib/commands/bloom/helpers.js:4:const client_1 = require("@redis/client");
node_modules/@redis/bloom/dist/lib/commands/bloom/helpers.d.ts:1:import { TypeMapping } from "@redis/client";
node_modules/@redis/bloom/dist/lib/commands/bloom/RESERVE.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/bloom/RESERVE.d.ts:2:import { RedisArgument, SimpleStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/bloom/LOADCHUNK.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/bloom/LOADCHUNK.d.ts:2:import { RedisArgument, SimpleStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/bloom/SCANDUMP.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/bloom/SCANDUMP.d.ts:2:import { RedisArgument, NumberReply, BlobStringReply } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/bloom/MADD.js:3:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/@redis/bloom/dist/lib/commands/bloom/EXISTS.d.ts:1:import { CommandParser } from '@redis/client/dist/lib/client/parser';
node_modules/@redis/bloom/dist/lib/commands/bloom/EXISTS.d.ts:2:import { RedisArgument } from '@redis/client/dist/lib/RESP/types';
node_modules/@redis/bloom/dist/lib/commands/bloom/EXISTS.d.ts:13:        2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
node_modules/@redis/bloom/dist/lib/commands/bloom/EXISTS.d.ts:14:        3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
node_modules/is-url/test/index.js:72:    it('redis://:123@174.129.42.52:13271', function () {
node_modules/is-url/test/index.js:73:      assert(url('redis://:123@174.129.42.52:13271'));
node_modules/0x/node_modules/readable-stream/CONTRIBUTING.md:24:  maintained indefinitely and may be redistributed consistent with
node_modules/@nestjs/cli/node_modules/typescript/lib/typesMap.json:324:        "node_redis": "redis",
node_modules/@nestjs/cli/node_modules/typescript/LICENSE.txt:49:7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.
node_modules/@nestjs/cli/node_modules/typescript/LICENSE.txt:53:9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.
node_modules/@nestjs/cli/node_modules/typescript/ThirdPartyNoticeText.txt:90:* The full text of this NOTICE in a location viewable to users of the redistributed or derivative work.
node_modules/pako/lib/zlib/trees.js:11:// including commercial applications, and to alter it and redistribute it
node_modules/pako/lib/zlib/inflate.js:11:// including commercial applications, and to alter it and redistribute it
node_modules/pako/lib/zlib/constants.js:11:// including commercial applications, and to alter it and redistribute it
node_modules/pako/lib/zlib/deflate.js:11:// including commercial applications, and to alter it and redistribute it
node_modules/pako/lib/zlib/crc32.js:15:// including commercial applications, and to alter it and redistribute it
node_modules/pako/lib/zlib/adler32.js:15:// including commercial applications, and to alter it and redistribute it
node_modules/pako/lib/zlib/README:46:including commercial applications, and to alter it and redistribute it
node_modules/pako/lib/zlib/messages.js:11:// including commercial applications, and to alter it and redistribute it
node_modules/pako/lib/zlib/inftrees.js:11:// including commercial applications, and to alter it and redistribute it
node_modules/pako/lib/zlib/zstream.js:11:// including commercial applications, and to alter it and redistribute it
node_modules/pako/lib/zlib/gzheader.js:11:// including commercial applications, and to alter it and redistribute it
node_modules/pako/lib/zlib/inffast.js:11:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako_inflate.js:312:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako_inflate.js:361:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako_inflate.js:435:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako_inflate.js:492:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako_inflate.js:552:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako_inflate.js:899:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako_inflate.js:2457:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako_inflate.js:2802:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako_inflate.js:2836:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako_deflate.js:312:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako_deflate.js:365:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako_deflate.js:422:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako_deflate.js:2298:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako_deflate.js:2332:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako_deflate.js:3556:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako.js:1139:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako.js:1188:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako.js:1262:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako.js:1319:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako.js:3195:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako.js:3255:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako.js:3602:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako.js:5160:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako.js:5505:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako.js:5539:// including commercial applications, and to alter it and redistribute it
node_modules/pako/dist/pako.js:6763:// including commercial applications, and to alter it and redistribute it
node_modules/eslint-plugin-import/node_modules/doctrine/LICENSE.closure-compiler:151:      appropriateness of using or redistributing the Work and assume any
node_modules/eslint-plugin-import/node_modules/doctrine/LICENSE.closure-compiler:166:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/eslint-plugin-import/node_modules/doctrine/LICENSE:151:  appropriateness of using or redistributing the Work and assume any
node_modules/eslint-plugin-import/node_modules/doctrine/LICENSE:166:9. Accepting Warranty or Additional Liability. While redistributing
node_modules/rxjs/LICENSE.txt:150:    appropriateness of using or redistributing the Work and assume any
node_modules/rxjs/LICENSE.txt:165: 9. Accepting Warranty or Additional Liability. While redistributing
node_modules/rxjs/dist/bundles/rxjs.umd.js:152:    appropriateness of using or redistributing the Work and assume any
node_modules/rxjs/dist/bundles/rxjs.umd.js:167: 9. Accepting Warranty or Additional Liability. While redistributing
node_modules/rxjs/dist/bundles/rxjs.umd.js:358:    appropriateness of using or redistributing the Work and assume any
node_modules/rxjs/dist/bundles/rxjs.umd.js:373: 9. Accepting Warranty or Additional Liability. While redistributing
node_modules/request/LICENSE:49:7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.
node_modules/request/LICENSE:53:9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.
node_modules/request/node_modules/tough-cookie/README.md:461:- [`redis-cookie-store`](https://github.com/benkroeger/redis-cookie-store): Redis
node_modules/cache-manager-redis-store/package.json:2:  "name": "cache-manager-redis-store",
node_modules/cache-manager-redis-store/package.json:14:    "url": "https://github.com/dabroek/node-cache-manager-redis-store.git"
node_modules/cache-manager-redis-store/package.json:23:    "redis": "^4.3.1"
node_modules/cache-manager-redis-store/node_modules/redis/package.json:2:  "name": "redis",
node_modules/cache-manager-redis-store/node_modules/redis/package.json:26:    "@redis/bloom": "1.2.0",
node_modules/cache-manager-redis-store/node_modules/redis/package.json:27:    "@redis/client": "1.6.1",
node_modules/cache-manager-redis-store/node_modules/redis/package.json:28:    "@redis/graph": "1.1.1",
node_modules/cache-manager-redis-store/node_modules/redis/package.json:29:    "@redis/json": "1.0.7",
node_modules/cache-manager-redis-store/node_modules/redis/package.json:30:    "@redis/search": "1.2.0",
node_modules/cache-manager-redis-store/node_modules/redis/package.json:31:    "@redis/time-series": "1.1.0"
node_modules/cache-manager-redis-store/node_modules/redis/package.json:41:    "url": "git://github.com/redis/node-redis.git"
node_modules/cache-manager-redis-store/node_modules/redis/package.json:44:    "url": "https://github.com/redis/node-redis/issues"
node_modules/cache-manager-redis-store/node_modules/redis/package.json:46:  "homepage": "https://github.com/redis/node-redis",
node_modules/cache-manager-redis-store/node_modules/redis/package.json:48:    "redis"
node_modules/cache-manager-redis-store/node_modules/redis/README.md:3:[![Tests](https://img.shields.io/github/actions/workflow/status/redis/node-redis/tests.yml?branch=master)](https://github.com/redis/node-redis/actions/workflows/tests.yml)
node_modules/cache-manager-redis-store/node_modules/redis/README.md:4:[![Coverage](https://codecov.io/gh/redis/node-redis/branch/master/graph/badge.svg?token=xcfqHhJC37)](https://codecov.io/gh/redis/node-redis)
node_modules/cache-manager-redis-store/node_modules/redis/README.md:5:[![License](https://img.shields.io/github/license/redis/node-redis.svg)](https://github.com/redis/node-redis/blob/master/LICENSE)
node_modules/cache-manager-redis-store/node_modules/redis/README.md:7:[![Discord](https://img.shields.io/discord/697882427875393627.svg?style=social&logo=discord)](https://discord.gg/redis)
node_modules/cache-manager-redis-store/node_modules/redis/README.md:8:[![Twitch](https://img.shields.io/twitch/status/redisinc?style=social)](https://www.twitch.tv/redisinc)
node_modules/cache-manager-redis-store/node_modules/redis/README.md:9:[![YouTube](https://img.shields.io/youtube/channel/views/UCD78lHSwYqMlyetR0_P4Vig?style=social)](https://www.youtube.com/redisinc)
node_modules/cache-manager-redis-store/node_modules/redis/README.md:10:[![Twitter](https://img.shields.io/twitter/follow/redisinc?style=social)](https://twitter.com/redisinc)
node_modules/cache-manager-redis-store/node_modules/redis/README.md:12:node-redis is a modern, high performance [Redis](https://redis.io) client for Node.js.
node_modules/cache-manager-redis-store/node_modules/redis/README.md:16:[Learn for free at Redis University](https://university.redis.com/)
node_modules/cache-manager-redis-store/node_modules/redis/README.md:18:[Build faster with the Redis Launchpad](https://launchpad.redis.com/)
node_modules/cache-manager-redis-store/node_modules/redis/README.md:20:[Try the Redis Cloud](https://redis.com/try-free/)
node_modules/cache-manager-redis-store/node_modules/redis/README.md:22:[Dive in developer tutorials](https://developer.redis.com/)
node_modules/cache-manager-redis-store/node_modules/redis/README.md:24:[Join the Redis community](https://redis.com/community/)
node_modules/cache-manager-redis-store/node_modules/redis/README.md:26:[Work at Redis](https://redis.com/company/careers/jobs/)
node_modules/cache-manager-redis-store/node_modules/redis/README.md:32:| [redis](./)                                  | [![Downloads](https://img.shields.io/npm/dm/redis.svg)](https://www.npmjs.com/package/redis) [![Version](https://img.shields.io/npm/v/redis.svg)](https://www.npmjs.com/package/redis)                                                                                                                                                                                                                                         |
node_modules/cache-manager-redis-store/node_modules/redis/README.md:33:| [@redis/client](./packages/client)           | [![Downloads](https://img.shields.io/npm/dm/@redis/client.svg)](https://www.npmjs.com/package/@redis/client) [![Version](https://img.shields.io/npm/v/@redis/client.svg)](https://www.npmjs.com/package/@redis/client) [![Docs](https://img.shields.io/badge/-documentation-dc382c)](https://redis.js.org/documentation/client/)                                                                                               |
node_modules/cache-manager-redis-store/node_modules/redis/README.md:34:| [@redis/bloom](./packages/bloom)             | [![Downloads](https://img.shields.io/npm/dm/@redis/bloom.svg)](https://www.npmjs.com/package/@redis/bloom) [![Version](https://img.shields.io/npm/v/@redis/bloom.svg)](https://www.npmjs.com/package/@redis/bloom) [![Docs](https://img.shields.io/badge/-documentation-dc382c)](https://redis.js.org/documentation/bloom/) [Redis Bloom](https://oss.redis.com/redisbloom/) commands                                          |
node_modules/cache-manager-redis-store/node_modules/redis/README.md:35:| [@redis/graph](./packages/graph)             | [![Downloads](https://img.shields.io/npm/dm/@redis/graph.svg)](https://www.npmjs.com/package/@redis/graph) [![Version](https://img.shields.io/npm/v/@redis/graph.svg)](https://www.npmjs.com/package/@redis/graph) [![Docs](https://img.shields.io/badge/-documentation-dc382c)](https://redis.js.org/documentation/graph/) [Redis Graph](https://oss.redis.com/redisgraph/) commands                                          |
node_modules/cache-manager-redis-store/node_modules/redis/README.md:36:| [@redis/json](./packages/json)               | [![Downloads](https://img.shields.io/npm/dm/@redis/json.svg)](https://www.npmjs.com/package/@redis/json) [![Version](https://img.shields.io/npm/v/@redis/json.svg)](https://www.npmjs.com/package/@redis/json) [![Docs](https://img.shields.io/badge/-documentation-dc382c)](https://redis.js.org/documentation/json/) [Redis JSON](https://oss.redis.com/redisjson/) commands                                                 |
node_modules/cache-manager-redis-store/node_modules/redis/README.md:37:| [@redis/search](./packages/search)           | [![Downloads](https://img.shields.io/npm/dm/@redis/search.svg)](https://www.npmjs.com/package/@redis/search) [![Version](https://img.shields.io/npm/v/@redis/search.svg)](https://www.npmjs.com/package/@redis/search) [![Docs](https://img.shields.io/badge/-documentation-dc382c)](https://redis.js.org/documentation/search/) [RediSearch](https://oss.redis.com/redisearch/) commands                                    |
node_modules/cache-manager-redis-store/node_modules/redis/README.md:38:| [@redis/time-series](./packages/time-series) | [![Downloads](https://img.shields.io/npm/dm/@redis/time-series.svg)](https://www.npmjs.com/package/@redis/time-series) [![Version](https://img.shields.io/npm/v/@redis/time-series.svg)](https://www.npmjs.com/package/@redis/time-series) [![Docs](https://img.shields.io/badge/-documentation-dc382c)](https://redis.js.org/documentation/time-series/) [Redis Time-Series](https://oss.redis.com/redistimeseries/) commands |
node_modules/cache-manager-redis-store/node_modules/redis/README.md:40:> :warning: In version 4.1.0 we moved our subpackages from `@node-redis` to `@redis`. If you're just using `npm install redis`, you don't need to do anything—it'll upgrade automatically. If you're using the subpackages directly, you'll need to point to the new scope (e.g. `@redis/client` instead of `@node-redis/client`).
node_modules/cache-manager-redis-store/node_modules/redis/README.md:44:Start a redis via docker:
node_modules/cache-manager-redis-store/node_modules/redis/README.md:47:docker run -p 6379:6379 -it redis/redis-stack-server:latest
node_modules/cache-manager-redis-store/node_modules/redis/README.md:50:To install node-redis, simply:
node_modules/cache-manager-redis-store/node_modules/redis/README.md:53:npm install redis
node_modules/cache-manager-redis-store/node_modules/redis/README.md:58:Looking for a high-level library to handle object mapping? See [redis-om-node](https://github.com/redis/redis-om-node)!
node_modules/cache-manager-redis-store/node_modules/redis/README.md:65:import { createClient } from 'redis';
node_modules/cache-manager-redis-store/node_modules/redis/README.md:76:The above code connects to localhost on port 6379. To connect to a different host or port, use a connection string in the format `redis[s]://[[username][:password]@][host][:port][/db-number]`:
node_modules/cache-manager-redis-store/node_modules/redis/README.md:80:  url: 'redis://alice:foobared@awesome.redis.server:6380'
node_modules/cache-manager-redis-store/node_modules/redis/README.md:90:There is built-in support for all of the [out-of-the-box Redis commands](https://redis.io/commands). They are exposed using the raw Redis command names (`HSET`, `HGETALL`, etc.) and a friendlier camel-cased version (`hSet`, `hGetAll`, etc.):
node_modules/cache-manager-redis-store/node_modules/redis/README.md:140:Start a [transaction](https://redis.io/topics/transactions) by calling `.multi()`, then chaining your commands. When you're done, call `.exec()` and you'll get an array back with your results:
node_modules/cache-manager-redis-store/node_modules/redis/README.md:152:You can also [watch](https://redis.io/topics/transactions#optimistic-locking-using-check-and-set) keys by calling `.watch()`. Your transaction will abort if any of the watched keys change.
node_modules/cache-manager-redis-store/node_modules/redis/README.md:163:import { commandOptions } from 'redis';
node_modules/cache-manager-redis-store/node_modules/redis/README.md:184:[`SCAN`](https://redis.io/commands/scan) results can be looped over using [async iterators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator):
node_modules/cache-manager-redis-store/node_modules/redis/README.md:211:### [Programmability](https://redis.io/docs/manual/programmability/)
node_modules/cache-manager-redis-store/node_modules/redis/README.md:213:Redis provides a programming interface allowing code execution on the redis server.
node_modules/cache-manager-redis-store/node_modules/redis/README.md:215:#### [Functions](https://redis.io/docs/manual/programmability/functions-intro/)
node_modules/cache-manager-redis-store/node_modules/redis/README.md:217:The following example retrieves a key in redis, returning the value of the key, incremented by an integer. For example, if your key _foo_ has the value _17_ and we run `add('foo', 25)`, it returns the answer to Life, the Universe and Everything.
node_modules/cache-manager-redis-store/node_modules/redis/README.md:222:redis.register_function {
node_modules/cache-manager-redis-store/node_modules/redis/README.md:224:  callback = function(keys, args) return redis.call('GET', keys[1]) + args[1] end,
node_modules/cache-manager-redis-store/node_modules/redis/README.md:229:Here is the same example, but in a format that can be pasted into the `redis-cli`.
node_modules/cache-manager-redis-store/node_modules/redis/README.md:232:FUNCTION LOAD "#!lua name=library\nredis.register_function{function_name=\"add\", callback=function(keys, args) return redis.call('GET', keys[1])+args[1] end, flags={\"no-writes\"}}"
node_modules/cache-manager-redis-store/node_modules/redis/README.md:235:Load the prior redis function on the _redis server_ before running the example below.
node_modules/cache-manager-redis-store/node_modules/redis/README.md:238:import { createClient } from 'redis';
node_modules/cache-manager-redis-store/node_modules/redis/README.md:262:#### [Lua Scripts](https://redis.io/docs/manual/programmability/eval-intro/)
node_modules/cache-manager-redis-store/node_modules/redis/README.md:267:import { createClient, defineScript } from 'redis';
node_modules/cache-manager-redis-store/node_modules/redis/README.md:274:        'return redis.call("GET", KEYS[1]) + ARGV[1];',
node_modules/cache-manager-redis-store/node_modules/redis/README.md:297:Gracefully close a client's connection to Redis, by sending the [`QUIT`](https://redis.io/commands/quit) command to the server. Before quitting, the client executes any remaining commands in its queue, and will receive replies from Redis for each of them.
node_modules/cache-manager-redis-store/node_modules/redis/README.md:380:[![Contributors](https://contrib.rocks/image?repo=redis/node-redis)](https://github.com/redis/node-redis/graphs/contributors)
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:1:import { RedisModules, RedisFunctions, RedisScripts, RedisClientOptions, RedisClientType as _RedisClientType, RedisClusterOptions, RedisClusterType as _RedisClusterType } from '@redis/client';
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:2:export * from '@redis/client';
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:3:export * from '@redis/bloom';
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:4:export * from '@redis/graph';
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:5:export * from '@redis/json';
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:6:export * from '@redis/search';
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:7:export * from '@redis/time-series';
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:10:        CONFIG_GET: typeof import("@redis/graph/dist/commands/CONFIG_GET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:11:        configGet: typeof import("@redis/graph/dist/commands/CONFIG_GET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:12:        CONFIG_SET: typeof import("@redis/graph/dist/commands/CONFIG_SET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:13:        configSet: typeof import("@redis/graph/dist/commands/CONFIG_SET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:14:        DELETE: typeof import("@redis/graph/dist/commands/DELETE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:15:        delete: typeof import("@redis/graph/dist/commands/DELETE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:16:        EXPLAIN: typeof import("@redis/graph/dist/commands/EXPLAIN");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:17:        explain: typeof import("@redis/graph/dist/commands/EXPLAIN");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:18:        LIST: typeof import("@redis/graph/dist/commands/LIST");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:19:        list: typeof import("@redis/graph/dist/commands/LIST");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:20:        PROFILE: typeof import("@redis/graph/dist/commands/PROFILE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:21:        profile: typeof import("@redis/graph/dist/commands/PROFILE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:22:        QUERY: typeof import("@redis/graph/dist/commands/QUERY");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:23:        query: typeof import("@redis/graph/dist/commands/QUERY");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:24:        RO_QUERY: typeof import("@redis/graph/dist/commands/RO_QUERY");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:25:        roQuery: typeof import("@redis/graph/dist/commands/RO_QUERY");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:26:        SLOWLOG: typeof import("@redis/graph/dist/commands/SLOWLOG");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:27:        slowLog: typeof import("@redis/graph/dist/commands/SLOWLOG");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:30:        ARRAPPEND: typeof import("@redis/json/dist/commands/ARRAPPEND");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:31:        arrAppend: typeof import("@redis/json/dist/commands/ARRAPPEND");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:32:        ARRINDEX: typeof import("@redis/json/dist/commands/ARRINDEX");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:33:        arrIndex: typeof import("@redis/json/dist/commands/ARRINDEX");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:34:        ARRINSERT: typeof import("@redis/json/dist/commands/ARRINSERT");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:35:        arrInsert: typeof import("@redis/json/dist/commands/ARRINSERT");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:36:        ARRLEN: typeof import("@redis/json/dist/commands/ARRLEN");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:37:        arrLen: typeof import("@redis/json/dist/commands/ARRLEN");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:38:        ARRPOP: typeof import("@redis/json/dist/commands/ARRPOP");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:39:        arrPop: typeof import("@redis/json/dist/commands/ARRPOP");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:40:        ARRTRIM: typeof import("@redis/json/dist/commands/ARRTRIM");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:41:        arrTrim: typeof import("@redis/json/dist/commands/ARRTRIM");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:42:        DEBUG_MEMORY: typeof import("@redis/json/dist/commands/DEBUG_MEMORY");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:43:        debugMemory: typeof import("@redis/json/dist/commands/DEBUG_MEMORY");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:44:        DEL: typeof import("@redis/json/dist/commands/DEL");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:45:        del: typeof import("@redis/json/dist/commands/DEL");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:46:        FORGET: typeof import("@redis/json/dist/commands/FORGET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:47:        forget: typeof import("@redis/json/dist/commands/FORGET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:48:        GET: typeof import("@redis/json/dist/commands/GET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:49:        get: typeof import("@redis/json/dist/commands/GET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:50:        MERGE: typeof import("@redis/json/dist/commands/MERGE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:51:        merge: typeof import("@redis/json/dist/commands/MERGE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:52:        MGET: typeof import("@redis/json/dist/commands/MGET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:53:        mGet: typeof import("@redis/json/dist/commands/MGET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:54:        MSET: typeof import("@redis/json/dist/commands/MSET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:55:        mSet: typeof import("@redis/json/dist/commands/MSET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:56:        NUMINCRBY: typeof import("@redis/json/dist/commands/NUMINCRBY");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:57:        numIncrBy: typeof import("@redis/json/dist/commands/NUMINCRBY");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:58:        NUMMULTBY: typeof import("@redis/json/dist/commands/NUMMULTBY");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:59:        numMultBy: typeof import("@redis/json/dist/commands/NUMMULTBY");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:60:        OBJKEYS: typeof import("@redis/json/dist/commands/OBJKEYS");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:61:        objKeys: typeof import("@redis/json/dist/commands/OBJKEYS");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:62:        OBJLEN: typeof import("@redis/json/dist/commands/OBJLEN");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:63:        objLen: typeof import("@redis/json/dist/commands/OBJLEN");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:64:        RESP: typeof import("@redis/json/dist/commands/RESP");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:65:        resp: typeof import("@redis/json/dist/commands/RESP");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:66:        SET: typeof import("@redis/json/dist/commands/SET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:67:        set: typeof import("@redis/json/dist/commands/SET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:68:        STRAPPEND: typeof import("@redis/json/dist/commands/STRAPPEND");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:69:        strAppend: typeof import("@redis/json/dist/commands/STRAPPEND");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:70:        STRLEN: typeof import("@redis/json/dist/commands/STRLEN");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:71:        strLen: typeof import("@redis/json/dist/commands/STRLEN");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:72:        TYPE: typeof import("@redis/json/dist/commands/TYPE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:73:        type: typeof import("@redis/json/dist/commands/TYPE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:76:        _LIST: typeof import("@redis/search/dist/commands/_LIST");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:77:        _list: typeof import("@redis/search/dist/commands/_LIST");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:78:        ALTER: typeof import("@redis/search/dist/commands/ALTER");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:79:        alter: typeof import("@redis/search/dist/commands/ALTER");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:80:        AGGREGATE_WITHCURSOR: typeof import("@redis/search/dist/commands/AGGREGATE_WITHCURSOR");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:81:        aggregateWithCursor: typeof import("@redis/search/dist/commands/AGGREGATE_WITHCURSOR");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:82:        AGGREGATE: typeof import("@redis/search/dist/commands/AGGREGATE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:83:        aggregate: typeof import("@redis/search/dist/commands/AGGREGATE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:84:        ALIASADD: typeof import("@redis/search/dist/commands/ALIASADD");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:85:        aliasAdd: typeof import("@redis/search/dist/commands/ALIASADD");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:86:        ALIASDEL: typeof import("@redis/search/dist/commands/ALIASDEL");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:87:        aliasDel: typeof import("@redis/search/dist/commands/ALIASDEL");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:88:        ALIASUPDATE: typeof import("@redis/search/dist/commands/ALIASUPDATE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:89:        aliasUpdate: typeof import("@redis/search/dist/commands/ALIASUPDATE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:90:        CONFIG_GET: typeof import("@redis/search/dist/commands/CONFIG_GET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:91:        configGet: typeof import("@redis/search/dist/commands/CONFIG_GET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:92:        CONFIG_SET: typeof import("@redis/search/dist/commands/CONFIG_SET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:93:        configSet: typeof import("@redis/search/dist/commands/CONFIG_SET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:94:        CREATE: typeof import("@redis/search/dist/commands/CREATE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:95:        create: typeof import("@redis/search/dist/commands/CREATE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:96:        CURSOR_DEL: typeof import("@redis/search/dist/commands/CURSOR_DEL");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:97:        cursorDel: typeof import("@redis/search/dist/commands/CURSOR_DEL");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:98:        CURSOR_READ: typeof import("@redis/search/dist/commands/CURSOR_READ");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:99:        cursorRead: typeof import("@redis/search/dist/commands/CURSOR_READ");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:100:        DICTADD: typeof import("@redis/search/dist/commands/DICTADD");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:101:        dictAdd: typeof import("@redis/search/dist/commands/DICTADD");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:102:        DICTDEL: typeof import("@redis/search/dist/commands/DICTDEL");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:103:        dictDel: typeof import("@redis/search/dist/commands/DICTDEL");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:104:        DICTDUMP: typeof import("@redis/search/dist/commands/DICTDUMP");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:105:        dictDump: typeof import("@redis/search/dist/commands/DICTDUMP");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:106:        DROPINDEX: typeof import("@redis/search/dist/commands/DROPINDEX");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:107:        dropIndex: typeof import("@redis/search/dist/commands/DROPINDEX");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:108:        EXPLAIN: typeof import("@redis/search/dist/commands/EXPLAIN");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:109:        explain: typeof import("@redis/search/dist/commands/EXPLAIN");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:110:        EXPLAINCLI: typeof import("@redis/search/dist/commands/EXPLAINCLI");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:111:        explainCli: typeof import("@redis/search/dist/commands/EXPLAINCLI");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:112:        INFO: typeof import("@redis/search/dist/commands/INFO");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:113:        info: typeof import("@redis/search/dist/commands/INFO");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:114:        PROFILESEARCH: typeof import("@redis/search/dist/commands/PROFILE_SEARCH");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:115:        profileSearch: typeof import("@redis/search/dist/commands/PROFILE_SEARCH");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:116:        PROFILEAGGREGATE: typeof import("@redis/search/dist/commands/PROFILE_AGGREGATE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:117:        profileAggregate: typeof import("@redis/search/dist/commands/PROFILE_AGGREGATE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:118:        SEARCH: typeof import("@redis/search/dist/commands/SEARCH");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:119:        search: typeof import("@redis/search/dist/commands/SEARCH");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:120:        SEARCH_NOCONTENT: typeof import("@redis/search/dist/commands/SEARCH_NOCONTENT");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:121:        searchNoContent: typeof import("@redis/search/dist/commands/SEARCH_NOCONTENT");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:122:        SPELLCHECK: typeof import("@redis/search/dist/commands/SPELLCHECK");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:123:        spellCheck: typeof import("@redis/search/dist/commands/SPELLCHECK");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:124:        SUGADD: typeof import("@redis/search/dist/commands/SUGADD");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:125:        sugAdd: typeof import("@redis/search/dist/commands/SUGADD");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:126:        SUGDEL: typeof import("@redis/search/dist/commands/SUGDEL");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:127:        sugDel: typeof import("@redis/search/dist/commands/SUGDEL");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:128:        SUGGET_WITHPAYLOADS: typeof import("@redis/search/dist/commands/SUGGET_WITHPAYLOADS");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:129:        sugGetWithPayloads: typeof import("@redis/search/dist/commands/SUGGET_WITHPAYLOADS");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:130:        SUGGET_WITHSCORES_WITHPAYLOADS: typeof import("@redis/search/dist/commands/SUGGET_WITHSCORES_WITHPAYLOADS");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:131:        sugGetWithScoresWithPayloads: typeof import("@redis/search/dist/commands/SUGGET_WITHSCORES_WITHPAYLOADS");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:132:        SUGGET_WITHSCORES: typeof import("@redis/search/dist/commands/SUGGET_WITHSCORES");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:133:        sugGetWithScores: typeof import("@redis/search/dist/commands/SUGGET_WITHSCORES");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:134:        SUGGET: typeof import("@redis/search/dist/commands/SUGGET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:135:        sugGet: typeof import("@redis/search/dist/commands/SUGGET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:136:        SUGLEN: typeof import("@redis/search/dist/commands/SUGLEN");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:137:        sugLen: typeof import("@redis/search/dist/commands/SUGLEN");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:138:        SYNDUMP: typeof import("@redis/search/dist/commands/SYNDUMP");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:139:        synDump: typeof import("@redis/search/dist/commands/SYNDUMP");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:140:        SYNUPDATE: typeof import("@redis/search/dist/commands/SYNUPDATE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:141:        synUpdate: typeof import("@redis/search/dist/commands/SYNUPDATE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:142:        TAGVALS: typeof import("@redis/search/dist/commands/TAGVALS");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:143:        tagVals: typeof import("@redis/search/dist/commands/TAGVALS");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:146:        ADD: typeof import("@redis/time-series/dist/commands/ADD");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:147:        add: typeof import("@redis/time-series/dist/commands/ADD");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:148:        ALTER: typeof import("@redis/time-series/dist/commands/ALTER");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:149:        alter: typeof import("@redis/time-series/dist/commands/ALTER");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:150:        CREATE: typeof import("@redis/time-series/dist/commands/CREATE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:151:        create: typeof import("@redis/time-series/dist/commands/CREATE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:152:        CREATERULE: typeof import("@redis/time-series/dist/commands/CREATERULE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:153:        createRule: typeof import("@redis/time-series/dist/commands/CREATERULE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:154:        DECRBY: typeof import("@redis/time-series/dist/commands/DECRBY");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:155:        decrBy: typeof import("@redis/time-series/dist/commands/DECRBY");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:156:        DEL: typeof import("@redis/time-series/dist/commands/DEL");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:157:        del: typeof import("@redis/time-series/dist/commands/DEL");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:158:        DELETERULE: typeof import("@redis/time-series/dist/commands/DELETERULE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:159:        deleteRule: typeof import("@redis/time-series/dist/commands/DELETERULE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:160:        GET: typeof import("@redis/time-series/dist/commands/GET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:161:        get: typeof import("@redis/time-series/dist/commands/GET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:162:        INCRBY: typeof import("@redis/time-series/dist/commands/INCRBY");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:163:        incrBy: typeof import("@redis/time-series/dist/commands/INCRBY");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:164:        INFO_DEBUG: typeof import("@redis/time-series/dist/commands/INFO_DEBUG");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:165:        infoDebug: typeof import("@redis/time-series/dist/commands/INFO_DEBUG");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:166:        INFO: typeof import("@redis/time-series/dist/commands/INFO");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:167:        info: typeof import("@redis/time-series/dist/commands/INFO");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:168:        MADD: typeof import("@redis/time-series/dist/commands/MADD");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:169:        mAdd: typeof import("@redis/time-series/dist/commands/MADD");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:170:        MGET: typeof import("@redis/time-series/dist/commands/MGET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:171:        mGet: typeof import("@redis/time-series/dist/commands/MGET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:172:        MGET_WITHLABELS: typeof import("@redis/time-series/dist/commands/MGET_WITHLABELS");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:173:        mGetWithLabels: typeof import("@redis/time-series/dist/commands/MGET_WITHLABELS");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:174:        QUERYINDEX: typeof import("@redis/time-series/dist/commands/QUERYINDEX");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:175:        queryIndex: typeof import("@redis/time-series/dist/commands/QUERYINDEX");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:176:        RANGE: typeof import("@redis/time-series/dist/commands/RANGE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:177:        range: typeof import("@redis/time-series/dist/commands/RANGE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:178:        REVRANGE: typeof import("@redis/time-series/dist/commands/REVRANGE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:179:        revRange: typeof import("@redis/time-series/dist/commands/REVRANGE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:180:        MRANGE: typeof import("@redis/time-series/dist/commands/MRANGE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:181:        mRange: typeof import("@redis/time-series/dist/commands/MRANGE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:182:        MRANGE_WITHLABELS: typeof import("@redis/time-series/dist/commands/MRANGE_WITHLABELS");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:183:        mRangeWithLabels: typeof import("@redis/time-series/dist/commands/MRANGE_WITHLABELS");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:184:        MREVRANGE: typeof import("@redis/time-series/dist/commands/MREVRANGE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:185:        mRevRange: typeof import("@redis/time-series/dist/commands/MREVRANGE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:186:        MREVRANGE_WITHLABELS: typeof import("@redis/time-series/dist/commands/MREVRANGE_WITHLABELS");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:187:        mRevRangeWithLabels: typeof import("@redis/time-series/dist/commands/MREVRANGE_WITHLABELS");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:190:        ADD: typeof import("@redis/bloom/dist/commands/bloom/ADD");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:191:        add: typeof import("@redis/bloom/dist/commands/bloom/ADD");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:192:        CARD: typeof import("@redis/bloom/dist/commands/bloom/CARD");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:193:        card: typeof import("@redis/bloom/dist/commands/bloom/CARD");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:194:        EXISTS: typeof import("@redis/bloom/dist/commands/bloom/EXISTS");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:195:        exists: typeof import("@redis/bloom/dist/commands/bloom/EXISTS");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:196:        INFO: typeof import("@redis/bloom/dist/commands/bloom/INFO");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:197:        info: typeof import("@redis/bloom/dist/commands/bloom/INFO");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:198:        INSERT: typeof import("@redis/bloom/dist/commands/bloom/INSERT");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:199:        insert: typeof import("@redis/bloom/dist/commands/bloom/INSERT");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:200:        LOADCHUNK: typeof import("@redis/bloom/dist/commands/bloom/LOADCHUNK");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:201:        loadChunk: typeof import("@redis/bloom/dist/commands/bloom/LOADCHUNK");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:202:        MADD: typeof import("@redis/bloom/dist/commands/bloom/MADD");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:203:        mAdd: typeof import("@redis/bloom/dist/commands/bloom/MADD");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:204:        MEXISTS: typeof import("@redis/bloom/dist/commands/bloom/MEXISTS");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:205:        mExists: typeof import("@redis/bloom/dist/commands/bloom/MEXISTS");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:206:        RESERVE: typeof import("@redis/bloom/dist/commands/bloom/RESERVE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:207:        reserve: typeof import("@redis/bloom/dist/commands/bloom/RESERVE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:208:        SCANDUMP: typeof import("@redis/bloom/dist/commands/bloom/SCANDUMP");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:209:        scanDump: typeof import("@redis/bloom/dist/commands/bloom/SCANDUMP");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:212:        INCRBY: typeof import("@redis/bloom/dist/commands/count-min-sketch/INCRBY");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:213:        incrBy: typeof import("@redis/bloom/dist/commands/count-min-sketch/INCRBY");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:214:        INFO: typeof import("@redis/bloom/dist/commands/count-min-sketch/INFO");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:215:        info: typeof import("@redis/bloom/dist/commands/count-min-sketch/INFO");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:216:        INITBYDIM: typeof import("@redis/bloom/dist/commands/count-min-sketch/INITBYDIM");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:217:        initByDim: typeof import("@redis/bloom/dist/commands/count-min-sketch/INITBYDIM");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:218:        INITBYPROB: typeof import("@redis/bloom/dist/commands/count-min-sketch/INITBYPROB");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:219:        initByProb: typeof import("@redis/bloom/dist/commands/count-min-sketch/INITBYPROB");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:220:        MERGE: typeof import("@redis/bloom/dist/commands/count-min-sketch/MERGE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:221:        merge: typeof import("@redis/bloom/dist/commands/count-min-sketch/MERGE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:222:        QUERY: typeof import("@redis/bloom/dist/commands/count-min-sketch/QUERY");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:223:        query: typeof import("@redis/bloom/dist/commands/count-min-sketch/QUERY");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:226:        ADD: typeof import("@redis/bloom/dist/commands/cuckoo/ADD");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:227:        add: typeof import("@redis/bloom/dist/commands/cuckoo/ADD");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:228:        ADDNX: typeof import("@redis/bloom/dist/commands/cuckoo/ADDNX");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:229:        addNX: typeof import("@redis/bloom/dist/commands/cuckoo/ADDNX");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:230:        COUNT: typeof import("@redis/bloom/dist/commands/cuckoo/COUNT");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:231:        count: typeof import("@redis/bloom/dist/commands/cuckoo/COUNT");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:232:        DEL: typeof import("@redis/bloom/dist/commands/cuckoo/DEL");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:233:        del: typeof import("@redis/bloom/dist/commands/cuckoo/DEL");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:234:        EXISTS: typeof import("@redis/bloom/dist/commands/cuckoo/EXISTS");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:235:        exists: typeof import("@redis/bloom/dist/commands/cuckoo/EXISTS");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:236:        INFO: typeof import("@redis/bloom/dist/commands/cuckoo/INFO");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:237:        info: typeof import("@redis/bloom/dist/commands/cuckoo/INFO");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:238:        INSERT: typeof import("@redis/bloom/dist/commands/cuckoo/INSERT");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:239:        insert: typeof import("@redis/bloom/dist/commands/cuckoo/INSERT");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:240:        INSERTNX: typeof import("@redis/bloom/dist/commands/cuckoo/INSERTNX");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:241:        insertNX: typeof import("@redis/bloom/dist/commands/cuckoo/INSERTNX");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:242:        LOADCHUNK: typeof import("@redis/bloom/dist/commands/cuckoo/LOADCHUNK");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:243:        loadChunk: typeof import("@redis/bloom/dist/commands/cuckoo/LOADCHUNK");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:244:        RESERVE: typeof import("@redis/bloom/dist/commands/cuckoo/RESERVE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:245:        reserve: typeof import("@redis/bloom/dist/commands/cuckoo/RESERVE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:246:        SCANDUMP: typeof import("@redis/bloom/dist/commands/cuckoo/SCANDUMP");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:247:        scanDump: typeof import("@redis/bloom/dist/commands/cuckoo/SCANDUMP");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:250:        ADD: typeof import("@redis/bloom/dist/commands/t-digest/ADD");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:251:        add: typeof import("@redis/bloom/dist/commands/t-digest/ADD");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:252:        BYRANK: typeof import("@redis/bloom/dist/commands/t-digest/BYRANK");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:253:        byRank: typeof import("@redis/bloom/dist/commands/t-digest/BYRANK");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:254:        BYREVRANK: typeof import("@redis/bloom/dist/commands/t-digest/BYREVRANK");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:255:        byRevRank: typeof import("@redis/bloom/dist/commands/t-digest/BYREVRANK");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:256:        CDF: typeof import("@redis/bloom/dist/commands/t-digest/CDF");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:257:        cdf: typeof import("@redis/bloom/dist/commands/t-digest/CDF");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:258:        CREATE: typeof import("@redis/bloom/dist/commands/t-digest/CREATE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:259:        create: typeof import("@redis/bloom/dist/commands/t-digest/CREATE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:260:        INFO: typeof import("@redis/bloom/dist/commands/t-digest/INFO");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:261:        info: typeof import("@redis/bloom/dist/commands/t-digest/INFO");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:262:        MAX: typeof import("@redis/bloom/dist/commands/t-digest/MAX");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:263:        max: typeof import("@redis/bloom/dist/commands/t-digest/MAX");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:264:        MERGE: typeof import("@redis/bloom/dist/commands/t-digest/MERGE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:265:        merge: typeof import("@redis/bloom/dist/commands/t-digest/MERGE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:266:        MIN: typeof import("@redis/bloom/dist/commands/t-digest/MIN");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:267:        min: typeof import("@redis/bloom/dist/commands/t-digest/MIN");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:268:        QUANTILE: typeof import("@redis/bloom/dist/commands/t-digest/QUANTILE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:269:        quantile: typeof import("@redis/bloom/dist/commands/t-digest/QUANTILE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:270:        RANK: typeof import("@redis/bloom/dist/commands/t-digest/RANK");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:271:        rank: typeof import("@redis/bloom/dist/commands/t-digest/RANK");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:272:        RESET: typeof import("@redis/bloom/dist/commands/t-digest/RESET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:273:        reset: typeof import("@redis/bloom/dist/commands/t-digest/RESET");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:274:        REVRANK: typeof import("@redis/bloom/dist/commands/t-digest/REVRANK");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:275:        revRank: typeof import("@redis/bloom/dist/commands/t-digest/REVRANK");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:276:        TRIMMED_MEAN: typeof import("@redis/bloom/dist/commands/t-digest/TRIMMED_MEAN");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:277:        trimmedMean: typeof import("@redis/bloom/dist/commands/t-digest/TRIMMED_MEAN");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:280:        ADD: typeof import("@redis/bloom/dist/commands/top-k/ADD");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:281:        add: typeof import("@redis/bloom/dist/commands/top-k/ADD");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:282:        COUNT: typeof import("@redis/bloom/dist/commands/top-k/COUNT");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:283:        count: typeof import("@redis/bloom/dist/commands/top-k/COUNT");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:284:        INCRBY: typeof import("@redis/bloom/dist/commands/top-k/INCRBY");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:285:        incrBy: typeof import("@redis/bloom/dist/commands/top-k/INCRBY");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:286:        INFO: typeof import("@redis/bloom/dist/commands/top-k/INFO");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:287:        info: typeof import("@redis/bloom/dist/commands/top-k/INFO");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:288:        LIST_WITHCOUNT: typeof import("@redis/bloom/dist/commands/top-k/LIST_WITHCOUNT");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:289:        listWithCount: typeof import("@redis/bloom/dist/commands/top-k/LIST_WITHCOUNT");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:290:        LIST: typeof import("@redis/bloom/dist/commands/top-k/LIST");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:291:        list: typeof import("@redis/bloom/dist/commands/top-k/LIST");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:292:        QUERY: typeof import("@redis/bloom/dist/commands/top-k/QUERY");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:293:        query: typeof import("@redis/bloom/dist/commands/top-k/QUERY");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:294:        RESERVE: typeof import("@redis/bloom/dist/commands/top-k/RESERVE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.d.ts:295:        reserve: typeof import("@redis/bloom/dist/commands/top-k/RESERVE");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.js:18:const client_1 = require("@redis/client");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.js:19:const bloom_1 = require("@redis/bloom");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.js:20:const graph_1 = require("@redis/graph");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.js:21:const json_1 = require("@redis/json");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.js:22:const search_1 = require("@redis/search");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.js:23:const time_series_1 = require("@redis/time-series");
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.js:24:__exportStar(require("@redis/client"), exports);
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.js:25:__exportStar(require("@redis/bloom"), exports);
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.js:26:__exportStar(require("@redis/graph"), exports);
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.js:27:__exportStar(require("@redis/json"), exports);
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.js:28:__exportStar(require("@redis/search"), exports);
node_modules/cache-manager-redis-store/node_modules/redis/dist/index.js:29:__exportStar(require("@redis/time-series"), exports);
node_modules/cache-manager-redis-store/node_modules/@redis/json/package.json:2:  "name": "@redis/json",
node_modules/cache-manager-redis-store/node_modules/@redis/json/package.json:16:    "@redis/client": "^1.0.0"
node_modules/cache-manager-redis-store/node_modules/@redis/json/package.json:20:    "@redis/test-utils": "*",
node_modules/cache-manager-redis-store/node_modules/@redis/json/package.json:31:    "url": "git://github.com/redis/node-redis.git"
node_modules/cache-manager-redis-store/node_modules/@redis/json/package.json:34:    "url": "https://github.com/redis/node-redis/issues"
node_modules/cache-manager-redis-store/node_modules/@redis/json/package.json:36:  "homepage": "https://github.com/redis/node-redis/tree/master/packages/json",
node_modules/cache-manager-redis-store/node_modules/@redis/json/package.json:38:    "redis",
node_modules/cache-manager-redis-store/node_modules/@redis/json/README.md:1:# @redis/json
node_modules/cache-manager-redis-store/node_modules/@redis/json/README.md:3:This package provides support for the [RedisJSON](https://redis.io/docs/stack/json/) module, which adds JSON as a native data type to Redis.  It extends the [Node Redis client](https://github.com/redis/node-redis) to include functions for each of the RedisJSON commands.
node_modules/cache-manager-redis-store/node_modules/@redis/json/README.md:9:For a complete example, see [`managing-json.js`](https://github.com/redis/node-redis/blob/master/examples/managing-json.js) in the Node Redis examples folder.
node_modules/cache-manager-redis-store/node_modules/@redis/json/README.md:13:The [`JSON.SET`](https://redis.io/commands/json.set/) command stores a JSON value at a given JSON Path in a Redis key.
node_modules/cache-manager-redis-store/node_modules/@redis/json/README.md:18:import { createClient } from 'redis';
node_modules/cache-manager-redis-store/node_modules/@redis/json/README.md:21:await client.json.set('noderedis:jsondata', '$', {
node_modules/cache-manager-redis-store/node_modules/@redis/json/README.md:40:For more information about RedisJSON's path syntax, [check out the documentation](https://redis.io/docs/stack/json/path/).
node_modules/cache-manager-redis-store/node_modules/@redis/json/README.md:44:With RedisJSON, we can retrieve all or part(s) of a JSON document using the [`JSON.GET`](https://redis.io/commands/json.get/) command and one or more JSON Paths.  Let's get the name and age of one of the pets:
node_modules/cache-manager-redis-store/node_modules/@redis/json/README.md:47:const results = await client.json.get('noderedis:jsondata', {
node_modules/cache-manager-redis-store/node_modules/@redis/json/README.md:65:Using the [`JSON.NUMINCRBY`](https://redis.io/commands/json.numincrby/) command, we can update the age of one of the pets like this:
node_modules/cache-manager-redis-store/node_modules/@redis/json/README.md:68:await client.json.numIncrBy('noderedis:jsondata', '.pets[1].age', 1);
node_modules/cache-manager-redis-store/node_modules/@redis/json/README.md:71:And we can add a new object to the pets array with the [`JSON.ARRAPPEND`](https://redis.io/commands/json.arrappend/) command:
node_modules/cache-manager-redis-store/node_modules/@redis/json/README.md:74:await client.json.arrAppend('noderedis:jsondata', '.pets', {
node_modules/cache-manager-redis-store/node_modules/@redis/json/dist/commands/GET.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/json/dist/commands/GET.js:4:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/json/dist/commands/MSET.d.ts:2:import { RedisCommandArgument } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/package.json:2:  "name": "@redis/time-series",
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/package.json:16:    "@redis/client": "^1.0.0"
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/package.json:20:    "@redis/test-utils": "*",
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/package.json:31:    "url": "git://github.com/redis/node-redis.git"
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/package.json:34:    "url": "https://github.com/redis/node-redis/issues"
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/package.json:36:  "homepage": "https://github.com/redis/node-redis/tree/master/packages/time-series",
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/package.json:38:    "redis",
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/README.md:1:# @redis/time-series
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/README.md:3:This package provides support for the [RedisTimeSeries](https://redistimeseries.io) module, which adds a time series data structure to Redis. It extends the [Node Redis client](https://github.com/redis/node-redis) to include functions for each of the RedisTimeSeries commands.
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/README.md:9:For a complete example, see [`time-series.js`](https://github.com/redis/node-redis/blob/master/examples/time-series.js) in the Node Redis examples folder.
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/README.md:13:The [`TS.CREATE`](https://oss.redis.com/redistimeseries/commands/#tscreate) command creates a new time series.
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/README.md:19:import { createClient } from 'redis';
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/README.md:20:import { TimeSeriesDuplicatePolicies, TimeSeriesEncoding, TimeSeriesAggregationType } from '@redis/time-series';
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/README.md:41:With RedisTimeSeries, we can add a single value to time series data structure using the [`TS.ADD`](https://redis.io/commands/ts.add/) command and if we would like to add multiple values we can use the [`TS.MADD`](https://redis.io/commands/ts.madd/) command.
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/README.md:51:    // https://redis.io/commands/ts.add/
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/README.md:61:  // https://redis.io/commands/ts.madd/
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/README.md:77:With RedisTimeSeries, we can retrieve the time series data using the [`TS.RANGE`](https://redis.io/commands/ts.range/) command by passing the criteria as follows:
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/README.md:82:  // https://redis.io/commands/ts.range/
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/README.md:111:Using the [`TS.ALTER`](https://redis.io/commands/ts.alter/) command, we can update time series retention like this:
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/README.md:115:  // https://redis.io/commands/ts.alter/
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/README.md:126:Using the [`TS.INFO`](https://redis.io/commands/ts.info/) command, we can view timeseries information like this:
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/README.md:131:  // https://redis.io/commands/ts.info/
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/dist/commands/index.d.ts:22:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/dist/commands/MGET.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/dist/commands/INCRBY.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/dist/commands/GET.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/dist/commands/MRANGE_WITHLABELS.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/dist/commands/DEL.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/dist/commands/DECRBY.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/dist/commands/MREVRANGE.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/dist/commands/REVRANGE.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/dist/commands/index.js:25:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/dist/commands/RANGE.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/dist/commands/MREVRANGE_WITHLABELS.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/dist/commands/MGET_WITHLABELS.d.ts:3:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/dist/commands/QUERYINDEX.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/dist/commands/QUERYINDEX.js:4:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/time-series/dist/commands/MRANGE.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/client/package.json:2:  "name": "@redis/client",
node_modules/cache-manager-redis-store/node_modules/@redis/client/package.json:23:    "@redis/test-utils": "*",
node_modules/cache-manager-redis-store/node_modules/@redis/client/package.json:43:    "url": "git://github.com/redis/node-redis.git"
node_modules/cache-manager-redis-store/node_modules/@redis/client/package.json:46:    "url": "https://github.com/redis/node-redis/issues"
node_modules/cache-manager-redis-store/node_modules/@redis/client/package.json:48:  "homepage": "https://github.com/redis/node-redis/tree/master/packages/client",
node_modules/cache-manager-redis-store/node_modules/@redis/client/package.json:50:    "redis"
node_modules/cache-manager-redis-store/node_modules/@redis/client/README.md:1:# @redis/client
node_modules/cache-manager-redis-store/node_modules/@redis/client/README.md:3:The source code and documentation for this package are in the main [node-redis](https://github.com/redis/node-redis) repo.
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/index.d.ts:47:    static extractFirstKey(command: RedisCommand, originalArgs: Array<unknown>, redisArgs: RedisCommandArguments): RedisCommandArgument | undefined;
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/index.d.ts:62:    executeFunction(name: string, fn: RedisFunction, originalArgs: Array<unknown>, redisArgs: RedisCommandArguments, options?: ClientCommandOptions): Promise<RedisCommandRawReply>;
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/index.d.ts:64:    executeScript(script: RedisScript, originalArgs: Array<unknown>, redisArgs: RedisCommandArguments, options?: ClientCommandOptions): Promise<RedisCommandRawReply>;
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/cluster-slots.d.ts:48:    rediscover(startWith: RedisClientType<M, F, S>): Promise<void>;
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/cluster-slots.js:13:var _RedisClusterSlots_instances, _a, _RedisClusterSlots_SLOTS, _RedisClusterSlots_options, _RedisClusterSlots_Client, _RedisClusterSlots_emit, _RedisClusterSlots_isOpen, _RedisClusterSlots_discoverWithRootNodes, _RedisClusterSlots_resetSlots, _RedisClusterSlots_discover, _RedisClusterSlots_getShards, _RedisClusterSlots_getNodeAddress, _RedisClusterSlots_clientOptionsDefaults, _RedisClusterSlots_initiateSlotNode, _RedisClusterSlots_createClient, _RedisClusterSlots_createNodeClient, _RedisClusterSlots_runningRediscoverPromise, _RedisClusterSlots_rediscover, _RedisClusterSlots_destroy, _RedisClusterSlots_execOnNodeClient, _RedisClusterSlots_iterateAllNodes, _RedisClusterSlots_randomNodeIterator, _RedisClusterSlots_slotNodesIterator, _RedisClusterSlots_initiatePubSubClient, _RedisClusterSlots_initiateShardedPubSubClient;
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/cluster-slots.js:91:    async rediscover(startWith) {
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/cluster-slots.js:92:        __classPrivateFieldSet(this, _RedisClusterSlots_runningRediscoverPromise, __classPrivateFieldGet(this, _RedisClusterSlots_runningRediscoverPromise, "f") ?? __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_rediscover).call(this, startWith)
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/cluster-slots.js:317:}, _RedisClusterSlots_rediscover = async function _RedisClusterSlots_rediscover(startWith) {
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/cluster-slots.js:415:                await this.rediscover(client);
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/index.js:22:    static extractFirstKey(command, originalArgs, redisArgs) {
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/index.js:27:            return redisArgs[command.FIRST_KEY_INDEX];
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/index.js:125:        const { jsArgs, args: redisArgs, options } = (0, commander_1.transformCommandArguments)(command, args);
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/index.js:126:        return (0, commander_1.transformCommandReply)(command, await this.sendCommand(RedisCluster.extractFirstKey(command, jsArgs, redisArgs), command.IS_READ_ONLY, redisArgs, options), redisArgs.preserve);
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/index.js:132:        const { args: redisArgs, options } = (0, commander_1.transformCommandArguments)(fn, args);
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/index.js:133:        return (0, commander_1.transformCommandReply)(fn, await this.executeFunction(name, fn, args, redisArgs, options), redisArgs.preserve);
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/index.js:135:    async executeFunction(name, fn, originalArgs, redisArgs, options) {
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/index.js:136:        return __classPrivateFieldGet(this, _RedisCluster_instances, "m", _RedisCluster_execute).call(this, RedisCluster.extractFirstKey(fn, originalArgs, redisArgs), fn.IS_READ_ONLY, client => client.executeFunction(name, fn, redisArgs, options));
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/index.js:139:        const { args: redisArgs, options } = (0, commander_1.transformCommandArguments)(script, args);
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/index.js:140:        return (0, commander_1.transformCommandReply)(script, await this.executeScript(script, args, redisArgs, options), redisArgs.preserve);
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/index.js:142:    async executeScript(script, originalArgs, redisArgs, options) {
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/index.js:143:        return __classPrivateFieldGet(this, _RedisCluster_instances, "m", _RedisCluster_execute).call(this, RedisCluster.extractFirstKey(script, originalArgs, redisArgs), script.IS_READ_ONLY, client => client.executeScript(script, redisArgs, options));
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/index.js:176:                    await __classPrivateFieldGet(this, _RedisCluster_slots, "f").rediscover(client);
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/index.js:230:                    await __classPrivateFieldGet(this, _RedisCluster_slots, "f").rediscover(client);
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/cluster/index.js:241:                await __classPrivateFieldGet(this, _RedisCluster_slots, "f").rediscover(client);
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/pub-sub.js:298:    const channelString = pattern ? channel.toString() : keyString, messageString = channelString === '__redis__:invalidate' ?
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/pub-sub.js:299:        // https://github.com/redis/redis/pull/7469
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/pub-sub.js:300:        // https://github.com/redis/redis/issues/7463
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.d.ts:17:     * `redis[s]://[[username][:password]@][host][:port][/db-number]`
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.d.ts:18:     * See [`redis`](https://www.iana.org/assignments/uri-schemes/prov/redis) and [`rediss`](https://www.iana.org/assignments/uri-schemes/prov/rediss) IANA registration for more details
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.d.ts:26:     * ACL username ([see ACL guide](https://redis.io/topics/acl))
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.d.ts:34:     * Client name ([see `CLIENT SETNAME`](https://redis.io/commands/client-setname))
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.d.ts:38:     * Redis database number (see [`SELECT`](https://redis.io/commands/select) command)
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.d.ts:51:     * Connect in [`READONLY`](https://redis.io/commands/readonly) mode
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.d.ts:62:     * If set to true, disables sending client identifier (user-agent like message) to the redis server
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/RESP2/decoder.js:7:// https://redis.io/topics/protocol
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.js:50:        // https://www.iana.org/assignments/uri-schemes/prov/redis
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.js:56:        if (protocol === 'rediss:') {
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.js:59:        else if (protocol !== 'redis:') {
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.js:189:        const { args: redisArgs, options } = (0, commander_1.transformCommandArguments)(command, args);
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.js:190:        return (0, commander_1.transformCommandReply)(command, await __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, redisArgs, options), redisArgs.preserve);
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.js:196:        const { args: redisArgs, options } = (0, commander_1.transformCommandArguments)(fn, args);
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.js:197:        return (0, commander_1.transformCommandReply)(fn, await this.executeFunction(name, fn, redisArgs, options), redisArgs.preserve);
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.js:203:        const { args: redisArgs, options } = (0, commander_1.transformCommandArguments)(script, args);
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.js:204:        return (0, commander_1.transformCommandReply)(script, await this.executeScript(script, redisArgs, options), redisArgs.preserve);
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.js:207:        const redisArgs = ['EVALSHA', script.SHA1];
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.js:209:            redisArgs.push(script.NUMBER_OF_KEYS.toString());
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.js:211:        redisArgs.push(...args);
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.js:213:            return await __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, redisArgs, options);
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.js:219:            redisArgs[0] = 'EVAL';
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.js:220:            redisArgs[1] = script.SCRIPT;
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.js:221:            return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, redisArgs, options);
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/client/index.js:394:                __classPrivateFieldGet(this, _RedisClient_options, "f")?.clientInfoTag ? `node-redis(${__classPrivateFieldGet(this, _RedisClient_options, "f").clientInfoTag})` : 'node-redis'
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/commands/CLUSTER_NODES.js:37:                    // TODO: importing & exporting (https://redis.io/commands/cluster-nodes#special-slot-entries)
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/commands/generic-transformers.js:261:        // https://github.com/redis/node-redis/pull/2160
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/commands/ZRANGESTORE.js:36:        throw new TypeError(`Upgrade to Redis 6.2.5 and up (https://github.com/redis/redis/pull/9089)`);
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/lib/commands/GEOSEARCHSTORE.js:18:        throw new TypeError(`https://github.com/redis/redis/issues/9261`);
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/package.json:2:    "name": "@redis/client",
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/package.json:23:        "@redis/test-utils": "*",
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/package.json:43:        "url": "git://github.com/redis/node-redis.git"
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/package.json:46:        "url": "https://github.com/redis/node-redis/issues"
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/package.json:48:    "homepage": "https://github.com/redis/node-redis/tree/master/packages/client",
node_modules/cache-manager-redis-store/node_modules/@redis/client/dist/package.json:50:        "redis"
node_modules/cache-manager-redis-store/node_modules/@redis/search/package.json:2:  "name": "@redis/search",
node_modules/cache-manager-redis-store/node_modules/@redis/search/package.json:16:    "@redis/client": "^1.0.0"
node_modules/cache-manager-redis-store/node_modules/@redis/search/package.json:20:    "@redis/test-utils": "*",
node_modules/cache-manager-redis-store/node_modules/@redis/search/package.json:31:    "url": "git://github.com/redis/node-redis.git"
node_modules/cache-manager-redis-store/node_modules/@redis/search/package.json:34:    "url": "https://github.com/redis/node-redis/issues"
node_modules/cache-manager-redis-store/node_modules/@redis/search/package.json:36:  "homepage": "https://github.com/redis/node-redis/tree/master/packages/search",
node_modules/cache-manager-redis-store/node_modules/@redis/search/package.json:38:    "redis",
node_modules/cache-manager-redis-store/node_modules/@redis/search/README.md:1:# @redis/search
node_modules/cache-manager-redis-store/node_modules/@redis/search/README.md:3:This package provides support for the [RediSearch](https://redisearch.io) module, which adds indexing and querying support for data stored in Redis Hashes or as JSON documents with the RedisJSON module.  It extends the [Node Redis client](https://github.com/redis/node-redis) to include functions for each of the RediSearch commands.
node_modules/cache-manager-redis-store/node_modules/@redis/search/README.md:9:For complete examples, see [`search-hashes.js`](https://github.com/redis/node-redis/blob/master/examples/search-hashes.js) and [`search-json.js`](https://github.com/redis/node-redis/blob/master/examples/search-json.js) in the Node Redis examples folder.
node_modules/cache-manager-redis-store/node_modules/@redis/search/README.md:15:Before we can perform any searches, we need to tell RediSearch how to index our data, and which Redis keys to find that data in.  The [FT.CREATE](https://redis.io/commands/ft.create) command creates a RediSearch index.  Here's how to use it to create an index we'll call `idx:animals` where we want to index hashes containing `name`, `species` and `age` fields, and whose key names in Redis begin with the prefix `noderedis:animals`:
node_modules/cache-manager-redis-store/node_modules/@redis/search/README.md:27:  PREFIX: 'noderedis:animals'
node_modules/cache-manager-redis-store/node_modules/@redis/search/README.md:31:See the [`FT.CREATE` documentation](https://redis.io/commands/ft.create/#description) for information about the different field types and additional options.
node_modules/cache-manager-redis-store/node_modules/@redis/search/README.md:35:Once we've created an index, and added some data to Redis hashes whose keys begin with the prefix `noderedis:animals`, we can start writing some search queries.  RediSearch supports a rich query syntax for full-text search, faceted search, aggregation and more.  Check out the [`FT.SEARCH` documentation](https://redis.io/commands/ft.search) and the [query syntax reference](https://redis.io/docs/interact/search-and-query/query) for more information.
node_modules/cache-manager-redis-store/node_modules/@redis/search/README.md:50:      id: 'noderedis:animals:4',
node_modules/cache-manager-redis-store/node_modules/@redis/search/README.md:58:      id: 'noderedis:animals:3',
node_modules/cache-manager-redis-store/node_modules/@redis/search/README.md:105:  PREFIX: 'noderedis:users'
node_modules/cache-manager-redis-store/node_modules/@redis/search/README.md:113:Now we have an index and some data stored as JSON documents in Redis (see the [JSON package documentation](https://github.com/redis/node-redis/tree/master/packages/json) for examples of how to store JSON), we can write some queries...
node_modules/cache-manager-redis-store/node_modules/@redis/search/README.md:115:We'll use the [RediSearch query language](https://redis.io/docs/interact/search-and-query/query) and [`FT.SEARCH`](https://redis.io/commands/ft.search) command.  Here's a query to find users under the age of 30:
node_modules/cache-manager-redis-store/node_modules/@redis/search/dist/commands/SYNUPDATE.js:4:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/search/dist/commands/INFO.d.ts:1:import { RedisCommandArgument } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/search/dist/commands/index.d.ts:35:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/search/dist/commands/AGGREGATE.js:4:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/search/dist/commands/SYNUPDATE.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/search/dist/commands/AGGREGATE.d.ts:1:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/search/dist/commands/CURSOR_DEL.d.ts:1:import { RedisCommandArgument } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/search/dist/commands/PROFILE_SEARCH.d.ts:3:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/search/dist/commands/SUGDEL.d.ts:2:export { transformBooleanReply as transformReply } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/cache-manager-redis-store/node_modules/@redis/search/dist/commands/SEARCH.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/search/dist/commands/CREATE.js:4:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/search/dist/commands/SUGDEL.js:8:var generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/search/dist/commands/index.js:38:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/search/dist/commands/DICTDEL.js:4:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/search/dist/commands/DICTADD.js:4:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/search/dist/commands/DICTADD.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/search/dist/commands/CURSOR_READ.d.ts:1:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/search/dist/commands/DICTDEL.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/search/dist/commands/AGGREGATE_WITHCURSOR.d.ts:6:export declare function transformArguments(index: string, query: string, options?: AggregateWithCursorOptions): import("@redis/client/dist/lib/commands").RedisCommandArguments;
node_modules/cache-manager-redis-store/node_modules/@redis/search/dist/commands/SEARCH_NOCONTENT.d.ts:1:import { RedisCommandArguments } from "@redis/client/dist/lib/commands";
node_modules/cache-manager-redis-store/node_modules/@redis/search/dist/commands/INFO.js:4:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/graph/package.json:2:  "name": "@redis/graph",
node_modules/cache-manager-redis-store/node_modules/@redis/graph/package.json:16:    "@redis/client": "^1.0.0"
node_modules/cache-manager-redis-store/node_modules/@redis/graph/package.json:20:    "@redis/test-utils": "*",
node_modules/cache-manager-redis-store/node_modules/@redis/graph/package.json:31:    "url": "git://github.com/redis/node-redis.git"
node_modules/cache-manager-redis-store/node_modules/@redis/graph/package.json:34:    "url": "https://github.com/redis/node-redis/issues"
node_modules/cache-manager-redis-store/node_modules/@redis/graph/package.json:36:  "homepage": "https://github.com/redis/node-redis/tree/master/packages/graph",
node_modules/cache-manager-redis-store/node_modules/@redis/graph/package.json:38:    "redis",
node_modules/cache-manager-redis-store/node_modules/@redis/graph/README.md:1:# @redis/graph
node_modules/cache-manager-redis-store/node_modules/@redis/graph/README.md:5:import { createClient, Graph } from 'redis';
node_modules/cache-manager-redis-store/node_modules/@redis/graph/dist/graph.d.ts:1:import { RedisClientType } from '@redis/client/dist/lib/client/index';
node_modules/cache-manager-redis-store/node_modules/@redis/graph/dist/graph.d.ts:2:import { RedisCommandArgument, RedisFunctions, RedisScripts } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/graph/dist/commands/index.d.ts:10:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/graph/dist/commands/QUERY.d.ts:1:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands/index';
node_modules/cache-manager-redis-store/node_modules/@redis/graph/dist/commands/RO_QUERY.d.ts:1:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/package.json:2:  "name": "@redis/bloom",
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/package.json:16:    "@redis/client": "^1.0.0"
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/package.json:20:    "@redis/test-utils": "*",
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/README.md:1:# @redis/bloom
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/README.md:3:This package provides support for the [RedisBloom](https://redisbloom.io) module, which adds additional probabilistic data structures to Redis.  It extends the [Node Redis client](https://github.com/redis/node-redis) to include functions for each of the RediBloom commands.
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/cuckoo/ADD.d.ts:3:export { transformBooleanReply as transformReply } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/cuckoo/index.d.ts:12:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/cuckoo/ADDNX.js:9:var generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/cuckoo/INSERT.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/cuckoo/INSERT.d.ts:5:export { transformBooleanArrayReply as transformReply } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/cuckoo/EXISTS.js:10:var generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/cuckoo/INSERT.js:10:var generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/cuckoo/DEL.d.ts:3:export { transformBooleanReply as transformReply } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/cuckoo/INSERTNX.js:10:var generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/cuckoo/ADD.js:9:var generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/cuckoo/LOADCHUNK.d.ts:1:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/cuckoo/index.js:15:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/cuckoo/INSERTNX.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/cuckoo/INSERTNX.d.ts:5:export { transformBooleanArrayReply as transformReply } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/cuckoo/DEL.js:9:var generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/cuckoo/ADDNX.d.ts:3:export { transformBooleanReply as transformReply } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/cuckoo/EXISTS.d.ts:4:export { transformBooleanReply as transformReply } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/top-k/ADD.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/top-k/COUNT.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/top-k/QUERY.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/top-k/ADD.js:4:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/top-k/COUNT.js:4:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/top-k/QUERY.js:4:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/count-min-sketch/QUERY.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/count-min-sketch/QUERY.js:4:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/t-digest/ADD.d.ts:1:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/t-digest/INFO.d.ts:1:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/t-digest/index.d.ts:1:import { RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/t-digest/RANK.d.ts:1:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/t-digest/MERGE.js:4:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/t-digest/MAX.d.ts:1:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/t-digest/BYREVRANK.d.ts:1:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/t-digest/BYRANK.d.ts:1:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/t-digest/MERGE.d.ts:1:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/t-digest/CREATE.d.ts:1:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/t-digest/QUANTILE.d.ts:1:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/t-digest/TRIMMED_MEAN.d.ts:1:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/t-digest/CDF.d.ts:1:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/t-digest/REVRANK.d.ts:1:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/t-digest/MIN.d.ts:1:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/t-digest/RESET.d.ts:1:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/bloom/ADD.d.ts:3:export { transformBooleanReply as transformReply } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/bloom/MADD.d.ts:3:export { transformBooleanArrayReply as transformReply } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/bloom/MEXISTS.d.ts:4:export { transformBooleanArrayReply as transformReply } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/bloom/INSERT.d.ts:1:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/bloom/INSERT.d.ts:11:export { transformBooleanArrayReply as transformReply } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/bloom/EXISTS.js:10:var generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/bloom/INSERT.js:4:const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/bloom/INSERT.js:27:var generic_transformers_2 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/bloom/MEXISTS.js:10:var generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/bloom/ADD.js:9:var generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/bloom/LOADCHUNK.d.ts:1:import { RedisCommandArgument, RedisCommandArguments } from '@redis/client/dist/lib/commands';
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/bloom/MADD.js:9:var generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
node_modules/cache-manager-redis-store/node_modules/@redis/bloom/dist/commands/bloom/EXISTS.d.ts:4:export { transformBooleanReply as transformReply } from '@redis/client/dist/lib/commands/generic-transformers';
node_modules/cache-manager-redis-store/README.md:1:[![npm version](https://badge.fury.io/js/cache-manager-redis-store.svg)](https://badge.fury.io/js/cache-manager-redis-store)
node_modules/cache-manager-redis-store/README.md:2:[![GitHub issues](https://img.shields.io/github/issues/dabroek/node-cache-manager-redis-store.svg)](https://github.com/dabroek/node-cache-manager-redis-store/issues)
node_modules/cache-manager-redis-store/README.md:9:How is this package different from `node-cache-manager-redis`?
node_modules/cache-manager-redis-store/README.md:11:This is a **completely different version** than the earlier [node-cache-manager-redis](https://github.com/dial-once/node-cache-manager-redis). This package does not use `redis-pool` which is unnecessary and not actively maintained.
node_modules/cache-manager-redis-store/README.md:13:This package aims to provide **the most simple wrapper possible** by just passing the configuration to the underlying `node_redis` package.
node_modules/cache-manager-redis-store/README.md:19:npm install cache-manager-redis-store --save
node_modules/cache-manager-redis-store/README.md:23:yarn add cache-manager-redis-store
node_modules/cache-manager-redis-store/README.md:35:var redisStore = require('cache-manager-redis-store');
node_modules/cache-manager-redis-store/README.md:37:var redisCache = cacheManager.caching({
node_modules/cache-manager-redis-store/README.md:38:  store: redisStore,
node_modules/cache-manager-redis-store/README.md:46:// listen for redis connection error event
node_modules/cache-manager-redis-store/README.md:47:var redisClient = redisCache.store.getClient();
node_modules/cache-manager-redis-store/README.md:49:redisClient.on('error', (error) => {
node_modules/cache-manager-redis-store/README.md:56:redisCache.set('foo', 'bar', { ttl: ttl }, (err) => {
node_modules/cache-manager-redis-store/README.md:61:  redisCache.get('foo', (err, result) => {
node_modules/cache-manager-redis-store/README.md:64:    redisCache.del('foo', (err) => {
node_modules/cache-manager-redis-store/README.md:80:redisCache.wrap(key, (cb) => {
node_modules/cache-manager-redis-store/README.md:85:  // Second time fetches user from redisCache
node_modules/cache-manager-redis-store/README.md:86:  redisCache
node_modules/cache-manager-redis-store/README.md:99:var redisStore = require('cache-manager-redis-store');
node_modules/cache-manager-redis-store/README.md:101:var redisCache = cacheManager.caching({ store: redisStore, db: 0, ttl: 600 });
node_modules/cache-manager-redis-store/README.md:104:var multiCache = cacheManager.multiCaching([memoryCache, redisCache]);
node_modules/cache-manager-redis-store/README.md:144:Want to help improve this package? We take [pull requests](https://github.com/dabroek/node-cache-manager-redis-store/pulls).
node_modules/cache-manager-redis-store/README.md:150:The `node-cache-manager-redis-store` is licensed under the MIT license.
node_modules/cache-manager-redis-store/dist/index.d.ts:2:import type { RedisClientType, RedisClientOptions } from "redis";
node_modules/cache-manager-redis-store/dist/index.d.ts:19:export function redisStore(config: RedisClientOptions & StoreConfig): Promise<RedisStore>;
node_modules/cache-manager-redis-store/dist/index.js:6:var redis = require('redis');
node_modules/cache-manager-redis-store/dist/index.js:436:function redisStore(_x) {
node_modules/cache-manager-redis-store/dist/index.js:437:  return _redisStore.apply(this, arguments);
node_modules/cache-manager-redis-store/dist/index.js:439:function _redisStore() {
node_modules/cache-manager-redis-store/dist/index.js:440:  _redisStore = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(config) {
node_modules/cache-manager-redis-store/dist/index.js:441:    var redisCache;
node_modules/cache-manager-redis-store/dist/index.js:446:            redisCache = redis.createClient(config);
node_modules/cache-manager-redis-store/dist/index.js:448:            return redisCache.connect();
node_modules/cache-manager-redis-store/dist/index.js:450:            return _context10.abrupt("return", buildRedisStoreWithConfig(redisCache, config));
node_modules/cache-manager-redis-store/dist/index.js:458:  return _redisStore.apply(this, arguments);
node_modules/cache-manager-redis-store/dist/index.js:460:var buildRedisStoreWithConfig = function buildRedisStoreWithConfig(redisCache, config) {
node_modules/cache-manager-redis-store/dist/index.js:482:              return _context.abrupt("return", redisCache.setEx(key, ttl, encodeValue(value)));
node_modules/cache-manager-redis-store/dist/index.js:484:              return _context.abrupt("return", redisCache.set(key, encodeValue(value)));
node_modules/cache-manager-redis-store/dist/index.js:504:              return redisCache.get(key);
node_modules/cache-manager-redis-store/dist/index.js:534:              return _context3.abrupt("return", redisCache.del(args));
node_modules/cache-manager-redis-store/dist/index.js:572:              multi = redisCache.multi();
node_modules/cache-manager-redis-store/dist/index.js:587:              return _context4.abrupt("return", redisCache.mSet(items));
node_modules/cache-manager-redis-store/dist/index.js:617:              return _context5.abrupt("return", redisCache.mGet(args).then(function (res) {
node_modules/cache-manager-redis-store/dist/index.js:655:              return _context6.abrupt("return", redisCache.del(args));
node_modules/cache-manager-redis-store/dist/index.js:673:              return _context7.abrupt("return", redisCache.flushDb());
node_modules/cache-manager-redis-store/dist/index.js:691:              return _context8.abrupt("return", redisCache.keys(pattern));
node_modules/cache-manager-redis-store/dist/index.js:709:              return _context9.abrupt("return", redisCache.ttl(key));
node_modules/cache-manager-redis-store/dist/index.js:722:    name: 'redis',
node_modules/cache-manager-redis-store/dist/index.js:724:      return redisCache;
node_modules/cache-manager-redis-store/dist/index.js:838:exports.redisStore = redisStore;
node_modules/puppeteer-core/lib/es5-iife/puppeteer-core-browser.js:144:      appropriateness of using or redistributing the Work and assume any
node_modules/puppeteer-core/lib/es5-iife/puppeteer-core-browser.js:157:    9. Accepting Warranty or Additional Liability. While redistributing
node_modules/puppeteer-core/lib/cjs/third_party/rxjs/rxjs.js:151:    appropriateness of using or redistributing the Work and assume any
node_modules/puppeteer-core/lib/cjs/third_party/rxjs/rxjs.js:166: 9. Accepting Warranty or Additional Liability. While redistributing
node_modules/puppeteer-core/lib/esm/third_party/rxjs/rxjs.js:151:    appropriateness of using or redistributing the Work and assume any
node_modules/puppeteer-core/lib/esm/third_party/rxjs/rxjs.js:166: 9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@playwright/test/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/@playwright/test/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@playwright/test/node_modules/playwright/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/@playwright/test/node_modules/playwright/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@playwright/test/node_modules/playwright/ThirdPartyNotices.txt:295:      appropriateness of using or redistributing the Work and assume any
node_modules/@playwright/test/node_modules/playwright/ThirdPartyNotices.txt:310:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@playwright/test/node_modules/playwright-core/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/@playwright/test/node_modules/playwright-core/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/@playwright/test/node_modules/playwright-core/ThirdPartyNotices.txt:826: * All redistributions must retain an intact copy of this copyright notice
node_modules/human-signals/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/human-signals/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/stream-http/node_modules/readable-stream/CONTRIBUTING.md:24:  maintained indefinitely and may be redistributed consistent with
node_modules/b4a/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/b4a/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/ejs/LICENSE:151:      appropriateness of using or redistributing the Work and assume any
node_modules/ejs/LICENSE:166:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/jsonstream2/test/fixtures/all_npm.json:271:{"id":"backbone-redis","key":"backbone-redis","value":{"rev":"9-2e3f6a9e095b00ccec9aa19b3fbc65eb"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:285:{"id":"banzai-redis","key":"banzai-redis","value":{"rev":"3-446f29e0819fd79c810fdfa8ce05bdcf"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:698:{"id":"connect-heroku-redis","key":"connect-heroku-redis","value":{"rev":"13-92da2be67451e5f55f6fbe3672c86dc4"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:720:{"id":"connect-redis","key":"connect-redis","value":{"rev":"40-4faa12962b14da49380de2bb183176f9"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:727:{"id":"connect-session-redis-store","key":"connect-session-redis-store","value":{"rev":"8-fecfed6e17476eaada5cfe7740d43893"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:1134:{"id":"express-session-redis","key":"express-session-redis","value":{"rev":"6-5f4f16092a0706d2daef89470d6971e6"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:1487:{"id":"hiredis","key":"hiredis","value":{"rev":"46-29ceb03860efbd4b3b995247f27f78b9"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:2364:{"id":"nconf-redis","key":"nconf-redis","value":{"rev":"5-21ae138633b20cb29ed49b9fcd425e10"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:2524:{"id":"node-redis","key":"node-redis","value":{"rev":"13-12adf3a3e986675637fa47b176f527e3"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:2525:{"id":"node-redis-mapper","key":"node-redis-mapper","value":{"rev":"5-53ba8f67cc82dbf1d127fc7359353f32"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:2526:{"id":"node-redis-monitor","key":"node-redis-monitor","value":{"rev":"3-79bcba76241d7c7dbc4b18d90a9d59e3"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:3064:{"id":"redis","key":"redis","value":{"rev":"98-ec237259e8ef5c42a76ff260be50f8fd"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:3065:{"id":"redis-channels","key":"redis-channels","value":{"rev":"3-8efc40a25fd18c1c9c41bbaeedb0b22f"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:3066:{"id":"redis-client","key":"redis-client","value":{"rev":"3-3376054236e651e7dfcf91be8632fd0e"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:3067:{"id":"redis-completer","key":"redis-completer","value":{"rev":"11-9e5bf1f8d37df681e7896252809188d3"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:3068:{"id":"redis-keyspace","key":"redis-keyspace","value":{"rev":"25-245f2375741eb3e574dfce9f2da2b687"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:3069:{"id":"redis-lua","key":"redis-lua","value":{"rev":"7-81f3dd3a4601271818f15278f495717a"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:3070:{"id":"redis-namespace","key":"redis-namespace","value":{"rev":"3-ddf52a172db190fe788aad4116b1cb29"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:3071:{"id":"redis-node","key":"redis-node","value":{"rev":"24-7a1e9098d8b5a42a99ca71a01b0d7672"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:3072:{"id":"redis-queue","key":"redis-queue","value":{"rev":"3-9896587800c4b98ff291b74210c16b6e"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:3073:{"id":"redis-session-store","key":"redis-session-store","value":{"rev":"3-2229501ecf817f9ca60ff2c7721ddd73"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:3074:{"id":"redis-tag","key":"redis-tag","value":{"rev":"9-6713e8e91a38613cfef09d7b40f4df71"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:3075:{"id":"redis-url","key":"redis-url","value":{"rev":"5-f53545a0039b512a2f7afd4ba2e08773"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:3076:{"id":"redis-user","key":"redis-user","value":{"rev":"11-a8c0f6d40cbfbb6183a46e121f31ec06"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:3077:{"id":"redis2json","key":"redis2json","value":{"rev":"5-dd96f78f8db0bf695346c95c2ead1307"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:3078:{"id":"redis_objects","key":"redis_objects","value":{"rev":"3-499fe6dd07e7a3839111b1892b97f54c"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:3079:{"id":"redisev","key":"redisev","value":{"rev":"3-8e857dbe2341292c6e170a7bfe3fa81b"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:3080:{"id":"redisfs","key":"redisfs","value":{"rev":"69-d9c90256d32348fdca7a4e646ab4d551"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:3081:{"id":"redisify","key":"redisify","value":{"rev":"3-03fce3095b4129e71280d278f11121ba"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:3082:{"id":"rediskit","key":"rediskit","value":{"rev":"5-6a0324708f45d884a492cbc408137059"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:3083:{"id":"redisql","key":"redisql","value":{"rev":"6-b31802eb37910cb74bd3c9f7b477c025"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:3270:{"id":"server-backbone-redis","key":"server-backbone-redis","value":{"rev":"13-c56419457002aa4fa23b142634882594"}},
node_modules/jsonstream2/test/fixtures/all_npm.json:3916:{"id":"winston-redis","key":"winston-redis","value":{"rev":"3-1fb861edc109ed5cbd735320124ba103"}},
node_modules/socket.io-adapter/Readme.md:19:at [socket.io-redis](https://github.com/learnboost/socket.io-redis).
node_modules/keyv/src/index.d.ts:81:		/** Specify an adapter to use. e.g `'redis'` or `'mongodb'`. */
node_modules/keyv/src/index.d.ts:82:		adapter?: 'redis' | 'mongodb' | 'mongo' | 'sqlite' | 'postgresql' | 'postgres' | 'mysql' | undefined;
node_modules/keyv/src/index.js:8:		redis: '@keyv/redis',
node_modules/keyv/src/index.js:9:		rediss: '@keyv/redis',
node_modules/keyv/src/index.js:33:	'redis',
node_modules/keyv/README.md:42:npm install --save @keyv/redis
node_modules/keyv/README.md:57:const keyv = new Keyv('redis://user:pass@localhost:6379');
node_modules/keyv/README.md:79:const users = new Keyv('redis://user:pass@localhost:6379', { namespace: 'users' });
node_modules/keyv/README.md:80:const cache = new Keyv('redis://user:pass@localhost:6379', { namespace: 'cache' });
node_modules/keyv/README.md:109:Redis | [@keyv/redis](https://github.com/jaredwray/keyv/tree/master/packages/redis) | Yes
node_modules/keyv/README.md:185:// After npm install --save keyv-redis
node_modules/keyv/README.md:186:const awesomeModule = new AwesomeModule({ cache: 'redis://localhost' });
node_modules/keyv/README.md:298:Specify an adapter to use. e.g `'redis'` or `'mongodb'`.
node_modules/cache-manager/package.json:31:    "redis",
node_modules/cache-manager/package.json:57:    "@keyv/redis": "^4.4.1",
node_modules/cache-manager/package.json:61:    "cache-manager-redis-yet": "^5.1.5",
node_modules/cache-manager/node_modules/keyv/package.json:39:    "redis",
node_modules/cache-manager/node_modules/keyv/README.md:78:npm install --save @keyv/redis
node_modules/cache-manager/node_modules/keyv/README.md:127:// redis
node_modules/cache-manager/node_modules/keyv/README.md:128:import KeyvRedis from '@keyv/redis';
node_modules/cache-manager/node_modules/keyv/README.md:130:const keyv = new Keyv(new KeyvRedis('redis://user:pass@localhost:6379'));
node_modules/cache-manager/node_modules/keyv/README.md:154:import KeyvRedis from '@keyv/redis';
node_modules/cache-manager/node_modules/keyv/README.md:156:const keyvRedis = new KeyvRedis('redis://user:pass@localhost:6379');
node_modules/cache-manager/node_modules/keyv/README.md:173:const users = new Keyv(new KeyvRedis('redis://user:pass@localhost:6379'), { namespace: 'users' });
node_modules/cache-manager/node_modules/keyv/README.md:174:const cache = new Keyv(new KeyvRedis('redis://user:pass@localhost:6379'), { namespace: 'cache' });
node_modules/cache-manager/node_modules/keyv/README.md:281:Redis | [@keyv/redis](https://github.com/jaredwray/keyv/tree/master/packages/redis) | Yes
node_modules/cache-manager/node_modules/keyv/dist/index.cjs:215:  "redis",
node_modules/cache-manager/node_modules/keyv/dist/index.js:189:  "redis",
node_modules/cache-manager/README.md:63:import { createKeyv as createKeyvRedis } from '@keyv/redis';
node_modules/cache-manager/README.md:66:const redisStore = createKeyvRedis('redis://user:pass@localhost:6379');
node_modules/cache-manager/README.md:69:  stores: [memoryStore, redisStore],
node_modules/cache-manager/README.md:102:If you are still wanting to use the legacy storage adapters you can use the `KeyvAdapter` to wrap the storage adapter. Below is an example of how to migrate from `v5` to `v6` using `cache-manager-redis-yet` by going to [Using Legacy Storage Adapters](#using-legacy-storage-adapters).
node_modules/cache-manager/README.md:134:* [Update on `redis` and `ioredis` Support](#update-on-redis-and-ioredis-support)
node_modules/cache-manager/README.md:148:npm install @keyv/redis
node_modules/cache-manager/README.md:171:Here is an example of doing layer 1 and layer 2 caching with the in-memory being `CacheableMemory` from Cacheable and the second layer being `@keyv/redis`:
node_modules/cache-manager/README.md:175:import KeyvRedis from '@keyv/redis';
node_modules/cache-manager/README.md:189:      store: new KeyvRedis('redis://user:pass@localhost:6379'),
node_modules/cache-manager/README.md:462:Will disconnect from the relevant store(s). It is highly recommended to use this when using a [Keyv](https://keyv.org/) storage adapter that requires a disconnect. For each storage adapter, the use case for when to use disconnect is different. An example is that `@keyv/redis` should be used only when you are done with the cache.
node_modules/cache-manager/README.md:537:import { createKeyv } from '@keyv/redis';
node_modules/cache-manager/README.md:541:const keyvRedis = createKeyv('redis://user:pass@localhost:6379');
node_modules/cache-manager/README.md:551:// get the store you want to iterate over. In this example we are using the second store (redis)
node_modules/cache-manager/README.md:563:# Update on redis and ioredis Support
node_modules/cache-manager/README.md:565:We will not be supporting `cache-manager-ioredis-yet` or `cache-manager-redis-yet` in the future as we have moved to using `Keyv` as the storage adapter `@keyv/redis`.
node_modules/cache-manager/README.md:569:There are many storage adapters built for `cache-manager` and because of that we wanted to provide a way to use them with `KeyvAdapter`. Below is an example of using `cache-manager-redis-yet`:
node_modules/cache-manager/README.md:574:import { redisStore } from 'cache-manager-redis-yet';
node_modules/cache-manager/README.md:576:const adapter = new KeyvAdapter( await redisStore() );
node_modules/aws-sign2/LICENSE:49:7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.
node_modules/aws-sign2/LICENSE:53:9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.
node_modules/bare-os/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/bare-os/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
nodgrep: node_modules/@next/swc-linux-x64-musl/next-swc.linux-x64-musl.node: binary file matches
e_modules/ts-jest/node_modules/type-fest/license-cc0:25:works, reuse and redistribute as freely as possible in any form whatsoever
grep: node_modules/@next/swc-linux-x64-gnu/next-swc.linux-x64-gnu.node: binary file matches
grep: .git/index: binary file matches
node_modules/detect-libc/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/detect-libc/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/ip-address/node_modules/jsbn/LICENSE:33: * All redistributions must retain an intact copy of this copyright notice
node_modules/@supabase/storage-js/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/@supabase/storage-js/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
node_modules/webfontloader/LICENSE:150:      appropriateness of using or redistributing the Work and assume any
node_modules/webfontloader/LICENSE:165:   9. Accepting Warranty or Additional Liability. While redistributing
performance-improvements.md:145:- `apps/api/src/common/redis/redis.module.ts`
performance-improvements.md:146:- `apps/api/src/common/redis/redis.service.ts`
scripts/deploy-to-fly.sh:41:    echo "fly secrets set REDIS_URL='your-redis-url'"
docs/SYDNEY_MIGRATION_GUIDE.md:77:fly redis create --region syd --name heya-pos-redis
package-lock.json:94:        "cache-manager-redis-store": "^3.0.1",
package-lock.json:110:        "redis": "^5.6.0",
package-lock.json:5276:    "node_modules/@redis/bloom": {
package-lock.json:5278:      "resolved": "https://registry.npmjs.org/@redis/bloom/-/bloom-5.6.0.tgz",
package-lock.json:5285:        "@redis/client": "^5.6.0"
package-lock.json:5288:    "node_modules/@redis/client": {
package-lock.json:5290:      "resolved": "https://registry.npmjs.org/@redis/client/-/client-5.6.0.tgz",
package-lock.json:5300:    "node_modules/@redis/json": {
package-lock.json:5302:      "resolved": "https://registry.npmjs.org/@redis/json/-/json-5.6.0.tgz",
package-lock.json:5309:        "@redis/client": "^5.6.0"
package-lock.json:5312:    "node_modules/@redis/search": {
package-lock.json:5314:      "resolved": "https://registry.npmjs.org/@redis/search/-/search-5.6.0.tgz",
package-lock.json:5321:        "@redis/client": "^5.6.0"
package-lock.json:5324:    "node_modules/@redis/time-series": {
package-lock.json:5326:      "resolved": "https://registry.npmjs.org/@redis/time-series/-/time-series-5.6.0.tgz",
package-lock.json:5333:        "@redis/client": "^5.6.0"
package-lock.json:9379:    "node_modules/cache-manager-redis-store": {
package-lock.json:9381:      "resolved": "https://registry.npmjs.org/cache-manager-redis-store/-/cache-manager-redis-store-3.0.1.tgz",
package-lock.json:9385:        "redis": "^4.3.1"
package-lock.json:9391:    "node_modules/cache-manager-redis-store/node_modules/@redis/bloom": {
package-lock.json:9393:      "resolved": "https://registry.npmjs.org/@redis/bloom/-/bloom-1.2.0.tgz",
package-lock.json:9397:        "@redis/client": "^1.0.0"
package-lock.json:9400:    "node_modules/cache-manager-redis-store/node_modules/@redis/client": {
package-lock.json:9402:      "resolved": "https://registry.npmjs.org/@redis/client/-/client-1.6.1.tgz",
package-lock.json:9414:    "node_modules/cache-manager-redis-store/node_modules/@redis/graph": {
package-lock.json:9416:      "resolved": "https://registry.npmjs.org/@redis/graph/-/graph-1.1.1.tgz",
package-lock.json:9420:        "@redis/client": "^1.0.0"
package-lock.json:9423:    "node_modules/cache-manager-redis-store/node_modules/@redis/json": {
package-lock.json:9425:      "resolved": "https://registry.npmjs.org/@redis/json/-/json-1.0.7.tgz",
package-lock.json:9429:        "@redis/client": "^1.0.0"
package-lock.json:9432:    "node_modules/cache-manager-redis-store/node_modules/@redis/search": {
package-lock.json:9434:      "resolved": "https://registry.npmjs.org/@redis/search/-/search-1.2.0.tgz",
package-lock.json:9438:        "@redis/client": "^1.0.0"
package-lock.json:9441:    "node_modules/cache-manager-redis-store/node_modules/@redis/time-series": {
package-lock.json:9443:      "resolved": "https://registry.npmjs.org/@redis/time-series/-/time-series-1.1.0.tgz",
package-lock.json:9447:        "@redis/client": "^1.0.0"
package-lock.json:9450:    "node_modules/cache-manager-redis-store/node_modules/redis": {
package-lock.json:9452:      "resolved": "https://registry.npmjs.org/redis/-/redis-4.7.1.tgz",
package-lock.json:9459:        "@redis/bloom": "1.2.0",
package-lock.json:9460:        "@redis/client": "1.6.1",
package-lock.json:9461:        "@redis/graph": "1.1.1",
package-lock.json:9462:        "@redis/json": "1.0.7",
package-lock.json:9463:        "@redis/search": "1.2.0",
package-lock.json:9464:        "@redis/time-series": "1.1.0"
package-lock.json:9467:    "node_modules/cache-manager-redis-store/node_modules/yallist": {
package-lock.json:22386:    "node_modules/redis": {
package-lock.json:22388:      "resolved": "https://registry.npmjs.org/redis/-/redis-5.6.0.tgz",
package-lock.json:22392:        "@redis/bloom": "5.6.0",
package-lock.json:22393:        "@redis/client": "5.6.0",
package-lock.json:22394:        "@redis/json": "5.6.0",
package-lock.json:22395:        "@redis/search": "5.6.0",
package-lock.json:22396:        "@redis/time-series": "5.6.0"
